// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: release_plan.proto

package release

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArticlesRelease_Create_FullMethodName  = "/release.ArticlesRelease/Create"
	ArticlesRelease_Get_FullMethodName     = "/release.ArticlesRelease/Get"
	ArticlesRelease_GetById_FullMethodName = "/release.ArticlesRelease/GetById"
	ArticlesRelease_Update_FullMethodName  = "/release.ArticlesRelease/Update"
	ArticlesRelease_Delete_FullMethodName  = "/release.ArticlesRelease/Delete"
)

// ArticlesReleaseClient is the client API for ArticlesRelease service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticlesReleaseClient interface {
	Create(ctx context.Context, in *ParamsCreateArticle, opts ...grpc.CallOption) (*ArticleReleaseActionResponse, error)
	Get(ctx context.Context, in *ParamsGetArticleRelease, opts ...grpc.CallOption) (*ArticleReleaseList, error)
	GetById(ctx context.Context, in *ArticlesReleaseId, opts ...grpc.CallOption) (*ArticleRelease, error)
	Update(ctx context.Context, in *ParamsCreateArticle, opts ...grpc.CallOption) (*ArticleReleaseActionResponse, error)
	Delete(ctx context.Context, in *ArticlesReleaseId, opts ...grpc.CallOption) (*ArticleReleaseActionResponse, error)
}

type articlesReleaseClient struct {
	cc grpc.ClientConnInterface
}

func NewArticlesReleaseClient(cc grpc.ClientConnInterface) ArticlesReleaseClient {
	return &articlesReleaseClient{cc}
}

func (c *articlesReleaseClient) Create(ctx context.Context, in *ParamsCreateArticle, opts ...grpc.CallOption) (*ArticleReleaseActionResponse, error) {
	out := new(ArticleReleaseActionResponse)
	err := c.cc.Invoke(ctx, ArticlesRelease_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesReleaseClient) Get(ctx context.Context, in *ParamsGetArticleRelease, opts ...grpc.CallOption) (*ArticleReleaseList, error) {
	out := new(ArticleReleaseList)
	err := c.cc.Invoke(ctx, ArticlesRelease_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesReleaseClient) GetById(ctx context.Context, in *ArticlesReleaseId, opts ...grpc.CallOption) (*ArticleRelease, error) {
	out := new(ArticleRelease)
	err := c.cc.Invoke(ctx, ArticlesRelease_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesReleaseClient) Update(ctx context.Context, in *ParamsCreateArticle, opts ...grpc.CallOption) (*ArticleReleaseActionResponse, error) {
	out := new(ArticleReleaseActionResponse)
	err := c.cc.Invoke(ctx, ArticlesRelease_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesReleaseClient) Delete(ctx context.Context, in *ArticlesReleaseId, opts ...grpc.CallOption) (*ArticleReleaseActionResponse, error) {
	out := new(ArticleReleaseActionResponse)
	err := c.cc.Invoke(ctx, ArticlesRelease_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticlesReleaseServer is the server API for ArticlesRelease service.
// All implementations should embed UnimplementedArticlesReleaseServer
// for forward compatibility
type ArticlesReleaseServer interface {
	Create(context.Context, *ParamsCreateArticle) (*ArticleReleaseActionResponse, error)
	Get(context.Context, *ParamsGetArticleRelease) (*ArticleReleaseList, error)
	GetById(context.Context, *ArticlesReleaseId) (*ArticleRelease, error)
	Update(context.Context, *ParamsCreateArticle) (*ArticleReleaseActionResponse, error)
	Delete(context.Context, *ArticlesReleaseId) (*ArticleReleaseActionResponse, error)
}

// UnimplementedArticlesReleaseServer should be embedded to have forward compatible implementations.
type UnimplementedArticlesReleaseServer struct {
}

func (UnimplementedArticlesReleaseServer) Create(context.Context, *ParamsCreateArticle) (*ArticleReleaseActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedArticlesReleaseServer) Get(context.Context, *ParamsGetArticleRelease) (*ArticleReleaseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedArticlesReleaseServer) GetById(context.Context, *ArticlesReleaseId) (*ArticleRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedArticlesReleaseServer) Update(context.Context, *ParamsCreateArticle) (*ArticleReleaseActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedArticlesReleaseServer) Delete(context.Context, *ArticlesReleaseId) (*ArticleReleaseActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeArticlesReleaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticlesReleaseServer will
// result in compilation errors.
type UnsafeArticlesReleaseServer interface {
	mustEmbedUnimplementedArticlesReleaseServer()
}

func RegisterArticlesReleaseServer(s grpc.ServiceRegistrar, srv ArticlesReleaseServer) {
	s.RegisterService(&ArticlesRelease_ServiceDesc, srv)
}

func _ArticlesRelease_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsCreateArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesReleaseServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesRelease_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesReleaseServer).Create(ctx, req.(*ParamsCreateArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesRelease_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsGetArticleRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesReleaseServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesRelease_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesReleaseServer).Get(ctx, req.(*ParamsGetArticleRelease))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesRelease_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticlesReleaseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesReleaseServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesRelease_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesReleaseServer).GetById(ctx, req.(*ArticlesReleaseId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesRelease_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsCreateArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesReleaseServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesRelease_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesReleaseServer).Update(ctx, req.(*ParamsCreateArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesRelease_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticlesReleaseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesReleaseServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesRelease_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesReleaseServer).Delete(ctx, req.(*ArticlesReleaseId))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticlesRelease_ServiceDesc is the grpc.ServiceDesc for ArticlesRelease service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticlesRelease_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "release.ArticlesRelease",
	HandlerType: (*ArticlesReleaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ArticlesRelease_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ArticlesRelease_Get_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _ArticlesRelease_GetById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ArticlesRelease_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ArticlesRelease_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "release_plan.proto",
}
