// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: delivery.proto

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Delivery_List_FullMethodName   = "/logistics.Delivery/List"
	Delivery_Detail_FullMethodName = "/logistics.Delivery/Detail"
)

// DeliveryClient is the client API for Delivery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryClient interface {
	List(ctx context.Context, in *OrderPickUpPointsRequest, opts ...grpc.CallOption) (*OrderPickUpPointsResponse, error)
	Detail(ctx context.Context, in *OrderPickUpPointsDetailRequest, opts ...grpc.CallOption) (*OrderPickUpPointsDetailResponse, error)
}

type deliveryClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryClient(cc grpc.ClientConnInterface) DeliveryClient {
	return &deliveryClient{cc}
}

func (c *deliveryClient) List(ctx context.Context, in *OrderPickUpPointsRequest, opts ...grpc.CallOption) (*OrderPickUpPointsResponse, error) {
	out := new(OrderPickUpPointsResponse)
	err := c.cc.Invoke(ctx, Delivery_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) Detail(ctx context.Context, in *OrderPickUpPointsDetailRequest, opts ...grpc.CallOption) (*OrderPickUpPointsDetailResponse, error) {
	out := new(OrderPickUpPointsDetailResponse)
	err := c.cc.Invoke(ctx, Delivery_Detail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryServer is the server API for Delivery service.
// All implementations should embed UnimplementedDeliveryServer
// for forward compatibility
type DeliveryServer interface {
	List(context.Context, *OrderPickUpPointsRequest) (*OrderPickUpPointsResponse, error)
	Detail(context.Context, *OrderPickUpPointsDetailRequest) (*OrderPickUpPointsDetailResponse, error)
}

// UnimplementedDeliveryServer should be embedded to have forward compatible implementations.
type UnimplementedDeliveryServer struct {
}

func (UnimplementedDeliveryServer) List(context.Context, *OrderPickUpPointsRequest) (*OrderPickUpPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDeliveryServer) Detail(context.Context, *OrderPickUpPointsDetailRequest) (*OrderPickUpPointsDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}

// UnsafeDeliveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryServer will
// result in compilation errors.
type UnsafeDeliveryServer interface {
	mustEmbedUnimplementedDeliveryServer()
}

func RegisterDeliveryServer(s grpc.ServiceRegistrar, srv DeliveryServer) {
	s.RegisterService(&Delivery_ServiceDesc, srv)
}

func _Delivery_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPickUpPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Delivery_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).List(ctx, req.(*OrderPickUpPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPickUpPointsDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Delivery_Detail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).Detail(ctx, req.(*OrderPickUpPointsDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Delivery_ServiceDesc is the grpc.ServiceDesc for Delivery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Delivery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.Delivery",
	HandlerType: (*DeliveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Delivery_List_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _Delivery_Detail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "delivery.proto",
}
