// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/tracker_slack.proto

package tracker

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SendTicketParams struct {
	TicketId             string   `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendTicketParams) Reset()         { *m = SendTicketParams{} }
func (m *SendTicketParams) String() string { return proto.CompactTextString(m) }
func (*SendTicketParams) ProtoMessage()    {}
func (*SendTicketParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2125ae767fcd6450, []int{0}
}

func (m *SendTicketParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendTicketParams.Unmarshal(m, b)
}
func (m *SendTicketParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendTicketParams.Marshal(b, m, deterministic)
}
func (m *SendTicketParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTicketParams.Merge(m, src)
}
func (m *SendTicketParams) XXX_Size() int {
	return xxx_messageInfo_SendTicketParams.Size(m)
}
func (m *SendTicketParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTicketParams.DiscardUnknown(m)
}

var xxx_messageInfo_SendTicketParams proto.InternalMessageInfo

func (m *SendTicketParams) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

type SendTicketResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendTicketResponse) Reset()         { *m = SendTicketResponse{} }
func (m *SendTicketResponse) String() string { return proto.CompactTextString(m) }
func (*SendTicketResponse) ProtoMessage()    {}
func (*SendTicketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2125ae767fcd6450, []int{1}
}

func (m *SendTicketResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendTicketResponse.Unmarshal(m, b)
}
func (m *SendTicketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendTicketResponse.Marshal(b, m, deterministic)
}
func (m *SendTicketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTicketResponse.Merge(m, src)
}
func (m *SendTicketResponse) XXX_Size() int {
	return xxx_messageInfo_SendTicketResponse.Size(m)
}
func (m *SendTicketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTicketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendTicketResponse proto.InternalMessageInfo

func (m *SendTicketResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*SendTicketParams)(nil), "tracker.SendTicketParams")
	proto.RegisterType((*SendTicketResponse)(nil), "tracker.SendTicketResponse")
}

func init() { proto.RegisterFile("proto/tracker_slack.proto", fileDescriptor_2125ae767fcd6450) }

var fileDescriptor_2125ae767fcd6450 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x29, 0x4a, 0x4c, 0xce, 0x4e, 0x2d, 0x8a, 0x2f, 0xce, 0x49, 0x4c, 0xce, 0xd6,
	0x03, 0x8b, 0x09, 0xb1, 0x43, 0x05, 0x95, 0xf4, 0xb9, 0x04, 0x82, 0x53, 0xf3, 0x52, 0x42, 0x32,
	0x93, 0xb3, 0x53, 0x4b, 0x02, 0x12, 0x8b, 0x12, 0x73, 0x8b, 0x85, 0xa4, 0xb9, 0x38, 0x4b, 0xc0,
	0xfc, 0xf8, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x0e, 0x88, 0x80, 0x67, 0x8a,
	0x92, 0x1e, 0x97, 0x10, 0x42, 0x43, 0x50, 0x6a, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x04,
	0x17, 0x7b, 0x71, 0x69, 0x72, 0x72, 0x6a, 0x71, 0x31, 0x58, 0x03, 0x47, 0x10, 0x8c, 0x6b, 0x14,
	0xc6, 0xc5, 0x13, 0x02, 0xb1, 0x2b, 0x18, 0x64, 0xbf, 0x90, 0x1b, 0x17, 0x17, 0x42, 0xbf, 0x90,
	0xa4, 0x1e, 0xd4, 0x21, 0x7a, 0xe8, 0xae, 0x90, 0x92, 0xc6, 0x22, 0x05, 0xb3, 0x4f, 0x89, 0xc1,
	0x89, 0x27, 0x8a, 0x2b, 0x1d, 0xee, 0xb7, 0x24, 0x36, 0xb0, 0xb7, 0x8c, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xc1, 0x4f, 0x6d, 0x62, 0xf3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TrackerSlackClient is the client API for TrackerSlack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrackerSlackClient interface {
	SendTicket(ctx context.Context, in *SendTicketParams, opts ...grpc.CallOption) (*SendTicketResponse, error)
}

type trackerSlackClient struct {
	cc *grpc.ClientConn
}

func NewTrackerSlackClient(cc *grpc.ClientConn) TrackerSlackClient {
	return &trackerSlackClient{cc}
}

func (c *trackerSlackClient) SendTicket(ctx context.Context, in *SendTicketParams, opts ...grpc.CallOption) (*SendTicketResponse, error) {
	out := new(SendTicketResponse)
	err := c.cc.Invoke(ctx, "/tracker.TrackerSlack/SendTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerSlackServer is the server API for TrackerSlack service.
type TrackerSlackServer interface {
	SendTicket(context.Context, *SendTicketParams) (*SendTicketResponse, error)
}

// UnimplementedTrackerSlackServer can be embedded to have forward compatible implementations.
type UnimplementedTrackerSlackServer struct {
}

func (*UnimplementedTrackerSlackServer) SendTicket(ctx context.Context, req *SendTicketParams) (*SendTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTicket not implemented")
}

func RegisterTrackerSlackServer(s *grpc.Server, srv TrackerSlackServer) {
	s.RegisterService(&_TrackerSlack_serviceDesc, srv)
}

func _TrackerSlack_SendTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTicketParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerSlackServer).SendTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracker.TrackerSlack/SendTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerSlackServer).SendTicket(ctx, req.(*SendTicketParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrackerSlack_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tracker.TrackerSlack",
	HandlerType: (*TrackerSlackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTicket",
			Handler:    _TrackerSlack_SendTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tracker_slack.proto",
}
