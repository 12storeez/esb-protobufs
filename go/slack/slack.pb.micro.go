// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/slack.proto

package slack

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Tracker service

func NewTrackerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Tracker service

type TrackerService interface {
	StatusChangeTicket(ctx context.Context, in *StatusChangeTicketParams, opts ...client.CallOption) (*StatusChangeTicketResponse, error)
}

type trackerService struct {
	c    client.Client
	name string
}

func NewTrackerService(name string, c client.Client) TrackerService {
	return &trackerService{
		c:    c,
		name: name,
	}
}

func (c *trackerService) StatusChangeTicket(ctx context.Context, in *StatusChangeTicketParams, opts ...client.CallOption) (*StatusChangeTicketResponse, error) {
	req := c.c.NewRequest(c.name, "Tracker.StatusChangeTicket", in)
	out := new(StatusChangeTicketResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tracker service

type TrackerHandler interface {
	StatusChangeTicket(context.Context, *StatusChangeTicketParams, *StatusChangeTicketResponse) error
}

func RegisterTrackerHandler(s server.Server, hdlr TrackerHandler, opts ...server.HandlerOption) error {
	type tracker interface {
		StatusChangeTicket(ctx context.Context, in *StatusChangeTicketParams, out *StatusChangeTicketResponse) error
	}
	type Tracker struct {
		tracker
	}
	h := &trackerHandler{hdlr}
	return s.Handle(s.NewHandler(&Tracker{h}, opts...))
}

type trackerHandler struct {
	TrackerHandler
}

func (h *trackerHandler) StatusChangeTicket(ctx context.Context, in *StatusChangeTicketParams, out *StatusChangeTicketResponse) error {
	return h.TrackerHandler.StatusChangeTicket(ctx, in, out)
}

// Api Endpoints for Slack service

func NewSlackEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Slack service

type SlackService interface {
	Send(ctx context.Context, in *SendParams, opts ...client.CallOption) (*SendResponse, error)
}

type slackService struct {
	c    client.Client
	name string
}

func NewSlackService(name string, c client.Client) SlackService {
	return &slackService{
		c:    c,
		name: name,
	}
}

func (c *slackService) Send(ctx context.Context, in *SendParams, opts ...client.CallOption) (*SendResponse, error) {
	req := c.c.NewRequest(c.name, "Slack.Send", in)
	out := new(SendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Slack service

type SlackHandler interface {
	Send(context.Context, *SendParams, *SendResponse) error
}

func RegisterSlackHandler(s server.Server, hdlr SlackHandler, opts ...server.HandlerOption) error {
	type slack interface {
		Send(ctx context.Context, in *SendParams, out *SendResponse) error
	}
	type Slack struct {
		slack
	}
	h := &slackHandler{hdlr}
	return s.Handle(s.NewHandler(&Slack{h}, opts...))
}

type slackHandler struct {
	SlackHandler
}

func (h *slackHandler) Send(ctx context.Context, in *SendParams, out *SendResponse) error {
	return h.SlackHandler.Send(ctx, in, out)
}
