// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.9
// source: proto/nomenclature.proto

// Package product describes the gRPC interface of the product-go -ms microservice.
// Warning! it`s not equal internal/products

package nomenclature

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Pagination for Request to ms
type PaginationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *PaginationRequest) Reset() {
	*x = PaginationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationRequest) ProtoMessage() {}

func (x *PaginationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationRequest.ProtoReflect.Descriptor instead.
func (*PaginationRequest) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{0}
}

func (x *PaginationRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Pagination for Response to ms
type PaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total  int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PaginationResponse) Reset() {
	*x = PaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationResponse) ProtoMessage() {}

func (x *PaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationResponse.ProtoReflect.Descriptor instead.
func (*PaginationResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{1}
}

func (x *PaginationResponse) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PaginationResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Error
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target  string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Error) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type NomenclatureDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleRu string `protobuf:"bytes,2,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
	TitleEn string `protobuf:"bytes,3,opt,name=title_en,json=titleEn,proto3" json:"title_en,omitempty"`
	// Поле используется только для размеров Size
	IsSampleSale bool `protobuf:"varint,4,opt,name=is_sample_sale,json=isSampleSale,proto3" json:"is_sample_sale,omitempty"`
}

func (x *NomenclatureDescription) Reset() {
	*x = NomenclatureDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NomenclatureDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NomenclatureDescription) ProtoMessage() {}

func (x *NomenclatureDescription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NomenclatureDescription.ProtoReflect.Descriptor instead.
func (*NomenclatureDescription) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{3}
}

func (x *NomenclatureDescription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NomenclatureDescription) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

func (x *NomenclatureDescription) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *NomenclatureDescription) GetIsSampleSale() bool {
	if x != nil {
		return x.IsSampleSale
	}
	return false
}

type SuperModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleRu      string `protobuf:"bytes,2,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
	TitleEn      string `protobuf:"bytes,3,opt,name=title_en,json=titleEn,proto3" json:"title_en,omitempty"`
	IsSampleSale bool   `protobuf:"varint,4,opt,name=is_sample_sale,json=isSampleSale,proto3" json:"is_sample_sale,omitempty"`
	MergingCode  string `protobuf:"bytes,5,opt,name=merging_code,json=mergingCode,proto3" json:"merging_code,omitempty"`
}

func (x *SuperModel) Reset() {
	*x = SuperModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperModel) ProtoMessage() {}

func (x *SuperModel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperModel.ProtoReflect.Descriptor instead.
func (*SuperModel) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{4}
}

func (x *SuperModel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SuperModel) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

func (x *SuperModel) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *SuperModel) GetIsSampleSale() bool {
	if x != nil {
		return x.IsSampleSale
	}
	return false
}

func (x *SuperModel) GetMergingCode() string {
	if x != nil {
		return x.MergingCode
	}
	return ""
}

type ColorDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleRu      string `protobuf:"bytes,2,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
	TitleEn      string `protobuf:"bytes,3,opt,name=title_en,json=titleEn,proto3" json:"title_en,omitempty"`
	IsSampleSale bool   `protobuf:"varint,4,opt,name=is_sample_sale,json=isSampleSale,proto3" json:"is_sample_sale,omitempty"`
	Hex          string `protobuf:"bytes,5,opt,name=hex,proto3" json:"hex,omitempty"`
}

func (x *ColorDescription) Reset() {
	*x = ColorDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorDescription) ProtoMessage() {}

func (x *ColorDescription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorDescription.ProtoReflect.Descriptor instead.
func (*ColorDescription) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{5}
}

func (x *ColorDescription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ColorDescription) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

func (x *ColorDescription) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *ColorDescription) GetIsSampleSale() bool {
	if x != nil {
		return x.IsSampleSale
	}
	return false
}

func (x *ColorDescription) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

type Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleRu      string              `protobuf:"bytes,2,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
	TitleEn      string              `protobuf:"bytes,3,opt,name=title_en,json=titleEn,proto3" json:"title_en,omitempty"`
	IsSampleSale bool                `protobuf:"varint,4,opt,name=is_sample_sale,json=isSampleSale,proto3" json:"is_sample_sale,omitempty"`
	Hex          string              `protobuf:"bytes,5,opt,name=hex,proto3" json:"hex,omitempty"`
	ColorGroups  []*ColorDescription `protobuf:"bytes,6,rep,name=color_groups,json=colorGroups,proto3" json:"color_groups,omitempty"`
}

func (x *Color) Reset() {
	*x = Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{6}
}

func (x *Color) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Color) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

func (x *Color) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *Color) GetIsSampleSale() bool {
	if x != nil {
		return x.IsSampleSale
	}
	return false
}

func (x *Color) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *Color) GetColorGroups() []*ColorDescription {
	if x != nil {
		return x.ColorGroups
	}
	return nil
}

type Capsules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ParentSeason string `protobuf:"bytes,3,opt,name=parent_season,json=parentSeason,proto3" json:"parent_season,omitempty"`
}

func (x *Capsules) Reset() {
	*x = Capsules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capsules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capsules) ProtoMessage() {}

func (x *Capsules) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capsules.ProtoReflect.Descriptor instead.
func (*Capsules) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{7}
}

func (x *Capsules) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Capsules) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Capsules) GetParentSeason() string {
	if x != nil {
		return x.ParentSeason
	}
	return ""
}

type Alt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source  string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Barcode string `protobuf:"bytes,2,opt,name=barcode,proto3" json:"barcode,omitempty"`
}

func (x *Alt) Reset() {
	*x = Alt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alt) ProtoMessage() {}

func (x *Alt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alt.ProtoReflect.Descriptor instead.
func (*Alt) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{8}
}

func (x *Alt) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Alt) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

type Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode        int64   `protobuf:"varint,1,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	CurrencyIso         string  `protobuf:"bytes,2,opt,name=currency_iso,json=currencyIso,proto3" json:"currency_iso,omitempty"`
	Price               int64   `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	PriceBeforeDiscount int64   `protobuf:"varint,4,opt,name=price_before_discount,json=priceBeforeDiscount,proto3" json:"price_before_discount,omitempty"`
	StoreCode           []int64 `protobuf:"varint,5,rep,packed,name=store_code,json=storeCode,proto3" json:"store_code,omitempty"`
}

func (x *Price) Reset() {
	*x = Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{9}
}

func (x *Price) GetCurrencyCode() int64 {
	if x != nil {
		return x.CurrencyCode
	}
	return 0
}

func (x *Price) GetCurrencyIso() string {
	if x != nil {
		return x.CurrencyIso
	}
	return ""
}

func (x *Price) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Price) GetPriceBeforeDiscount() int64 {
	if x != nil {
		return x.PriceBeforeDiscount
	}
	return 0
}

func (x *Price) GetStoreCode() []int64 {
	if x != nil {
		return x.StoreCode
	}
	return nil
}

type Size struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Barcode string                   `protobuf:"bytes,1,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Size    *NomenclatureDescription `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Alts    []*Alt                   `protobuf:"bytes,3,rep,name=alts,proto3" json:"alts,omitempty"`
	Prices  []*Price                 `protobuf:"bytes,4,rep,name=prices,proto3" json:"prices,omitempty"`
}

func (x *Size) Reset() {
	*x = Size{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Size) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Size) ProtoMessage() {}

func (x *Size) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Size.ProtoReflect.Descriptor instead.
func (*Size) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{10}
}

func (x *Size) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *Size) GetSize() *NomenclatureDescription {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *Size) GetAlts() []*Alt {
	if x != nil {
		return x.Alts
	}
	return nil
}

func (x *Size) GetPrices() []*Price {
	if x != nil {
		return x.Prices
	}
	return nil
}

type Maintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Alias             *string `protobuf:"bytes,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	TitleRu           *string `protobuf:"bytes,3,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	TitleEn           *string `protobuf:"bytes,4,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	Video             *string `protobuf:"bytes,5,opt,name=video,proto3,oneof" json:"video,omitempty"`
	VideoPreview      *string `protobuf:"bytes,6,opt,name=video_preview,json=videoPreview,proto3,oneof" json:"video_preview,omitempty"`
	VideoSmall        *string `protobuf:"bytes,7,opt,name=video_small,json=videoSmall,proto3,oneof" json:"video_small,omitempty"`
	VideoPreviewSmall *string `protobuf:"bytes,8,opt,name=video_preview_small,json=videoPreviewSmall,proto3,oneof" json:"video_preview_small,omitempty"`
	DetailsUrl        *string `protobuf:"bytes,9,opt,name=details_url,json=detailsUrl,proto3,oneof" json:"details_url,omitempty"`
	CreatedAt         string  `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         string  `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt         *string `protobuf:"bytes,12,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *Maintenance) Reset() {
	*x = Maintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Maintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maintenance) ProtoMessage() {}

func (x *Maintenance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maintenance.ProtoReflect.Descriptor instead.
func (*Maintenance) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{11}
}

func (x *Maintenance) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Maintenance) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *Maintenance) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *Maintenance) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *Maintenance) GetVideo() string {
	if x != nil && x.Video != nil {
		return *x.Video
	}
	return ""
}

func (x *Maintenance) GetVideoPreview() string {
	if x != nil && x.VideoPreview != nil {
		return *x.VideoPreview
	}
	return ""
}

func (x *Maintenance) GetVideoSmall() string {
	if x != nil && x.VideoSmall != nil {
		return *x.VideoSmall
	}
	return ""
}

func (x *Maintenance) GetVideoPreviewSmall() string {
	if x != nil && x.VideoPreviewSmall != nil {
		return *x.VideoPreviewSmall
	}
	return ""
}

func (x *Maintenance) GetDetailsUrl() string {
	if x != nil && x.DetailsUrl != nil {
		return *x.DetailsUrl
	}
	return ""
}

func (x *Maintenance) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Maintenance) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Maintenance) GetDeletedAt() string {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return ""
}

type UpdateMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias             *string `protobuf:"bytes,1,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	TitleRu           *string `protobuf:"bytes,2,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	TitleEn           *string `protobuf:"bytes,3,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	Video             *string `protobuf:"bytes,4,opt,name=video,proto3,oneof" json:"video,omitempty"`
	VideoPreview      *string `protobuf:"bytes,5,opt,name=video_preview,json=videoPreview,proto3,oneof" json:"video_preview,omitempty"`
	VideoSmall        *string `protobuf:"bytes,6,opt,name=video_small,json=videoSmall,proto3,oneof" json:"video_small,omitempty"`
	VideoPreviewSmall *string `protobuf:"bytes,7,opt,name=video_preview_small,json=videoPreviewSmall,proto3,oneof" json:"video_preview_small,omitempty"`
	DetailsUrl        *string `protobuf:"bytes,8,opt,name=details_url,json=detailsUrl,proto3,oneof" json:"details_url,omitempty"`
	DeletedAt         *string `protobuf:"bytes,9,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *UpdateMaintenance) Reset() {
	*x = UpdateMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMaintenance) ProtoMessage() {}

func (x *UpdateMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMaintenance.ProtoReflect.Descriptor instead.
func (*UpdateMaintenance) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateMaintenance) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *UpdateMaintenance) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *UpdateMaintenance) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *UpdateMaintenance) GetVideo() string {
	if x != nil && x.Video != nil {
		return *x.Video
	}
	return ""
}

func (x *UpdateMaintenance) GetVideoPreview() string {
	if x != nil && x.VideoPreview != nil {
		return *x.VideoPreview
	}
	return ""
}

func (x *UpdateMaintenance) GetVideoSmall() string {
	if x != nil && x.VideoSmall != nil {
		return *x.VideoSmall
	}
	return ""
}

func (x *UpdateMaintenance) GetVideoPreviewSmall() string {
	if x != nil && x.VideoPreviewSmall != nil {
		return *x.VideoPreviewSmall
	}
	return ""
}

func (x *UpdateMaintenance) GetDetailsUrl() string {
	if x != nil && x.DetailsUrl != nil {
		return *x.DetailsUrl
	}
	return ""
}

func (x *UpdateMaintenance) GetDeletedAt() string {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return ""
}

type SetNullMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias             *bool `protobuf:"varint,1,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	TitleRu           *bool `protobuf:"varint,2,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	TitleEn           *bool `protobuf:"varint,3,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	Video             *bool `protobuf:"varint,4,opt,name=video,proto3,oneof" json:"video,omitempty"`
	VideoPreview      *bool `protobuf:"varint,5,opt,name=video_preview,json=videoPreview,proto3,oneof" json:"video_preview,omitempty"`
	VideoSmall        *bool `protobuf:"varint,6,opt,name=video_small,json=videoSmall,proto3,oneof" json:"video_small,omitempty"`
	VideoPreviewSmall *bool `protobuf:"varint,7,opt,name=video_preview_small,json=videoPreviewSmall,proto3,oneof" json:"video_preview_small,omitempty"`
	DetailsUrl        *bool `protobuf:"varint,8,opt,name=details_url,json=detailsUrl,proto3,oneof" json:"details_url,omitempty"`
	DeletedAt         *bool `protobuf:"varint,9,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *SetNullMaintenance) Reset() {
	*x = SetNullMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullMaintenance) ProtoMessage() {}

func (x *SetNullMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullMaintenance.ProtoReflect.Descriptor instead.
func (*SetNullMaintenance) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{13}
}

func (x *SetNullMaintenance) GetAlias() bool {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return false
}

func (x *SetNullMaintenance) GetTitleRu() bool {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return false
}

func (x *SetNullMaintenance) GetTitleEn() bool {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return false
}

func (x *SetNullMaintenance) GetVideo() bool {
	if x != nil && x.Video != nil {
		return *x.Video
	}
	return false
}

func (x *SetNullMaintenance) GetVideoPreview() bool {
	if x != nil && x.VideoPreview != nil {
		return *x.VideoPreview
	}
	return false
}

func (x *SetNullMaintenance) GetVideoSmall() bool {
	if x != nil && x.VideoSmall != nil {
		return *x.VideoSmall
	}
	return false
}

func (x *SetNullMaintenance) GetVideoPreviewSmall() bool {
	if x != nil && x.VideoPreviewSmall != nil {
		return *x.VideoPreviewSmall
	}
	return false
}

func (x *SetNullMaintenance) GetDetailsUrl() bool {
	if x != nil && x.DetailsUrl != nil {
		return *x.DetailsUrl
	}
	return false
}

func (x *SetNullMaintenance) GetDeletedAt() bool {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return false
}

type UpdatesMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Update *UpdateMaintenance  `protobuf:"bytes,2,opt,name=update,proto3,oneof" json:"update,omitempty"`
	Null   *SetNullMaintenance `protobuf:"bytes,3,opt,name=null,proto3,oneof" json:"null,omitempty"`
}

func (x *UpdatesMaintenance) Reset() {
	*x = UpdatesMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatesMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatesMaintenance) ProtoMessage() {}

func (x *UpdatesMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatesMaintenance.ProtoReflect.Descriptor instead.
func (*UpdatesMaintenance) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{14}
}

func (x *UpdatesMaintenance) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatesMaintenance) GetUpdate() *UpdateMaintenance {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UpdatesMaintenance) GetNull() *SetNullMaintenance {
	if x != nil {
		return x.Null
	}
	return nil
}

type MaintenanceithoutID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias             *string `protobuf:"bytes,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	TitleRu           *string `protobuf:"bytes,3,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	TitleEn           *string `protobuf:"bytes,4,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	Video             *string `protobuf:"bytes,5,opt,name=video,proto3,oneof" json:"video,omitempty"`
	VideoPreview      *string `protobuf:"bytes,6,opt,name=video_preview,json=videoPreview,proto3,oneof" json:"video_preview,omitempty"`
	VideoSmall        *string `protobuf:"bytes,7,opt,name=video_small,json=videoSmall,proto3,oneof" json:"video_small,omitempty"`
	VideoPreviewSmall *string `protobuf:"bytes,8,opt,name=video_preview_small,json=videoPreviewSmall,proto3,oneof" json:"video_preview_small,omitempty"`
	DetailsUrl        *string `protobuf:"bytes,9,opt,name=details_url,json=detailsUrl,proto3,oneof" json:"details_url,omitempty"`
	DeletedAt         *string `protobuf:"bytes,12,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *MaintenanceithoutID) Reset() {
	*x = MaintenanceithoutID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaintenanceithoutID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaintenanceithoutID) ProtoMessage() {}

func (x *MaintenanceithoutID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaintenanceithoutID.ProtoReflect.Descriptor instead.
func (*MaintenanceithoutID) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{15}
}

func (x *MaintenanceithoutID) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *MaintenanceithoutID) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *MaintenanceithoutID) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *MaintenanceithoutID) GetVideo() string {
	if x != nil && x.Video != nil {
		return *x.Video
	}
	return ""
}

func (x *MaintenanceithoutID) GetVideoPreview() string {
	if x != nil && x.VideoPreview != nil {
		return *x.VideoPreview
	}
	return ""
}

func (x *MaintenanceithoutID) GetVideoSmall() string {
	if x != nil && x.VideoSmall != nil {
		return *x.VideoSmall
	}
	return ""
}

func (x *MaintenanceithoutID) GetVideoPreviewSmall() string {
	if x != nil && x.VideoPreviewSmall != nil {
		return *x.VideoPreviewSmall
	}
	return ""
}

func (x *MaintenanceithoutID) GetDetailsUrl() string {
	if x != nil && x.DetailsUrl != nil {
		return *x.DetailsUrl
	}
	return ""
}

func (x *MaintenanceithoutID) GetDeletedAt() string {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return ""
}

type Nomenclature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid                 string                   `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Article              string                   `protobuf:"bytes,2,opt,name=article,proto3" json:"article,omitempty"`
	TitleRu              string                   `protobuf:"bytes,3,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
	IsActive             bool                     `protobuf:"varint,4,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	StartOnlineSaleDate  string                   `protobuf:"bytes,5,opt,name=start_online_sale_date,json=startOnlineSaleDate,proto3" json:"start_online_sale_date,omitempty"`
	StartOfflineSaleDate string                   `protobuf:"bytes,6,opt,name=start_offline_sale_date,json=startOfflineSaleDate,proto3" json:"start_offline_sale_date,omitempty"`
	Category             string                   `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	Gender               string                   `protobuf:"bytes,8,opt,name=gender,proto3" json:"gender,omitempty"`
	Url                  string                   `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Fabric               *NomenclatureDescription `protobuf:"bytes,10,opt,name=fabric,proto3" json:"fabric,omitempty"`
	Family               *NomenclatureDescription `protobuf:"bytes,11,opt,name=family,proto3" json:"family,omitempty"`
	ColorModel           *NomenclatureDescription `protobuf:"bytes,12,opt,name=color_model,json=colorModel,proto3" json:"color_model,omitempty"`
	SuperModel           *SuperModel              `protobuf:"bytes,13,opt,name=super_model,json=superModel,proto3" json:"super_model,omitempty"`
	Color                *Color                   `protobuf:"bytes,14,opt,name=color,proto3" json:"color,omitempty"`
	Capsules             *Capsules                `protobuf:"bytes,16,opt,name=capsules,proto3" json:"capsules,omitempty"`
	IsEcological         bool                     `protobuf:"varint,17,opt,name=is_ecological,json=isEcological,proto3" json:"is_ecological,omitempty"`
	PillingGrade         string                   `protobuf:"bytes,18,opt,name=pilling_grade,json=pillingGrade,proto3" json:"pilling_grade,omitempty"`
	Maintenance          *Maintenance             `protobuf:"bytes,19,opt,name=maintenance,proto3" json:"maintenance,omitempty"`
	Sizes                []*Size                  `protobuf:"bytes,15,rep,name=sizes,proto3" json:"sizes,omitempty"`
}

func (x *Nomenclature) Reset() {
	*x = Nomenclature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nomenclature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nomenclature) ProtoMessage() {}

func (x *Nomenclature) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nomenclature.ProtoReflect.Descriptor instead.
func (*Nomenclature) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{16}
}

func (x *Nomenclature) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *Nomenclature) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *Nomenclature) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

func (x *Nomenclature) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Nomenclature) GetStartOnlineSaleDate() string {
	if x != nil {
		return x.StartOnlineSaleDate
	}
	return ""
}

func (x *Nomenclature) GetStartOfflineSaleDate() string {
	if x != nil {
		return x.StartOfflineSaleDate
	}
	return ""
}

func (x *Nomenclature) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Nomenclature) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Nomenclature) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Nomenclature) GetFabric() *NomenclatureDescription {
	if x != nil {
		return x.Fabric
	}
	return nil
}

func (x *Nomenclature) GetFamily() *NomenclatureDescription {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *Nomenclature) GetColorModel() *NomenclatureDescription {
	if x != nil {
		return x.ColorModel
	}
	return nil
}

func (x *Nomenclature) GetSuperModel() *SuperModel {
	if x != nil {
		return x.SuperModel
	}
	return nil
}

func (x *Nomenclature) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Nomenclature) GetCapsules() *Capsules {
	if x != nil {
		return x.Capsules
	}
	return nil
}

func (x *Nomenclature) GetIsEcological() bool {
	if x != nil {
		return x.IsEcological
	}
	return false
}

func (x *Nomenclature) GetPillingGrade() string {
	if x != nil {
		return x.PillingGrade
	}
	return ""
}

func (x *Nomenclature) GetMaintenance() *Maintenance {
	if x != nil {
		return x.Maintenance
	}
	return nil
}

func (x *Nomenclature) GetSizes() []*Size {
	if x != nil {
		return x.Sizes
	}
	return nil
}

type PhotoModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Growth     int32   `protobuf:"varint,3,opt,name=growth,proto3" json:"growth,omitempty"`
	Bust       int32   `protobuf:"varint,4,opt,name=bust,proto3" json:"bust,omitempty"`
	Waist      int32   `protobuf:"varint,5,opt,name=waist,proto3" json:"waist,omitempty"`
	Hips       int32   `protobuf:"varint,6,opt,name=hips,proto3" json:"hips,omitempty"`
	IsModelXl  bool    `protobuf:"varint,7,opt,name=is_model_xl,json=isModelXl,proto3" json:"is_model_xl,omitempty"`
	ImageFiles *string `protobuf:"bytes,8,opt,name=image_files,json=imageFiles,proto3,oneof" json:"image_files,omitempty"`
	CreatedAt  string  `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  string  `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PhotoModel) Reset() {
	*x = PhotoModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoModel) ProtoMessage() {}

func (x *PhotoModel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoModel.ProtoReflect.Descriptor instead.
func (*PhotoModel) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{17}
}

func (x *PhotoModel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PhotoModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PhotoModel) GetGrowth() int32 {
	if x != nil {
		return x.Growth
	}
	return 0
}

func (x *PhotoModel) GetBust() int32 {
	if x != nil {
		return x.Bust
	}
	return 0
}

func (x *PhotoModel) GetWaist() int32 {
	if x != nil {
		return x.Waist
	}
	return 0
}

func (x *PhotoModel) GetHips() int32 {
	if x != nil {
		return x.Hips
	}
	return 0
}

func (x *PhotoModel) GetIsModelXl() bool {
	if x != nil {
		return x.IsModelXl
	}
	return false
}

func (x *PhotoModel) GetImageFiles() string {
	if x != nil && x.ImageFiles != nil {
		return *x.ImageFiles
	}
	return ""
}

func (x *PhotoModel) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *PhotoModel) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type UpdatePhotoModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Growth     *int32  `protobuf:"varint,2,opt,name=growth,proto3,oneof" json:"growth,omitempty"`
	Bust       *int32  `protobuf:"varint,3,opt,name=bust,proto3,oneof" json:"bust,omitempty"`
	Waist      *int32  `protobuf:"varint,4,opt,name=waist,proto3,oneof" json:"waist,omitempty"`
	Hips       *int32  `protobuf:"varint,5,opt,name=hips,proto3,oneof" json:"hips,omitempty"`
	IsModelXl  *bool   `protobuf:"varint,6,opt,name=is_model_xl,json=isModelXl,proto3,oneof" json:"is_model_xl,omitempty"`
	ImageFiles *string `protobuf:"bytes,7,opt,name=image_files,json=imageFiles,proto3,oneof" json:"image_files,omitempty"`
}

func (x *UpdatePhotoModel) Reset() {
	*x = UpdatePhotoModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePhotoModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePhotoModel) ProtoMessage() {}

func (x *UpdatePhotoModel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePhotoModel.ProtoReflect.Descriptor instead.
func (*UpdatePhotoModel) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{18}
}

func (x *UpdatePhotoModel) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdatePhotoModel) GetGrowth() int32 {
	if x != nil && x.Growth != nil {
		return *x.Growth
	}
	return 0
}

func (x *UpdatePhotoModel) GetBust() int32 {
	if x != nil && x.Bust != nil {
		return *x.Bust
	}
	return 0
}

func (x *UpdatePhotoModel) GetWaist() int32 {
	if x != nil && x.Waist != nil {
		return *x.Waist
	}
	return 0
}

func (x *UpdatePhotoModel) GetHips() int32 {
	if x != nil && x.Hips != nil {
		return *x.Hips
	}
	return 0
}

func (x *UpdatePhotoModel) GetIsModelXl() bool {
	if x != nil && x.IsModelXl != nil {
		return *x.IsModelXl
	}
	return false
}

func (x *UpdatePhotoModel) GetImageFiles() string {
	if x != nil && x.ImageFiles != nil {
		return *x.ImageFiles
	}
	return ""
}

type SetNullPhotoModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageFiles *bool `protobuf:"varint,1,opt,name=image_files,json=imageFiles,proto3,oneof" json:"image_files,omitempty"`
}

func (x *SetNullPhotoModel) Reset() {
	*x = SetNullPhotoModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullPhotoModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullPhotoModel) ProtoMessage() {}

func (x *SetNullPhotoModel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullPhotoModel.ProtoReflect.Descriptor instead.
func (*SetNullPhotoModel) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{19}
}

func (x *SetNullPhotoModel) GetImageFiles() bool {
	if x != nil && x.ImageFiles != nil {
		return *x.ImageFiles
	}
	return false
}

type UpdatesPhotoModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Update *UpdatePhotoModel  `protobuf:"bytes,2,opt,name=update,proto3,oneof" json:"update,omitempty"`
	Null   *SetNullPhotoModel `protobuf:"bytes,3,opt,name=null,proto3,oneof" json:"null,omitempty"`
}

func (x *UpdatesPhotoModel) Reset() {
	*x = UpdatesPhotoModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatesPhotoModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatesPhotoModel) ProtoMessage() {}

func (x *UpdatesPhotoModel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatesPhotoModel.ProtoReflect.Descriptor instead.
func (*UpdatesPhotoModel) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{20}
}

func (x *UpdatesPhotoModel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatesPhotoModel) GetUpdate() *UpdatePhotoModel {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UpdatesPhotoModel) GetNull() *SetNullPhotoModel {
	if x != nil {
		return x.Null
	}
	return nil
}

type PhotoModelWithoutID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Growth     int32  `protobuf:"varint,2,opt,name=growth,proto3" json:"growth,omitempty"`
	Bust       int32  `protobuf:"varint,3,opt,name=bust,proto3" json:"bust,omitempty"`
	Waist      int32  `protobuf:"varint,4,opt,name=waist,proto3" json:"waist,omitempty"`
	Hips       int32  `protobuf:"varint,5,opt,name=hips,proto3" json:"hips,omitempty"`
	IsModelXl  bool   `protobuf:"varint,6,opt,name=is_model_xl,json=isModelXl,proto3" json:"is_model_xl,omitempty"`
	ImageFiles string `protobuf:"bytes,7,opt,name=image_files,json=imageFiles,proto3" json:"image_files,omitempty"`
	CreatedAt  string `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  string `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PhotoModelWithoutID) Reset() {
	*x = PhotoModelWithoutID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoModelWithoutID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoModelWithoutID) ProtoMessage() {}

func (x *PhotoModelWithoutID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoModelWithoutID.ProtoReflect.Descriptor instead.
func (*PhotoModelWithoutID) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{21}
}

func (x *PhotoModelWithoutID) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PhotoModelWithoutID) GetGrowth() int32 {
	if x != nil {
		return x.Growth
	}
	return 0
}

func (x *PhotoModelWithoutID) GetBust() int32 {
	if x != nil {
		return x.Bust
	}
	return 0
}

func (x *PhotoModelWithoutID) GetWaist() int32 {
	if x != nil {
		return x.Waist
	}
	return 0
}

func (x *PhotoModelWithoutID) GetHips() int32 {
	if x != nil {
		return x.Hips
	}
	return 0
}

func (x *PhotoModelWithoutID) GetIsModelXl() bool {
	if x != nil {
		return x.IsModelXl
	}
	return false
}

func (x *PhotoModelWithoutID) GetImageFiles() string {
	if x != nil {
		return x.ImageFiles
	}
	return ""
}

func (x *PhotoModelWithoutID) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *PhotoModelWithoutID) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type DictionarySize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	State       *int32 `protobuf:"varint,4,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile *int32 `protobuf:"varint,5,opt,name=state_mobile,json=stateMobile,proto3,oneof" json:"state_mobile,omitempty"`
	Order       int32  `protobuf:"varint,6,opt,name=order,proto3" json:"order,omitempty"`
	CreatedAt   string `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   string `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *DictionarySize) Reset() {
	*x = DictionarySize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DictionarySize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionarySize) ProtoMessage() {}

func (x *DictionarySize) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionarySize.ProtoReflect.Descriptor instead.
func (*DictionarySize) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{22}
}

func (x *DictionarySize) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *DictionarySize) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DictionarySize) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DictionarySize) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *DictionarySize) GetStateMobile() int32 {
	if x != nil && x.StateMobile != nil {
		return *x.StateMobile
	}
	return 0
}

func (x *DictionarySize) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *DictionarySize) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DictionarySize) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type UpdateDictionarySize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       *string `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Type        *string `protobuf:"bytes,2,opt,name=type,proto3,oneof" json:"type,omitempty"`
	State       *int32  `protobuf:"varint,3,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile *int32  `protobuf:"varint,4,opt,name=state_mobile,json=stateMobile,proto3,oneof" json:"state_mobile,omitempty"`
	Order       *int32  `protobuf:"varint,5,opt,name=order,proto3,oneof" json:"order,omitempty"`
}

func (x *UpdateDictionarySize) Reset() {
	*x = UpdateDictionarySize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDictionarySize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDictionarySize) ProtoMessage() {}

func (x *UpdateDictionarySize) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDictionarySize.ProtoReflect.Descriptor instead.
func (*UpdateDictionarySize) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateDictionarySize) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdateDictionarySize) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *UpdateDictionarySize) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *UpdateDictionarySize) GetStateMobile() int32 {
	if x != nil && x.StateMobile != nil {
		return *x.StateMobile
	}
	return 0
}

func (x *UpdateDictionarySize) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

type SetNullDictionarySize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State       *bool `protobuf:"varint,1,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile *bool `protobuf:"varint,2,opt,name=state_mobile,json=stateMobile,proto3,oneof" json:"state_mobile,omitempty"`
}

func (x *SetNullDictionarySize) Reset() {
	*x = SetNullDictionarySize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullDictionarySize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullDictionarySize) ProtoMessage() {}

func (x *SetNullDictionarySize) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullDictionarySize.ProtoReflect.Descriptor instead.
func (*SetNullDictionarySize) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{24}
}

func (x *SetNullDictionarySize) GetState() bool {
	if x != nil && x.State != nil {
		return *x.State
	}
	return false
}

func (x *SetNullDictionarySize) GetStateMobile() bool {
	if x != nil && x.StateMobile != nil {
		return *x.StateMobile
	}
	return false
}

type UpdatesDictionarySize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid   string                 `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Update *UpdateDictionarySize  `protobuf:"bytes,2,opt,name=update,proto3,oneof" json:"update,omitempty"`
	Null   *SetNullDictionarySize `protobuf:"bytes,3,opt,name=null,proto3,oneof" json:"null,omitempty"`
}

func (x *UpdatesDictionarySize) Reset() {
	*x = UpdatesDictionarySize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatesDictionarySize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatesDictionarySize) ProtoMessage() {}

func (x *UpdatesDictionarySize) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatesDictionarySize.ProtoReflect.Descriptor instead.
func (*UpdatesDictionarySize) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{25}
}

func (x *UpdatesDictionarySize) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *UpdatesDictionarySize) GetUpdate() *UpdateDictionarySize {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UpdatesDictionarySize) GetNull() *SetNullDictionarySize {
	if x != nil {
		return x.Null
	}
	return nil
}

type DictionarySizeWithoutGUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	State       *int32 `protobuf:"varint,3,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile *int32 `protobuf:"varint,4,opt,name=state_mobile,json=stateMobile,proto3,oneof" json:"state_mobile,omitempty"`
	Order       int32  `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	CreatedAt   string `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   string `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *DictionarySizeWithoutGUID) Reset() {
	*x = DictionarySizeWithoutGUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DictionarySizeWithoutGUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionarySizeWithoutGUID) ProtoMessage() {}

func (x *DictionarySizeWithoutGUID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionarySizeWithoutGUID.ProtoReflect.Descriptor instead.
func (*DictionarySizeWithoutGUID) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{26}
}

func (x *DictionarySizeWithoutGUID) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DictionarySizeWithoutGUID) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DictionarySizeWithoutGUID) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *DictionarySizeWithoutGUID) GetStateMobile() int32 {
	if x != nil && x.StateMobile != nil {
		return *x.StateMobile
	}
	return 0
}

func (x *DictionarySizeWithoutGUID) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *DictionarySizeWithoutGUID) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DictionarySizeWithoutGUID) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type GetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetListRequest) Reset() {
	*x = GetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequest) ProtoMessage() {}

func (x *GetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequest.ProtoReflect.Descriptor instead.
func (*GetListRequest) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{27}
}

func (x *GetListRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetNomenclatureListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*Nomenclature     `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNomenclatureListResponse) Reset() {
	*x = GetNomenclatureListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNomenclatureListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNomenclatureListResponse) ProtoMessage() {}

func (x *GetNomenclatureListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNomenclatureListResponse.ProtoReflect.Descriptor instead.
func (*GetNomenclatureListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{28}
}

func (x *GetNomenclatureListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetNomenclatureListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNomenclatureListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetNomenclatureListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNomenclatureListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetNomenclatureListResponse) GetData() []*Nomenclature {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetNomenclatureByArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Article string `protobuf:"bytes,1,opt,name=article,proto3" json:"article,omitempty"`
}

func (x *GetNomenclatureByArticleRequest) Reset() {
	*x = GetNomenclatureByArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNomenclatureByArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNomenclatureByArticleRequest) ProtoMessage() {}

func (x *GetNomenclatureByArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNomenclatureByArticleRequest.ProtoReflect.Descriptor instead.
func (*GetNomenclatureByArticleRequest) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{29}
}

func (x *GetNomenclatureByArticleRequest) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

type GetNomenclatureByArticleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Nomenclature `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64         `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error      `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetNomenclatureByArticleResponse) Reset() {
	*x = GetNomenclatureByArticleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNomenclatureByArticleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNomenclatureByArticleResponse) ProtoMessage() {}

func (x *GetNomenclatureByArticleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNomenclatureByArticleResponse.ProtoReflect.Descriptor instead.
func (*GetNomenclatureByArticleResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{30}
}

func (x *GetNomenclatureByArticleResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetNomenclatureByArticleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNomenclatureByArticleResponse) GetData() *Nomenclature {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetNomenclatureByArticleResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNomenclatureByArticleResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetPhotoModelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*PhotoModel       `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPhotoModelListResponse) Reset() {
	*x = GetPhotoModelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPhotoModelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPhotoModelListResponse) ProtoMessage() {}

func (x *GetPhotoModelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPhotoModelListResponse.ProtoReflect.Descriptor instead.
func (*GetPhotoModelListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{31}
}

func (x *GetPhotoModelListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetPhotoModelListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPhotoModelListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetPhotoModelListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPhotoModelListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetPhotoModelListResponse) GetData() []*PhotoModel {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetByIDRequest) Reset() {
	*x = GetByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDRequest) ProtoMessage() {}

func (x *GetByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDRequest.ProtoReflect.Descriptor instead.
func (*GetByIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{32}
}

func (x *GetByIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetByGUIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *GetByGUIDRequest) Reset() {
	*x = GetByGUIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByGUIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByGUIDRequest) ProtoMessage() {}

func (x *GetByGUIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByGUIDRequest.ProtoReflect.Descriptor instead.
func (*GetByGUIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{33}
}

func (x *GetByGUIDRequest) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

type GetPhotoModelByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *PhotoModel `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64       `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error    `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetPhotoModelByIDResponse) Reset() {
	*x = GetPhotoModelByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPhotoModelByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPhotoModelByIDResponse) ProtoMessage() {}

func (x *GetPhotoModelByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPhotoModelByIDResponse.ProtoReflect.Descriptor instead.
func (*GetPhotoModelByIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{34}
}

func (x *GetPhotoModelByIDResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetPhotoModelByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPhotoModelByIDResponse) GetData() *PhotoModel {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetPhotoModelByIDResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPhotoModelByIDResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetDictionarySizeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*DictionarySize   `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDictionarySizeListResponse) Reset() {
	*x = GetDictionarySizeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionarySizeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionarySizeListResponse) ProtoMessage() {}

func (x *GetDictionarySizeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionarySizeListResponse.ProtoReflect.Descriptor instead.
func (*GetDictionarySizeListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{35}
}

func (x *GetDictionarySizeListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetDictionarySizeListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDictionarySizeListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetDictionarySizeListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDictionarySizeListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetDictionarySizeListResponse) GetData() []*DictionarySize {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDictionarySizeByGUIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *DictionarySize `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64           `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error        `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetDictionarySizeByGUIDResponse) Reset() {
	*x = GetDictionarySizeByGUIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionarySizeByGUIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionarySizeByGUIDResponse) ProtoMessage() {}

func (x *GetDictionarySizeByGUIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionarySizeByGUIDResponse.ProtoReflect.Descriptor instead.
func (*GetDictionarySizeByGUIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{36}
}

func (x *GetDictionarySizeByGUIDResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetDictionarySizeByGUIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDictionarySizeByGUIDResponse) GetData() *DictionarySize {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetDictionarySizeByGUIDResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDictionarySizeByGUIDResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetMaintenanceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*Maintenance      `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetMaintenanceListResponse) Reset() {
	*x = GetMaintenanceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaintenanceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaintenanceListResponse) ProtoMessage() {}

func (x *GetMaintenanceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaintenanceListResponse.ProtoReflect.Descriptor instead.
func (*GetMaintenanceListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{37}
}

func (x *GetMaintenanceListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetMaintenanceListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetMaintenanceListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetMaintenanceListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetMaintenanceListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetMaintenanceListResponse) GetData() []*Maintenance {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetMaintenanceByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Maintenance `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64        `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error     `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetMaintenanceByIDResponse) Reset() {
	*x = GetMaintenanceByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaintenanceByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaintenanceByIDResponse) ProtoMessage() {}

func (x *GetMaintenanceByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaintenanceByIDResponse.ProtoReflect.Descriptor instead.
func (*GetMaintenanceByIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{38}
}

func (x *GetMaintenanceByIDResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetMaintenanceByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetMaintenanceByIDResponse) GetData() *Maintenance {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetMaintenanceByIDResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetMaintenanceByIDResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type QuickProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid    string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Article string `protobuf:"bytes,2,opt,name=article,proto3" json:"article,omitempty"`
}

func (x *QuickProduct) Reset() {
	*x = QuickProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickProduct) ProtoMessage() {}

func (x *QuickProduct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickProduct.ProtoReflect.Descriptor instead.
func (*QuickProduct) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{39}
}

func (x *QuickProduct) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *QuickProduct) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

type QuickMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleRu      *string         `protobuf:"bytes,2,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	TitleEn      *string         `protobuf:"bytes,3,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	ProductsList []*QuickProduct `protobuf:"bytes,4,rep,name=products_list,json=productsList,proto3" json:"products_list,omitempty"`
}

func (x *QuickMaintenance) Reset() {
	*x = QuickMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickMaintenance) ProtoMessage() {}

func (x *QuickMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickMaintenance.ProtoReflect.Descriptor instead.
func (*QuickMaintenance) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{40}
}

func (x *QuickMaintenance) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuickMaintenance) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *QuickMaintenance) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *QuickMaintenance) GetProductsList() []*QuickProduct {
	if x != nil {
		return x.ProductsList
	}
	return nil
}

type GetListProductsToMaintenanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*QuickMaintenance `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetListProductsToMaintenanceResponse) Reset() {
	*x = GetListProductsToMaintenanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListProductsToMaintenanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListProductsToMaintenanceResponse) ProtoMessage() {}

func (x *GetListProductsToMaintenanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListProductsToMaintenanceResponse.ProtoReflect.Descriptor instead.
func (*GetListProductsToMaintenanceResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{41}
}

func (x *GetListProductsToMaintenanceResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListProductsToMaintenanceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetListProductsToMaintenanceResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListProductsToMaintenanceResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetListProductsToMaintenanceResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetListProductsToMaintenanceResponse) GetData() []*QuickMaintenance {
	if x != nil {
		return x.Data
	}
	return nil
}

type QuickProductWithTitleRU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid    string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Article string `protobuf:"bytes,2,opt,name=article,proto3" json:"article,omitempty"`
	TitleRu string `protobuf:"bytes,3,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
}

func (x *QuickProductWithTitleRU) Reset() {
	*x = QuickProductWithTitleRU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickProductWithTitleRU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickProductWithTitleRU) ProtoMessage() {}

func (x *QuickProductWithTitleRU) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickProductWithTitleRU.ProtoReflect.Descriptor instead.
func (*QuickProductWithTitleRU) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{42}
}

func (x *QuickProductWithTitleRU) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *QuickProductWithTitleRU) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *QuickProductWithTitleRU) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

type ProductOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type            string                   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	CreatedAtCoef   int32                    `protobuf:"varint,3,opt,name=created_at_coef,json=createdAtCoef,proto3" json:"created_at_coef,omitempty"`
	Views           int32                    `protobuf:"varint,4,opt,name=views,proto3" json:"views,omitempty"`
	Subscriptions   int32                    `protobuf:"varint,5,opt,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	CartAdds        int32                    `protobuf:"varint,6,opt,name=cart_adds,json=cartAdds,proto3" json:"cart_adds,omitempty"`
	Buys            int32                    `protobuf:"varint,7,opt,name=buys,proto3" json:"buys,omitempty"`
	AvailStocks     int32                    `protobuf:"varint,8,opt,name=avail_stocks,json=availStocks,proto3" json:"avail_stocks,omitempty"`
	AvailSizes      string                   `protobuf:"bytes,9,opt,name=avail_sizes,json=availSizes,proto3" json:"avail_sizes,omitempty"`
	AttributeCoef   string                   `protobuf:"bytes,10,opt,name=attribute_coef,json=attributeCoef,proto3" json:"attribute_coef,omitempty"`
	ReductionFactor string                   `protobuf:"bytes,11,opt,name=reduction_factor,json=reductionFactor,proto3" json:"reduction_factor,omitempty"`
	IsSetManual     bool                     `protobuf:"varint,12,opt,name=is_set_manual,json=isSetManual,proto3" json:"is_set_manual,omitempty"`
	TotalWeight     int32                    `protobuf:"varint,13,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	Product         *QuickProductWithTitleRU `protobuf:"bytes,14,opt,name=product,proto3" json:"product,omitempty"`
	CreatedAt       string                   `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       string                   `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt       *string                  `protobuf:"bytes,17,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *ProductOrder) Reset() {
	*x = ProductOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductOrder) ProtoMessage() {}

func (x *ProductOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductOrder.ProtoReflect.Descriptor instead.
func (*ProductOrder) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{43}
}

func (x *ProductOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductOrder) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProductOrder) GetCreatedAtCoef() int32 {
	if x != nil {
		return x.CreatedAtCoef
	}
	return 0
}

func (x *ProductOrder) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *ProductOrder) GetSubscriptions() int32 {
	if x != nil {
		return x.Subscriptions
	}
	return 0
}

func (x *ProductOrder) GetCartAdds() int32 {
	if x != nil {
		return x.CartAdds
	}
	return 0
}

func (x *ProductOrder) GetBuys() int32 {
	if x != nil {
		return x.Buys
	}
	return 0
}

func (x *ProductOrder) GetAvailStocks() int32 {
	if x != nil {
		return x.AvailStocks
	}
	return 0
}

func (x *ProductOrder) GetAvailSizes() string {
	if x != nil {
		return x.AvailSizes
	}
	return ""
}

func (x *ProductOrder) GetAttributeCoef() string {
	if x != nil {
		return x.AttributeCoef
	}
	return ""
}

func (x *ProductOrder) GetReductionFactor() string {
	if x != nil {
		return x.ReductionFactor
	}
	return ""
}

func (x *ProductOrder) GetIsSetManual() bool {
	if x != nil {
		return x.IsSetManual
	}
	return false
}

func (x *ProductOrder) GetTotalWeight() int32 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *ProductOrder) GetProduct() *QuickProductWithTitleRU {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *ProductOrder) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ProductOrder) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ProductOrder) GetDeletedAt() string {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return ""
}

type ProductOrderWithoutID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            string                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	CreatedAtCoef   int32                    `protobuf:"varint,2,opt,name=created_at_coef,json=createdAtCoef,proto3" json:"created_at_coef,omitempty"`
	Views           int32                    `protobuf:"varint,3,opt,name=views,proto3" json:"views,omitempty"`
	Subscriptions   int32                    `protobuf:"varint,4,opt,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	CartAdds        int32                    `protobuf:"varint,5,opt,name=cart_adds,json=cartAdds,proto3" json:"cart_adds,omitempty"`
	Buys            int32                    `protobuf:"varint,6,opt,name=buys,proto3" json:"buys,omitempty"`
	AvailStocks     int32                    `protobuf:"varint,7,opt,name=avail_stocks,json=availStocks,proto3" json:"avail_stocks,omitempty"`
	AvailSizes      string                   `protobuf:"bytes,8,opt,name=avail_sizes,json=availSizes,proto3" json:"avail_sizes,omitempty"`
	AttributeCoef   string                   `protobuf:"bytes,9,opt,name=attribute_coef,json=attributeCoef,proto3" json:"attribute_coef,omitempty"`
	ReductionFactor string                   `protobuf:"bytes,10,opt,name=reduction_factor,json=reductionFactor,proto3" json:"reduction_factor,omitempty"`
	IsSetManual     bool                     `protobuf:"varint,11,opt,name=is_set_manual,json=isSetManual,proto3" json:"is_set_manual,omitempty"`
	TotalWeight     int32                    `protobuf:"varint,12,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	Product         *QuickProductWithTitleRU `protobuf:"bytes,13,opt,name=product,proto3" json:"product,omitempty"`
	CreatedAt       string                   `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       string                   `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt       *string                  `protobuf:"bytes,16,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *ProductOrderWithoutID) Reset() {
	*x = ProductOrderWithoutID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductOrderWithoutID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductOrderWithoutID) ProtoMessage() {}

func (x *ProductOrderWithoutID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductOrderWithoutID.ProtoReflect.Descriptor instead.
func (*ProductOrderWithoutID) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{44}
}

func (x *ProductOrderWithoutID) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProductOrderWithoutID) GetCreatedAtCoef() int32 {
	if x != nil {
		return x.CreatedAtCoef
	}
	return 0
}

func (x *ProductOrderWithoutID) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *ProductOrderWithoutID) GetSubscriptions() int32 {
	if x != nil {
		return x.Subscriptions
	}
	return 0
}

func (x *ProductOrderWithoutID) GetCartAdds() int32 {
	if x != nil {
		return x.CartAdds
	}
	return 0
}

func (x *ProductOrderWithoutID) GetBuys() int32 {
	if x != nil {
		return x.Buys
	}
	return 0
}

func (x *ProductOrderWithoutID) GetAvailStocks() int32 {
	if x != nil {
		return x.AvailStocks
	}
	return 0
}

func (x *ProductOrderWithoutID) GetAvailSizes() string {
	if x != nil {
		return x.AvailSizes
	}
	return ""
}

func (x *ProductOrderWithoutID) GetAttributeCoef() string {
	if x != nil {
		return x.AttributeCoef
	}
	return ""
}

func (x *ProductOrderWithoutID) GetReductionFactor() string {
	if x != nil {
		return x.ReductionFactor
	}
	return ""
}

func (x *ProductOrderWithoutID) GetIsSetManual() bool {
	if x != nil {
		return x.IsSetManual
	}
	return false
}

func (x *ProductOrderWithoutID) GetTotalWeight() int32 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *ProductOrderWithoutID) GetProduct() *QuickProductWithTitleRU {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *ProductOrderWithoutID) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ProductOrderWithoutID) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ProductOrderWithoutID) GetDeletedAt() string {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return ""
}

type UpdateProductOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            *string `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	CreatedAtCoef   *int32  `protobuf:"varint,2,opt,name=created_at_coef,json=createdAtCoef,proto3,oneof" json:"created_at_coef,omitempty"`
	Views           *int32  `protobuf:"varint,3,opt,name=views,proto3,oneof" json:"views,omitempty"`
	Subscriptions   *int32  `protobuf:"varint,4,opt,name=subscriptions,proto3,oneof" json:"subscriptions,omitempty"`
	CartAdds        *int32  `protobuf:"varint,5,opt,name=cart_adds,json=cartAdds,proto3,oneof" json:"cart_adds,omitempty"`
	Buys            *int32  `protobuf:"varint,6,opt,name=buys,proto3,oneof" json:"buys,omitempty"`
	AvailStocks     *int32  `protobuf:"varint,7,opt,name=avail_stocks,json=availStocks,proto3,oneof" json:"avail_stocks,omitempty"`
	AvailSizes      *string `protobuf:"bytes,8,opt,name=avail_sizes,json=availSizes,proto3,oneof" json:"avail_sizes,omitempty"`
	AttributeCoef   *string `protobuf:"bytes,9,opt,name=attribute_coef,json=attributeCoef,proto3,oneof" json:"attribute_coef,omitempty"`
	ReductionFactor *string `protobuf:"bytes,10,opt,name=reduction_factor,json=reductionFactor,proto3,oneof" json:"reduction_factor,omitempty"`
	IsSetManual     *bool   `protobuf:"varint,11,opt,name=is_set_manual,json=isSetManual,proto3,oneof" json:"is_set_manual,omitempty"`
	TotalWeight     *int32  `protobuf:"varint,12,opt,name=total_weight,json=totalWeight,proto3,oneof" json:"total_weight,omitempty"`
	ProductGuid     *string `protobuf:"bytes,13,opt,name=product_guid,json=productGuid,proto3,oneof" json:"product_guid,omitempty"`
	DeletedAt       *string `protobuf:"bytes,14,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *UpdateProductOrder) Reset() {
	*x = UpdateProductOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductOrder) ProtoMessage() {}

func (x *UpdateProductOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductOrder.ProtoReflect.Descriptor instead.
func (*UpdateProductOrder) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateProductOrder) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *UpdateProductOrder) GetCreatedAtCoef() int32 {
	if x != nil && x.CreatedAtCoef != nil {
		return *x.CreatedAtCoef
	}
	return 0
}

func (x *UpdateProductOrder) GetViews() int32 {
	if x != nil && x.Views != nil {
		return *x.Views
	}
	return 0
}

func (x *UpdateProductOrder) GetSubscriptions() int32 {
	if x != nil && x.Subscriptions != nil {
		return *x.Subscriptions
	}
	return 0
}

func (x *UpdateProductOrder) GetCartAdds() int32 {
	if x != nil && x.CartAdds != nil {
		return *x.CartAdds
	}
	return 0
}

func (x *UpdateProductOrder) GetBuys() int32 {
	if x != nil && x.Buys != nil {
		return *x.Buys
	}
	return 0
}

func (x *UpdateProductOrder) GetAvailStocks() int32 {
	if x != nil && x.AvailStocks != nil {
		return *x.AvailStocks
	}
	return 0
}

func (x *UpdateProductOrder) GetAvailSizes() string {
	if x != nil && x.AvailSizes != nil {
		return *x.AvailSizes
	}
	return ""
}

func (x *UpdateProductOrder) GetAttributeCoef() string {
	if x != nil && x.AttributeCoef != nil {
		return *x.AttributeCoef
	}
	return ""
}

func (x *UpdateProductOrder) GetReductionFactor() string {
	if x != nil && x.ReductionFactor != nil {
		return *x.ReductionFactor
	}
	return ""
}

func (x *UpdateProductOrder) GetIsSetManual() bool {
	if x != nil && x.IsSetManual != nil {
		return *x.IsSetManual
	}
	return false
}

func (x *UpdateProductOrder) GetTotalWeight() int32 {
	if x != nil && x.TotalWeight != nil {
		return *x.TotalWeight
	}
	return 0
}

func (x *UpdateProductOrder) GetProductGuid() string {
	if x != nil && x.ProductGuid != nil {
		return *x.ProductGuid
	}
	return ""
}

func (x *UpdateProductOrder) GetDeletedAt() string {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return ""
}

type SetNullProductOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedAt *bool `protobuf:"varint,1,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *SetNullProductOrder) Reset() {
	*x = SetNullProductOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullProductOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullProductOrder) ProtoMessage() {}

func (x *SetNullProductOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullProductOrder.ProtoReflect.Descriptor instead.
func (*SetNullProductOrder) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{46}
}

func (x *SetNullProductOrder) GetDeletedAt() bool {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return false
}

type UpdatesProductOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Update *UpdateProductOrder  `protobuf:"bytes,2,opt,name=update,proto3,oneof" json:"update,omitempty"`
	Null   *SetNullProductOrder `protobuf:"bytes,3,opt,name=null,proto3,oneof" json:"null,omitempty"`
}

func (x *UpdatesProductOrder) Reset() {
	*x = UpdatesProductOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatesProductOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatesProductOrder) ProtoMessage() {}

func (x *UpdatesProductOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatesProductOrder.ProtoReflect.Descriptor instead.
func (*UpdatesProductOrder) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{47}
}

func (x *UpdatesProductOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatesProductOrder) GetUpdate() *UpdateProductOrder {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UpdatesProductOrder) GetNull() *SetNullProductOrder {
	if x != nil {
		return x.Null
	}
	return nil
}

type GetProductOrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*ProductOrder     `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProductOrderListResponse) Reset() {
	*x = GetProductOrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductOrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductOrderListResponse) ProtoMessage() {}

func (x *GetProductOrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductOrderListResponse.ProtoReflect.Descriptor instead.
func (*GetProductOrderListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{48}
}

func (x *GetProductOrderListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetProductOrderListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductOrderListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetProductOrderListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductOrderListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetProductOrderListResponse) GetData() []*ProductOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetProductOrderByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *ProductOrder `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64         `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error      `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetProductOrderByIDResponse) Reset() {
	*x = GetProductOrderByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductOrderByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductOrderByIDResponse) ProtoMessage() {}

func (x *GetProductOrderByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductOrderByIDResponse.ProtoReflect.Descriptor instead.
func (*GetProductOrderByIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{49}
}

func (x *GetProductOrderByIDResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetProductOrderByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductOrderByIDResponse) GetData() *ProductOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetProductOrderByIDResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductOrderByIDResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ModelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	CreatedAt string  `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string  `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ModelType) Reset() {
	*x = ModelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelType) ProtoMessage() {}

func (x *ModelType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelType.ProtoReflect.Descriptor instead.
func (*ModelType) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{50}
}

func (x *ModelType) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModelType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ModelType) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ModelType) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type ModelTypeWithoutID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *ModelTypeWithoutID) Reset() {
	*x = ModelTypeWithoutID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelTypeWithoutID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelTypeWithoutID) ProtoMessage() {}

func (x *ModelTypeWithoutID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelTypeWithoutID.ProtoReflect.Descriptor instead.
func (*ModelTypeWithoutID) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{51}
}

func (x *ModelTypeWithoutID) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type UpdateModelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *UpdateModelType) Reset() {
	*x = UpdateModelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateModelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateModelType) ProtoMessage() {}

func (x *UpdateModelType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateModelType.ProtoReflect.Descriptor instead.
func (*UpdateModelType) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateModelType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type SetNullModelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *bool `protobuf:"varint,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *SetNullModelType) Reset() {
	*x = SetNullModelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullModelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullModelType) ProtoMessage() {}

func (x *SetNullModelType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullModelType.ProtoReflect.Descriptor instead.
func (*SetNullModelType) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{53}
}

func (x *SetNullModelType) GetName() bool {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return false
}

type UpdatesModelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Update *UpdateModelType  `protobuf:"bytes,2,opt,name=update,proto3,oneof" json:"update,omitempty"`
	Null   *SetNullModelType `protobuf:"bytes,3,opt,name=null,proto3,oneof" json:"null,omitempty"`
}

func (x *UpdatesModelType) Reset() {
	*x = UpdatesModelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatesModelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatesModelType) ProtoMessage() {}

func (x *UpdatesModelType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatesModelType.ProtoReflect.Descriptor instead.
func (*UpdatesModelType) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{54}
}

func (x *UpdatesModelType) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatesModelType) GetUpdate() *UpdateModelType {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UpdatesModelType) GetNull() *SetNullModelType {
	if x != nil {
		return x.Null
	}
	return nil
}

type GetModelTypeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*ModelType        `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetModelTypeListResponse) Reset() {
	*x = GetModelTypeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelTypeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelTypeListResponse) ProtoMessage() {}

func (x *GetModelTypeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelTypeListResponse.ProtoReflect.Descriptor instead.
func (*GetModelTypeListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{55}
}

func (x *GetModelTypeListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetModelTypeListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetModelTypeListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetModelTypeListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetModelTypeListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetModelTypeListResponse) GetData() []*ModelType {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetModelTypeByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *ModelType `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64      `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error   `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetModelTypeByIDResponse) Reset() {
	*x = GetModelTypeByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelTypeByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelTypeByIDResponse) ProtoMessage() {}

func (x *GetModelTypeByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelTypeByIDResponse.ProtoReflect.Descriptor instead.
func (*GetModelTypeByIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{56}
}

func (x *GetModelTypeByIDResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetModelTypeByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetModelTypeByIDResponse) GetData() *ModelType {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetModelTypeByIDResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetModelTypeByIDResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ProductFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	CreatedAt string `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ProductFilter) Reset() {
	*x = ProductFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductFilter) ProtoMessage() {}

func (x *ProductFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductFilter.ProtoReflect.Descriptor instead.
func (*ProductFilter) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{57}
}

func (x *ProductFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProductFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ProductFilter) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ProductFilter) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type GetProductFilterListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*ProductFilter    `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProductFilterListResponse) Reset() {
	*x = GetProductFilterListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductFilterListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductFilterListResponse) ProtoMessage() {}

func (x *GetProductFilterListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductFilterListResponse.ProtoReflect.Descriptor instead.
func (*GetProductFilterListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{58}
}

func (x *GetProductFilterListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetProductFilterListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductFilterListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetProductFilterListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductFilterListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetProductFilterListResponse) GetData() []*ProductFilter {
	if x != nil {
		return x.Data
	}
	return nil
}

type CategoryBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url         string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Gender      string `protobuf:"bytes,3,opt,name=gender,proto3" json:"gender,omitempty"`
	Preview     string `protobuf:"bytes,4,opt,name=preview,proto3" json:"preview,omitempty"`
	VideoMobile string `protobuf:"bytes,5,opt,name=video_mobile,json=videoMobile,proto3" json:"video_mobile,omitempty"`
}

func (x *CategoryBanner) Reset() {
	*x = CategoryBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryBanner) ProtoMessage() {}

func (x *CategoryBanner) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryBanner.ProtoReflect.Descriptor instead.
func (*CategoryBanner) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{59}
}

func (x *CategoryBanner) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CategoryBanner) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CategoryBanner) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *CategoryBanner) GetPreview() string {
	if x != nil {
		return x.Preview
	}
	return ""
}

func (x *CategoryBanner) GetVideoMobile() string {
	if x != nil {
		return x.VideoMobile
	}
	return ""
}

type CategoryBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color       int32 `protobuf:"varint,1,opt,name=color,proto3" json:"color,omitempty"`
	BuyToday    int32 `protobuf:"varint,2,opt,name=buy_today,json=buyToday,proto3" json:"buy_today,omitempty"`
	Description int32 `protobuf:"varint,3,opt,name=description,proto3" json:"description,omitempty"`
	Sizes       int32 `protobuf:"varint,4,opt,name=sizes,proto3" json:"sizes,omitempty"`
	Params      int32 `protobuf:"varint,5,opt,name=params,proto3" json:"params,omitempty"`
	Care        int32 `protobuf:"varint,6,opt,name=care,proto3" json:"care,omitempty"`
	Contents    int32 `protobuf:"varint,7,opt,name=contents,proto3" json:"contents,omitempty"`
	Promo       int32 `protobuf:"varint,8,opt,name=promo,proto3" json:"promo,omitempty"`
}

func (x *CategoryBlock) Reset() {
	*x = CategoryBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryBlock) ProtoMessage() {}

func (x *CategoryBlock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryBlock.ProtoReflect.Descriptor instead.
func (*CategoryBlock) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{60}
}

func (x *CategoryBlock) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *CategoryBlock) GetBuyToday() int32 {
	if x != nil {
		return x.BuyToday
	}
	return 0
}

func (x *CategoryBlock) GetDescription() int32 {
	if x != nil {
		return x.Description
	}
	return 0
}

func (x *CategoryBlock) GetSizes() int32 {
	if x != nil {
		return x.Sizes
	}
	return 0
}

func (x *CategoryBlock) GetParams() int32 {
	if x != nil {
		return x.Params
	}
	return 0
}

func (x *CategoryBlock) GetCare() int32 {
	if x != nil {
		return x.Care
	}
	return 0
}

func (x *CategoryBlock) GetContents() int32 {
	if x != nil {
		return x.Contents
	}
	return 0
}

func (x *CategoryBlock) GetPromo() int32 {
	if x != nil {
		return x.Promo
	}
	return 0
}

type CategoryRelatedProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Article string `protobuf:"bytes,1,opt,name=article,proto3" json:"article,omitempty"`
	Gender  string `protobuf:"bytes,2,opt,name=gender,proto3" json:"gender,omitempty"`
}

func (x *CategoryRelatedProduct) Reset() {
	*x = CategoryRelatedProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryRelatedProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryRelatedProduct) ProtoMessage() {}

func (x *CategoryRelatedProduct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryRelatedProduct.ProtoReflect.Descriptor instead.
func (*CategoryRelatedProduct) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{61}
}

func (x *CategoryRelatedProduct) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *CategoryRelatedProduct) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BitrixId                *string                   `protobuf:"bytes,2,opt,name=bitrix_id,json=bitrixId,proto3,oneof" json:"bitrix_id,omitempty"`
	Order                   *int32                    `protobuf:"varint,3,opt,name=order,proto3,oneof" json:"order,omitempty"`
	State                   *int32                    `protobuf:"varint,4,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile             int32                     `protobuf:"varint,5,opt,name=state_mobile,json=stateMobile,proto3" json:"state_mobile,omitempty"`
	Slug                    *string                   `protobuf:"bytes,6,opt,name=slug,proto3,oneof" json:"slug,omitempty"`
	TitleRu                 *string                   `protobuf:"bytes,7,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	TitleEn                 *string                   `protobuf:"bytes,8,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	MobileTitleRu           *string                   `protobuf:"bytes,9,opt,name=mobile_title_ru,json=mobileTitleRu,proto3,oneof" json:"mobile_title_ru,omitempty"`
	MobileTitleEn           *string                   `protobuf:"bytes,10,opt,name=mobile_title_en,json=mobileTitleEn,proto3,oneof" json:"mobile_title_en,omitempty"`
	MetaTitleRu             *string                   `protobuf:"bytes,11,opt,name=meta_title_ru,json=metaTitleRu,proto3,oneof" json:"meta_title_ru,omitempty"`
	MetaTitleEn             *string                   `protobuf:"bytes,12,opt,name=meta_title_en,json=metaTitleEn,proto3,oneof" json:"meta_title_en,omitempty"`
	MetaTitleManRu          *string                   `protobuf:"bytes,13,opt,name=meta_title_man_ru,json=metaTitleManRu,proto3,oneof" json:"meta_title_man_ru,omitempty"`
	MetaTitleManEn          *string                   `protobuf:"bytes,14,opt,name=meta_title_man_en,json=metaTitleManEn,proto3,oneof" json:"meta_title_man_en,omitempty"`
	DescriptionRu           *string                   `protobuf:"bytes,15,opt,name=description_ru,json=descriptionRu,proto3,oneof" json:"description_ru,omitempty"`
	DescriptionEn           *string                   `protobuf:"bytes,16,opt,name=description_en,json=descriptionEn,proto3,oneof" json:"description_en,omitempty"`
	DescriptionMenRu        *string                   `protobuf:"bytes,17,opt,name=description_men_ru,json=descriptionMenRu,proto3,oneof" json:"description_men_ru,omitempty"`
	DescriptionMenEn        *string                   `protobuf:"bytes,18,opt,name=description_men_en,json=descriptionMenEn,proto3,oneof" json:"description_men_en,omitempty"`
	MetaDescriptionRu       *string                   `protobuf:"bytes,19,opt,name=meta_description_ru,json=metaDescriptionRu,proto3,oneof" json:"meta_description_ru,omitempty"`
	MetaDescriptionEn       *string                   `protobuf:"bytes,20,opt,name=meta_description_en,json=metaDescriptionEn,proto3,oneof" json:"meta_description_en,omitempty"`
	MetaDescriptionManRu    *string                   `protobuf:"bytes,21,opt,name=meta_description_man_ru,json=metaDescriptionManRu,proto3,oneof" json:"meta_description_man_ru,omitempty"`
	MetaDescriptionManEn    *string                   `protobuf:"bytes,22,opt,name=meta_description_man_en,json=metaDescriptionManEn,proto3,oneof" json:"meta_description_man_en,omitempty"`
	Banners                 []*CategoryBanner         `protobuf:"bytes,23,rep,name=banners,proto3" json:"banners,omitempty"`
	Block                   *CategoryBlock            `protobuf:"bytes,24,opt,name=block,proto3,oneof" json:"block,omitempty"`
	Color                   *string                   `protobuf:"bytes,25,opt,name=color,proto3,oneof" json:"color,omitempty"`
	IsCollection            bool                      `protobuf:"varint,26,opt,name=is_collection,json=isCollection,proto3" json:"is_collection,omitempty"`
	IsFilterFit             bool                      `protobuf:"varint,27,opt,name=is_filter_fit,json=isFilterFit,proto3" json:"is_filter_fit,omitempty"`
	IsFilterRise            bool                      `protobuf:"varint,28,opt,name=is_filter_rise,json=isFilterRise,proto3" json:"is_filter_rise,omitempty"`
	IsHideFromAll           bool                      `protobuf:"varint,29,opt,name=is_hide_from_all,json=isHideFromAll,proto3" json:"is_hide_from_all,omitempty"`
	IsHideFromMenu          bool                      `protobuf:"varint,30,opt,name=is_hide_from_menu,json=isHideFromMenu,proto3" json:"is_hide_from_menu,omitempty"`
	IsHideFromMenuMobile    bool                      `protobuf:"varint,31,opt,name=is_hide_from_menu_mobile,json=isHideFromMenuMobile,proto3" json:"is_hide_from_menu_mobile,omitempty"`
	IsHideInWidgets         bool                      `protobuf:"varint,32,opt,name=is_hide_in_widgets,json=isHideInWidgets,proto3" json:"is_hide_in_widgets,omitempty"`
	IsHideInWidgetsMobile   bool                      `protobuf:"varint,33,opt,name=is_hide_in_widgets_mobile,json=isHideInWidgetsMobile,proto3" json:"is_hide_in_widgets_mobile,omitempty"`
	IsHideSizesTable        bool                      `protobuf:"varint,34,opt,name=is_hide_sizes_table,json=isHideSizesTable,proto3" json:"is_hide_sizes_table,omitempty"`
	IsHighlightInMenu       bool                      `protobuf:"varint,35,opt,name=is_highlight_in_menu,json=isHighlightInMenu,proto3" json:"is_highlight_in_menu,omitempty"`
	IsProductsContain       bool                      `protobuf:"varint,36,opt,name=is_products_contain,json=isProductsContain,proto3" json:"is_products_contain,omitempty"`
	IsShowFilters           bool                      `protobuf:"varint,37,opt,name=is_show_filters,json=isShowFilters,proto3" json:"is_show_filters,omitempty"`
	IsShowInMenuCompilation bool                      `protobuf:"varint,38,opt,name=is_show_in_menu_compilation,json=isShowInMenuCompilation,proto3" json:"is_show_in_menu_compilation,omitempty"`
	GoogleProductCategory   *string                   `protobuf:"bytes,39,opt,name=google_product_category,json=googleProductCategory,proto3,oneof" json:"google_product_category,omitempty"`
	OrderCollection         int32                     `protobuf:"varint,40,opt,name=order_collection,json=orderCollection,proto3" json:"order_collection,omitempty"`
	PromoArticles           *string                   `protobuf:"bytes,41,opt,name=promo_articles,json=promoArticles,proto3,oneof" json:"promo_articles,omitempty"`
	RelatedProducts         []*CategoryRelatedProduct `protobuf:"bytes,42,rep,name=related_products,json=relatedProducts,proto3" json:"related_products,omitempty"`
	SortingType             string                    `protobuf:"bytes,43,opt,name=sorting_type,json=sortingType,proto3" json:"sorting_type,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{62}
}

func (x *Category) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Category) GetBitrixId() string {
	if x != nil && x.BitrixId != nil {
		return *x.BitrixId
	}
	return ""
}

func (x *Category) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *Category) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *Category) GetStateMobile() int32 {
	if x != nil {
		return x.StateMobile
	}
	return 0
}

func (x *Category) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *Category) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *Category) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *Category) GetMobileTitleRu() string {
	if x != nil && x.MobileTitleRu != nil {
		return *x.MobileTitleRu
	}
	return ""
}

func (x *Category) GetMobileTitleEn() string {
	if x != nil && x.MobileTitleEn != nil {
		return *x.MobileTitleEn
	}
	return ""
}

func (x *Category) GetMetaTitleRu() string {
	if x != nil && x.MetaTitleRu != nil {
		return *x.MetaTitleRu
	}
	return ""
}

func (x *Category) GetMetaTitleEn() string {
	if x != nil && x.MetaTitleEn != nil {
		return *x.MetaTitleEn
	}
	return ""
}

func (x *Category) GetMetaTitleManRu() string {
	if x != nil && x.MetaTitleManRu != nil {
		return *x.MetaTitleManRu
	}
	return ""
}

func (x *Category) GetMetaTitleManEn() string {
	if x != nil && x.MetaTitleManEn != nil {
		return *x.MetaTitleManEn
	}
	return ""
}

func (x *Category) GetDescriptionRu() string {
	if x != nil && x.DescriptionRu != nil {
		return *x.DescriptionRu
	}
	return ""
}

func (x *Category) GetDescriptionEn() string {
	if x != nil && x.DescriptionEn != nil {
		return *x.DescriptionEn
	}
	return ""
}

func (x *Category) GetDescriptionMenRu() string {
	if x != nil && x.DescriptionMenRu != nil {
		return *x.DescriptionMenRu
	}
	return ""
}

func (x *Category) GetDescriptionMenEn() string {
	if x != nil && x.DescriptionMenEn != nil {
		return *x.DescriptionMenEn
	}
	return ""
}

func (x *Category) GetMetaDescriptionRu() string {
	if x != nil && x.MetaDescriptionRu != nil {
		return *x.MetaDescriptionRu
	}
	return ""
}

func (x *Category) GetMetaDescriptionEn() string {
	if x != nil && x.MetaDescriptionEn != nil {
		return *x.MetaDescriptionEn
	}
	return ""
}

func (x *Category) GetMetaDescriptionManRu() string {
	if x != nil && x.MetaDescriptionManRu != nil {
		return *x.MetaDescriptionManRu
	}
	return ""
}

func (x *Category) GetMetaDescriptionManEn() string {
	if x != nil && x.MetaDescriptionManEn != nil {
		return *x.MetaDescriptionManEn
	}
	return ""
}

func (x *Category) GetBanners() []*CategoryBanner {
	if x != nil {
		return x.Banners
	}
	return nil
}

func (x *Category) GetBlock() *CategoryBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *Category) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *Category) GetIsCollection() bool {
	if x != nil {
		return x.IsCollection
	}
	return false
}

func (x *Category) GetIsFilterFit() bool {
	if x != nil {
		return x.IsFilterFit
	}
	return false
}

func (x *Category) GetIsFilterRise() bool {
	if x != nil {
		return x.IsFilterRise
	}
	return false
}

func (x *Category) GetIsHideFromAll() bool {
	if x != nil {
		return x.IsHideFromAll
	}
	return false
}

func (x *Category) GetIsHideFromMenu() bool {
	if x != nil {
		return x.IsHideFromMenu
	}
	return false
}

func (x *Category) GetIsHideFromMenuMobile() bool {
	if x != nil {
		return x.IsHideFromMenuMobile
	}
	return false
}

func (x *Category) GetIsHideInWidgets() bool {
	if x != nil {
		return x.IsHideInWidgets
	}
	return false
}

func (x *Category) GetIsHideInWidgetsMobile() bool {
	if x != nil {
		return x.IsHideInWidgetsMobile
	}
	return false
}

func (x *Category) GetIsHideSizesTable() bool {
	if x != nil {
		return x.IsHideSizesTable
	}
	return false
}

func (x *Category) GetIsHighlightInMenu() bool {
	if x != nil {
		return x.IsHighlightInMenu
	}
	return false
}

func (x *Category) GetIsProductsContain() bool {
	if x != nil {
		return x.IsProductsContain
	}
	return false
}

func (x *Category) GetIsShowFilters() bool {
	if x != nil {
		return x.IsShowFilters
	}
	return false
}

func (x *Category) GetIsShowInMenuCompilation() bool {
	if x != nil {
		return x.IsShowInMenuCompilation
	}
	return false
}

func (x *Category) GetGoogleProductCategory() string {
	if x != nil && x.GoogleProductCategory != nil {
		return *x.GoogleProductCategory
	}
	return ""
}

func (x *Category) GetOrderCollection() int32 {
	if x != nil {
		return x.OrderCollection
	}
	return 0
}

func (x *Category) GetPromoArticles() string {
	if x != nil && x.PromoArticles != nil {
		return *x.PromoArticles
	}
	return ""
}

func (x *Category) GetRelatedProducts() []*CategoryRelatedProduct {
	if x != nil {
		return x.RelatedProducts
	}
	return nil
}

func (x *Category) GetSortingType() string {
	if x != nil {
		return x.SortingType
	}
	return ""
}

type CategoryWithoutID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitrixId                *string                   `protobuf:"bytes,1,opt,name=bitrix_id,json=bitrixId,proto3,oneof" json:"bitrix_id,omitempty"`
	Order                   *int32                    `protobuf:"varint,2,opt,name=order,proto3,oneof" json:"order,omitempty"`
	State                   *int32                    `protobuf:"varint,3,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile             int32                     `protobuf:"varint,4,opt,name=state_mobile,json=stateMobile,proto3" json:"state_mobile,omitempty"`
	Slug                    *string                   `protobuf:"bytes,5,opt,name=slug,proto3,oneof" json:"slug,omitempty"`
	TitleRu                 *string                   `protobuf:"bytes,6,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	TitleEn                 *string                   `protobuf:"bytes,7,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	MobileTitleRu           *string                   `protobuf:"bytes,8,opt,name=mobile_title_ru,json=mobileTitleRu,proto3,oneof" json:"mobile_title_ru,omitempty"`
	MobileTitleEn           *string                   `protobuf:"bytes,9,opt,name=mobile_title_en,json=mobileTitleEn,proto3,oneof" json:"mobile_title_en,omitempty"`
	MetaTitleRu             *string                   `protobuf:"bytes,10,opt,name=meta_title_ru,json=metaTitleRu,proto3,oneof" json:"meta_title_ru,omitempty"`
	MetaTitleEn             *string                   `protobuf:"bytes,11,opt,name=meta_title_en,json=metaTitleEn,proto3,oneof" json:"meta_title_en,omitempty"`
	MetaTitleManRu          *string                   `protobuf:"bytes,12,opt,name=meta_title_man_ru,json=metaTitleManRu,proto3,oneof" json:"meta_title_man_ru,omitempty"`
	MetaTitleManEn          *string                   `protobuf:"bytes,13,opt,name=meta_title_man_en,json=metaTitleManEn,proto3,oneof" json:"meta_title_man_en,omitempty"`
	DescriptionRu           *string                   `protobuf:"bytes,14,opt,name=description_ru,json=descriptionRu,proto3,oneof" json:"description_ru,omitempty"`
	DescriptionEn           *string                   `protobuf:"bytes,15,opt,name=description_en,json=descriptionEn,proto3,oneof" json:"description_en,omitempty"`
	DescriptionMenRu        *string                   `protobuf:"bytes,16,opt,name=description_men_ru,json=descriptionMenRu,proto3,oneof" json:"description_men_ru,omitempty"`
	DescriptionMenEn        *string                   `protobuf:"bytes,17,opt,name=description_men_en,json=descriptionMenEn,proto3,oneof" json:"description_men_en,omitempty"`
	MetaDescriptionRu       *string                   `protobuf:"bytes,18,opt,name=meta_description_ru,json=metaDescriptionRu,proto3,oneof" json:"meta_description_ru,omitempty"`
	MetaDescriptionEn       *string                   `protobuf:"bytes,19,opt,name=meta_description_en,json=metaDescriptionEn,proto3,oneof" json:"meta_description_en,omitempty"`
	MetaDescriptionManRu    *string                   `protobuf:"bytes,20,opt,name=meta_description_man_ru,json=metaDescriptionManRu,proto3,oneof" json:"meta_description_man_ru,omitempty"`
	MetaDescriptionManEn    *string                   `protobuf:"bytes,21,opt,name=meta_description_man_en,json=metaDescriptionManEn,proto3,oneof" json:"meta_description_man_en,omitempty"`
	Banners                 []*CategoryBanner         `protobuf:"bytes,22,rep,name=banners,proto3" json:"banners,omitempty"`
	Block                   *CategoryBlock            `protobuf:"bytes,23,opt,name=block,proto3,oneof" json:"block,omitempty"`
	Color                   *string                   `protobuf:"bytes,24,opt,name=color,proto3,oneof" json:"color,omitempty"`
	IsCollection            bool                      `protobuf:"varint,25,opt,name=is_collection,json=isCollection,proto3" json:"is_collection,omitempty"`
	IsFilterFit             bool                      `protobuf:"varint,26,opt,name=is_filter_fit,json=isFilterFit,proto3" json:"is_filter_fit,omitempty"`
	IsFilterRise            bool                      `protobuf:"varint,27,opt,name=is_filter_rise,json=isFilterRise,proto3" json:"is_filter_rise,omitempty"`
	IsHideFromAll           bool                      `protobuf:"varint,28,opt,name=is_hide_from_all,json=isHideFromAll,proto3" json:"is_hide_from_all,omitempty"`
	IsHideFromMenu          bool                      `protobuf:"varint,29,opt,name=is_hide_from_menu,json=isHideFromMenu,proto3" json:"is_hide_from_menu,omitempty"`
	IsHideFromMenuMobile    bool                      `protobuf:"varint,30,opt,name=is_hide_from_menu_mobile,json=isHideFromMenuMobile,proto3" json:"is_hide_from_menu_mobile,omitempty"`
	IsHideInWidgets         bool                      `protobuf:"varint,31,opt,name=is_hide_in_widgets,json=isHideInWidgets,proto3" json:"is_hide_in_widgets,omitempty"`
	IsHideInWidgetsMobile   bool                      `protobuf:"varint,32,opt,name=is_hide_in_widgets_mobile,json=isHideInWidgetsMobile,proto3" json:"is_hide_in_widgets_mobile,omitempty"`
	IsHideSizesTable        bool                      `protobuf:"varint,33,opt,name=is_hide_sizes_table,json=isHideSizesTable,proto3" json:"is_hide_sizes_table,omitempty"`
	IsHighlightInMenu       bool                      `protobuf:"varint,34,opt,name=is_highlight_in_menu,json=isHighlightInMenu,proto3" json:"is_highlight_in_menu,omitempty"`
	IsProductsContain       bool                      `protobuf:"varint,35,opt,name=is_products_contain,json=isProductsContain,proto3" json:"is_products_contain,omitempty"`
	IsShowFilters           bool                      `protobuf:"varint,36,opt,name=is_show_filters,json=isShowFilters,proto3" json:"is_show_filters,omitempty"`
	IsShowInMenuCompilation bool                      `protobuf:"varint,37,opt,name=is_show_in_menu_compilation,json=isShowInMenuCompilation,proto3" json:"is_show_in_menu_compilation,omitempty"`
	GoogleProductCategory   *string                   `protobuf:"bytes,38,opt,name=google_product_category,json=googleProductCategory,proto3,oneof" json:"google_product_category,omitempty"`
	OrderCollection         int32                     `protobuf:"varint,39,opt,name=order_collection,json=orderCollection,proto3" json:"order_collection,omitempty"`
	PromoArticles           *string                   `protobuf:"bytes,40,opt,name=promo_articles,json=promoArticles,proto3,oneof" json:"promo_articles,omitempty"`
	RelatedProducts         []*CategoryRelatedProduct `protobuf:"bytes,41,rep,name=related_products,json=relatedProducts,proto3" json:"related_products,omitempty"`
	SortingType             string                    `protobuf:"bytes,42,opt,name=sorting_type,json=sortingType,proto3" json:"sorting_type,omitempty"`
}

func (x *CategoryWithoutID) Reset() {
	*x = CategoryWithoutID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryWithoutID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryWithoutID) ProtoMessage() {}

func (x *CategoryWithoutID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryWithoutID.ProtoReflect.Descriptor instead.
func (*CategoryWithoutID) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{63}
}

func (x *CategoryWithoutID) GetBitrixId() string {
	if x != nil && x.BitrixId != nil {
		return *x.BitrixId
	}
	return ""
}

func (x *CategoryWithoutID) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *CategoryWithoutID) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CategoryWithoutID) GetStateMobile() int32 {
	if x != nil {
		return x.StateMobile
	}
	return 0
}

func (x *CategoryWithoutID) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *CategoryWithoutID) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *CategoryWithoutID) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *CategoryWithoutID) GetMobileTitleRu() string {
	if x != nil && x.MobileTitleRu != nil {
		return *x.MobileTitleRu
	}
	return ""
}

func (x *CategoryWithoutID) GetMobileTitleEn() string {
	if x != nil && x.MobileTitleEn != nil {
		return *x.MobileTitleEn
	}
	return ""
}

func (x *CategoryWithoutID) GetMetaTitleRu() string {
	if x != nil && x.MetaTitleRu != nil {
		return *x.MetaTitleRu
	}
	return ""
}

func (x *CategoryWithoutID) GetMetaTitleEn() string {
	if x != nil && x.MetaTitleEn != nil {
		return *x.MetaTitleEn
	}
	return ""
}

func (x *CategoryWithoutID) GetMetaTitleManRu() string {
	if x != nil && x.MetaTitleManRu != nil {
		return *x.MetaTitleManRu
	}
	return ""
}

func (x *CategoryWithoutID) GetMetaTitleManEn() string {
	if x != nil && x.MetaTitleManEn != nil {
		return *x.MetaTitleManEn
	}
	return ""
}

func (x *CategoryWithoutID) GetDescriptionRu() string {
	if x != nil && x.DescriptionRu != nil {
		return *x.DescriptionRu
	}
	return ""
}

func (x *CategoryWithoutID) GetDescriptionEn() string {
	if x != nil && x.DescriptionEn != nil {
		return *x.DescriptionEn
	}
	return ""
}

func (x *CategoryWithoutID) GetDescriptionMenRu() string {
	if x != nil && x.DescriptionMenRu != nil {
		return *x.DescriptionMenRu
	}
	return ""
}

func (x *CategoryWithoutID) GetDescriptionMenEn() string {
	if x != nil && x.DescriptionMenEn != nil {
		return *x.DescriptionMenEn
	}
	return ""
}

func (x *CategoryWithoutID) GetMetaDescriptionRu() string {
	if x != nil && x.MetaDescriptionRu != nil {
		return *x.MetaDescriptionRu
	}
	return ""
}

func (x *CategoryWithoutID) GetMetaDescriptionEn() string {
	if x != nil && x.MetaDescriptionEn != nil {
		return *x.MetaDescriptionEn
	}
	return ""
}

func (x *CategoryWithoutID) GetMetaDescriptionManRu() string {
	if x != nil && x.MetaDescriptionManRu != nil {
		return *x.MetaDescriptionManRu
	}
	return ""
}

func (x *CategoryWithoutID) GetMetaDescriptionManEn() string {
	if x != nil && x.MetaDescriptionManEn != nil {
		return *x.MetaDescriptionManEn
	}
	return ""
}

func (x *CategoryWithoutID) GetBanners() []*CategoryBanner {
	if x != nil {
		return x.Banners
	}
	return nil
}

func (x *CategoryWithoutID) GetBlock() *CategoryBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *CategoryWithoutID) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *CategoryWithoutID) GetIsCollection() bool {
	if x != nil {
		return x.IsCollection
	}
	return false
}

func (x *CategoryWithoutID) GetIsFilterFit() bool {
	if x != nil {
		return x.IsFilterFit
	}
	return false
}

func (x *CategoryWithoutID) GetIsFilterRise() bool {
	if x != nil {
		return x.IsFilterRise
	}
	return false
}

func (x *CategoryWithoutID) GetIsHideFromAll() bool {
	if x != nil {
		return x.IsHideFromAll
	}
	return false
}

func (x *CategoryWithoutID) GetIsHideFromMenu() bool {
	if x != nil {
		return x.IsHideFromMenu
	}
	return false
}

func (x *CategoryWithoutID) GetIsHideFromMenuMobile() bool {
	if x != nil {
		return x.IsHideFromMenuMobile
	}
	return false
}

func (x *CategoryWithoutID) GetIsHideInWidgets() bool {
	if x != nil {
		return x.IsHideInWidgets
	}
	return false
}

func (x *CategoryWithoutID) GetIsHideInWidgetsMobile() bool {
	if x != nil {
		return x.IsHideInWidgetsMobile
	}
	return false
}

func (x *CategoryWithoutID) GetIsHideSizesTable() bool {
	if x != nil {
		return x.IsHideSizesTable
	}
	return false
}

func (x *CategoryWithoutID) GetIsHighlightInMenu() bool {
	if x != nil {
		return x.IsHighlightInMenu
	}
	return false
}

func (x *CategoryWithoutID) GetIsProductsContain() bool {
	if x != nil {
		return x.IsProductsContain
	}
	return false
}

func (x *CategoryWithoutID) GetIsShowFilters() bool {
	if x != nil {
		return x.IsShowFilters
	}
	return false
}

func (x *CategoryWithoutID) GetIsShowInMenuCompilation() bool {
	if x != nil {
		return x.IsShowInMenuCompilation
	}
	return false
}

func (x *CategoryWithoutID) GetGoogleProductCategory() string {
	if x != nil && x.GoogleProductCategory != nil {
		return *x.GoogleProductCategory
	}
	return ""
}

func (x *CategoryWithoutID) GetOrderCollection() int32 {
	if x != nil {
		return x.OrderCollection
	}
	return 0
}

func (x *CategoryWithoutID) GetPromoArticles() string {
	if x != nil && x.PromoArticles != nil {
		return *x.PromoArticles
	}
	return ""
}

func (x *CategoryWithoutID) GetRelatedProducts() []*CategoryRelatedProduct {
	if x != nil {
		return x.RelatedProducts
	}
	return nil
}

func (x *CategoryWithoutID) GetSortingType() string {
	if x != nil {
		return x.SortingType
	}
	return ""
}

type UpdateCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitrixId                *string                   `protobuf:"bytes,1,opt,name=bitrix_id,json=bitrixId,proto3,oneof" json:"bitrix_id,omitempty"`
	Order                   *int32                    `protobuf:"varint,2,opt,name=order,proto3,oneof" json:"order,omitempty"`
	State                   *int32                    `protobuf:"varint,3,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile             *int32                    `protobuf:"varint,4,opt,name=state_mobile,json=stateMobile,proto3,oneof" json:"state_mobile,omitempty"`
	Slug                    *string                   `protobuf:"bytes,5,opt,name=slug,proto3,oneof" json:"slug,omitempty"`
	TitleRu                 *string                   `protobuf:"bytes,6,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	TitleEn                 *string                   `protobuf:"bytes,7,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	MobileTitleRu           *string                   `protobuf:"bytes,8,opt,name=mobile_title_ru,json=mobileTitleRu,proto3,oneof" json:"mobile_title_ru,omitempty"`
	MobileTitleEn           *string                   `protobuf:"bytes,9,opt,name=mobile_title_en,json=mobileTitleEn,proto3,oneof" json:"mobile_title_en,omitempty"`
	MetaTitleRu             *string                   `protobuf:"bytes,10,opt,name=meta_title_ru,json=metaTitleRu,proto3,oneof" json:"meta_title_ru,omitempty"`
	MetaTitleEn             *string                   `protobuf:"bytes,11,opt,name=meta_title_en,json=metaTitleEn,proto3,oneof" json:"meta_title_en,omitempty"`
	MetaTitleManRu          *string                   `protobuf:"bytes,12,opt,name=meta_title_man_ru,json=metaTitleManRu,proto3,oneof" json:"meta_title_man_ru,omitempty"`
	MetaTitleManEn          *string                   `protobuf:"bytes,13,opt,name=meta_title_man_en,json=metaTitleManEn,proto3,oneof" json:"meta_title_man_en,omitempty"`
	DescriptionRu           *string                   `protobuf:"bytes,14,opt,name=description_ru,json=descriptionRu,proto3,oneof" json:"description_ru,omitempty"`
	DescriptionEn           *string                   `protobuf:"bytes,15,opt,name=description_en,json=descriptionEn,proto3,oneof" json:"description_en,omitempty"`
	DescriptionMenRu        *string                   `protobuf:"bytes,16,opt,name=description_men_ru,json=descriptionMenRu,proto3,oneof" json:"description_men_ru,omitempty"`
	DescriptionMenEn        *string                   `protobuf:"bytes,17,opt,name=description_men_en,json=descriptionMenEn,proto3,oneof" json:"description_men_en,omitempty"`
	MetaDescriptionRu       *string                   `protobuf:"bytes,18,opt,name=meta_description_ru,json=metaDescriptionRu,proto3,oneof" json:"meta_description_ru,omitempty"`
	MetaDescriptionEn       *string                   `protobuf:"bytes,19,opt,name=meta_description_en,json=metaDescriptionEn,proto3,oneof" json:"meta_description_en,omitempty"`
	MetaDescriptionManRu    *string                   `protobuf:"bytes,20,opt,name=meta_description_man_ru,json=metaDescriptionManRu,proto3,oneof" json:"meta_description_man_ru,omitempty"`
	MetaDescriptionManEn    *string                   `protobuf:"bytes,21,opt,name=meta_description_man_en,json=metaDescriptionManEn,proto3,oneof" json:"meta_description_man_en,omitempty"`
	Banners                 []*CategoryBanner         `protobuf:"bytes,22,rep,name=banners,proto3" json:"banners,omitempty"`
	Block                   *CategoryBlock            `protobuf:"bytes,23,opt,name=block,proto3,oneof" json:"block,omitempty"`
	Color                   *string                   `protobuf:"bytes,24,opt,name=color,proto3,oneof" json:"color,omitempty"`
	IsCollection            *bool                     `protobuf:"varint,25,opt,name=is_collection,json=isCollection,proto3,oneof" json:"is_collection,omitempty"`
	IsFilterFit             *bool                     `protobuf:"varint,26,opt,name=is_filter_fit,json=isFilterFit,proto3,oneof" json:"is_filter_fit,omitempty"`
	IsFilterRise            *bool                     `protobuf:"varint,27,opt,name=is_filter_rise,json=isFilterRise,proto3,oneof" json:"is_filter_rise,omitempty"`
	IsHideFromAll           *bool                     `protobuf:"varint,28,opt,name=is_hide_from_all,json=isHideFromAll,proto3,oneof" json:"is_hide_from_all,omitempty"`
	IsHideFromMenu          *bool                     `protobuf:"varint,29,opt,name=is_hide_from_menu,json=isHideFromMenu,proto3,oneof" json:"is_hide_from_menu,omitempty"`
	IsHideFromMenuMobile    *bool                     `protobuf:"varint,30,opt,name=is_hide_from_menu_mobile,json=isHideFromMenuMobile,proto3,oneof" json:"is_hide_from_menu_mobile,omitempty"`
	IsHideInWidgets         *bool                     `protobuf:"varint,31,opt,name=is_hide_in_widgets,json=isHideInWidgets,proto3,oneof" json:"is_hide_in_widgets,omitempty"`
	IsHideInWidgetsMobile   *bool                     `protobuf:"varint,32,opt,name=is_hide_in_widgets_mobile,json=isHideInWidgetsMobile,proto3,oneof" json:"is_hide_in_widgets_mobile,omitempty"`
	IsHideSizesTable        *bool                     `protobuf:"varint,33,opt,name=is_hide_sizes_table,json=isHideSizesTable,proto3,oneof" json:"is_hide_sizes_table,omitempty"`
	IsHighlightInMenu       *bool                     `protobuf:"varint,34,opt,name=is_highlight_in_menu,json=isHighlightInMenu,proto3,oneof" json:"is_highlight_in_menu,omitempty"`
	IsProductsContain       *bool                     `protobuf:"varint,35,opt,name=is_products_contain,json=isProductsContain,proto3,oneof" json:"is_products_contain,omitempty"`
	IsShowFilters           *bool                     `protobuf:"varint,36,opt,name=is_show_filters,json=isShowFilters,proto3,oneof" json:"is_show_filters,omitempty"`
	IsShowInMenuCompilation *bool                     `protobuf:"varint,37,opt,name=is_show_in_menu_compilation,json=isShowInMenuCompilation,proto3,oneof" json:"is_show_in_menu_compilation,omitempty"`
	GoogleProductCategory   *string                   `protobuf:"bytes,38,opt,name=google_product_category,json=googleProductCategory,proto3,oneof" json:"google_product_category,omitempty"`
	OrderCollection         *int32                    `protobuf:"varint,39,opt,name=order_collection,json=orderCollection,proto3,oneof" json:"order_collection,omitempty"`
	PromoArticles           *string                   `protobuf:"bytes,40,opt,name=promo_articles,json=promoArticles,proto3,oneof" json:"promo_articles,omitempty"`
	RelatedProducts         []*CategoryRelatedProduct `protobuf:"bytes,41,rep,name=related_products,json=relatedProducts,proto3" json:"related_products,omitempty"`
	SortingType             *string                   `protobuf:"bytes,42,opt,name=sorting_type,json=sortingType,proto3,oneof" json:"sorting_type,omitempty"`
}

func (x *UpdateCategory) Reset() {
	*x = UpdateCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCategory) ProtoMessage() {}

func (x *UpdateCategory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCategory.ProtoReflect.Descriptor instead.
func (*UpdateCategory) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{64}
}

func (x *UpdateCategory) GetBitrixId() string {
	if x != nil && x.BitrixId != nil {
		return *x.BitrixId
	}
	return ""
}

func (x *UpdateCategory) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *UpdateCategory) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *UpdateCategory) GetStateMobile() int32 {
	if x != nil && x.StateMobile != nil {
		return *x.StateMobile
	}
	return 0
}

func (x *UpdateCategory) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *UpdateCategory) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *UpdateCategory) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *UpdateCategory) GetMobileTitleRu() string {
	if x != nil && x.MobileTitleRu != nil {
		return *x.MobileTitleRu
	}
	return ""
}

func (x *UpdateCategory) GetMobileTitleEn() string {
	if x != nil && x.MobileTitleEn != nil {
		return *x.MobileTitleEn
	}
	return ""
}

func (x *UpdateCategory) GetMetaTitleRu() string {
	if x != nil && x.MetaTitleRu != nil {
		return *x.MetaTitleRu
	}
	return ""
}

func (x *UpdateCategory) GetMetaTitleEn() string {
	if x != nil && x.MetaTitleEn != nil {
		return *x.MetaTitleEn
	}
	return ""
}

func (x *UpdateCategory) GetMetaTitleManRu() string {
	if x != nil && x.MetaTitleManRu != nil {
		return *x.MetaTitleManRu
	}
	return ""
}

func (x *UpdateCategory) GetMetaTitleManEn() string {
	if x != nil && x.MetaTitleManEn != nil {
		return *x.MetaTitleManEn
	}
	return ""
}

func (x *UpdateCategory) GetDescriptionRu() string {
	if x != nil && x.DescriptionRu != nil {
		return *x.DescriptionRu
	}
	return ""
}

func (x *UpdateCategory) GetDescriptionEn() string {
	if x != nil && x.DescriptionEn != nil {
		return *x.DescriptionEn
	}
	return ""
}

func (x *UpdateCategory) GetDescriptionMenRu() string {
	if x != nil && x.DescriptionMenRu != nil {
		return *x.DescriptionMenRu
	}
	return ""
}

func (x *UpdateCategory) GetDescriptionMenEn() string {
	if x != nil && x.DescriptionMenEn != nil {
		return *x.DescriptionMenEn
	}
	return ""
}

func (x *UpdateCategory) GetMetaDescriptionRu() string {
	if x != nil && x.MetaDescriptionRu != nil {
		return *x.MetaDescriptionRu
	}
	return ""
}

func (x *UpdateCategory) GetMetaDescriptionEn() string {
	if x != nil && x.MetaDescriptionEn != nil {
		return *x.MetaDescriptionEn
	}
	return ""
}

func (x *UpdateCategory) GetMetaDescriptionManRu() string {
	if x != nil && x.MetaDescriptionManRu != nil {
		return *x.MetaDescriptionManRu
	}
	return ""
}

func (x *UpdateCategory) GetMetaDescriptionManEn() string {
	if x != nil && x.MetaDescriptionManEn != nil {
		return *x.MetaDescriptionManEn
	}
	return ""
}

func (x *UpdateCategory) GetBanners() []*CategoryBanner {
	if x != nil {
		return x.Banners
	}
	return nil
}

func (x *UpdateCategory) GetBlock() *CategoryBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *UpdateCategory) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *UpdateCategory) GetIsCollection() bool {
	if x != nil && x.IsCollection != nil {
		return *x.IsCollection
	}
	return false
}

func (x *UpdateCategory) GetIsFilterFit() bool {
	if x != nil && x.IsFilterFit != nil {
		return *x.IsFilterFit
	}
	return false
}

func (x *UpdateCategory) GetIsFilterRise() bool {
	if x != nil && x.IsFilterRise != nil {
		return *x.IsFilterRise
	}
	return false
}

func (x *UpdateCategory) GetIsHideFromAll() bool {
	if x != nil && x.IsHideFromAll != nil {
		return *x.IsHideFromAll
	}
	return false
}

func (x *UpdateCategory) GetIsHideFromMenu() bool {
	if x != nil && x.IsHideFromMenu != nil {
		return *x.IsHideFromMenu
	}
	return false
}

func (x *UpdateCategory) GetIsHideFromMenuMobile() bool {
	if x != nil && x.IsHideFromMenuMobile != nil {
		return *x.IsHideFromMenuMobile
	}
	return false
}

func (x *UpdateCategory) GetIsHideInWidgets() bool {
	if x != nil && x.IsHideInWidgets != nil {
		return *x.IsHideInWidgets
	}
	return false
}

func (x *UpdateCategory) GetIsHideInWidgetsMobile() bool {
	if x != nil && x.IsHideInWidgetsMobile != nil {
		return *x.IsHideInWidgetsMobile
	}
	return false
}

func (x *UpdateCategory) GetIsHideSizesTable() bool {
	if x != nil && x.IsHideSizesTable != nil {
		return *x.IsHideSizesTable
	}
	return false
}

func (x *UpdateCategory) GetIsHighlightInMenu() bool {
	if x != nil && x.IsHighlightInMenu != nil {
		return *x.IsHighlightInMenu
	}
	return false
}

func (x *UpdateCategory) GetIsProductsContain() bool {
	if x != nil && x.IsProductsContain != nil {
		return *x.IsProductsContain
	}
	return false
}

func (x *UpdateCategory) GetIsShowFilters() bool {
	if x != nil && x.IsShowFilters != nil {
		return *x.IsShowFilters
	}
	return false
}

func (x *UpdateCategory) GetIsShowInMenuCompilation() bool {
	if x != nil && x.IsShowInMenuCompilation != nil {
		return *x.IsShowInMenuCompilation
	}
	return false
}

func (x *UpdateCategory) GetGoogleProductCategory() string {
	if x != nil && x.GoogleProductCategory != nil {
		return *x.GoogleProductCategory
	}
	return ""
}

func (x *UpdateCategory) GetOrderCollection() int32 {
	if x != nil && x.OrderCollection != nil {
		return *x.OrderCollection
	}
	return 0
}

func (x *UpdateCategory) GetPromoArticles() string {
	if x != nil && x.PromoArticles != nil {
		return *x.PromoArticles
	}
	return ""
}

func (x *UpdateCategory) GetRelatedProducts() []*CategoryRelatedProduct {
	if x != nil {
		return x.RelatedProducts
	}
	return nil
}

func (x *UpdateCategory) GetSortingType() string {
	if x != nil && x.SortingType != nil {
		return *x.SortingType
	}
	return ""
}

type SetNullCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitrixId              *bool `protobuf:"varint,1,opt,name=bitrix_id,json=bitrixId,proto3,oneof" json:"bitrix_id,omitempty"`
	Order                 *bool `protobuf:"varint,2,opt,name=order,proto3,oneof" json:"order,omitempty"`
	State                 *bool `protobuf:"varint,3,opt,name=state,proto3,oneof" json:"state,omitempty"`
	Slug                  *bool `protobuf:"varint,4,opt,name=slug,proto3,oneof" json:"slug,omitempty"`
	TitleRu               *bool `protobuf:"varint,5,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	TitleEn               *bool `protobuf:"varint,6,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	MobileTitleRu         *bool `protobuf:"varint,7,opt,name=mobile_title_ru,json=mobileTitleRu,proto3,oneof" json:"mobile_title_ru,omitempty"`
	MobileTitleEn         *bool `protobuf:"varint,8,opt,name=mobile_title_en,json=mobileTitleEn,proto3,oneof" json:"mobile_title_en,omitempty"`
	MetaTitleRu           *bool `protobuf:"varint,9,opt,name=meta_title_ru,json=metaTitleRu,proto3,oneof" json:"meta_title_ru,omitempty"`
	MetaTitleEn           *bool `protobuf:"varint,10,opt,name=meta_title_en,json=metaTitleEn,proto3,oneof" json:"meta_title_en,omitempty"`
	MetaTitleManRu        *bool `protobuf:"varint,11,opt,name=meta_title_man_ru,json=metaTitleManRu,proto3,oneof" json:"meta_title_man_ru,omitempty"`
	MetaTitleManEn        *bool `protobuf:"varint,12,opt,name=meta_title_man_en,json=metaTitleManEn,proto3,oneof" json:"meta_title_man_en,omitempty"`
	DescriptionRu         *bool `protobuf:"varint,13,opt,name=description_ru,json=descriptionRu,proto3,oneof" json:"description_ru,omitempty"`
	DescriptionEn         *bool `protobuf:"varint,14,opt,name=description_en,json=descriptionEn,proto3,oneof" json:"description_en,omitempty"`
	DescriptionMenRu      *bool `protobuf:"varint,15,opt,name=description_men_ru,json=descriptionMenRu,proto3,oneof" json:"description_men_ru,omitempty"`
	DescriptionMenEn      *bool `protobuf:"varint,16,opt,name=description_men_en,json=descriptionMenEn,proto3,oneof" json:"description_men_en,omitempty"`
	MetaDescriptionRu     *bool `protobuf:"varint,17,opt,name=meta_description_ru,json=metaDescriptionRu,proto3,oneof" json:"meta_description_ru,omitempty"`
	MetaDescriptionEn     *bool `protobuf:"varint,18,opt,name=meta_description_en,json=metaDescriptionEn,proto3,oneof" json:"meta_description_en,omitempty"`
	MetaDescriptionManRu  *bool `protobuf:"varint,19,opt,name=meta_description_man_ru,json=metaDescriptionManRu,proto3,oneof" json:"meta_description_man_ru,omitempty"`
	MetaDescriptionManEn  *bool `protobuf:"varint,20,opt,name=meta_description_man_en,json=metaDescriptionManEn,proto3,oneof" json:"meta_description_man_en,omitempty"`
	Banners               *bool `protobuf:"varint,21,opt,name=banners,proto3,oneof" json:"banners,omitempty"`
	Block                 *bool `protobuf:"varint,22,opt,name=block,proto3,oneof" json:"block,omitempty"`
	Color                 *bool `protobuf:"varint,23,opt,name=color,proto3,oneof" json:"color,omitempty"`
	GoogleProductCategory *bool `protobuf:"varint,24,opt,name=google_product_category,json=googleProductCategory,proto3,oneof" json:"google_product_category,omitempty"`
	PromoArticles         *bool `protobuf:"varint,25,opt,name=promo_articles,json=promoArticles,proto3,oneof" json:"promo_articles,omitempty"`
	RelatedProducts       *bool `protobuf:"varint,26,opt,name=related_products,json=relatedProducts,proto3,oneof" json:"related_products,omitempty"`
}

func (x *SetNullCategory) Reset() {
	*x = SetNullCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullCategory) ProtoMessage() {}

func (x *SetNullCategory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullCategory.ProtoReflect.Descriptor instead.
func (*SetNullCategory) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{65}
}

func (x *SetNullCategory) GetBitrixId() bool {
	if x != nil && x.BitrixId != nil {
		return *x.BitrixId
	}
	return false
}

func (x *SetNullCategory) GetOrder() bool {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return false
}

func (x *SetNullCategory) GetState() bool {
	if x != nil && x.State != nil {
		return *x.State
	}
	return false
}

func (x *SetNullCategory) GetSlug() bool {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return false
}

func (x *SetNullCategory) GetTitleRu() bool {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return false
}

func (x *SetNullCategory) GetTitleEn() bool {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return false
}

func (x *SetNullCategory) GetMobileTitleRu() bool {
	if x != nil && x.MobileTitleRu != nil {
		return *x.MobileTitleRu
	}
	return false
}

func (x *SetNullCategory) GetMobileTitleEn() bool {
	if x != nil && x.MobileTitleEn != nil {
		return *x.MobileTitleEn
	}
	return false
}

func (x *SetNullCategory) GetMetaTitleRu() bool {
	if x != nil && x.MetaTitleRu != nil {
		return *x.MetaTitleRu
	}
	return false
}

func (x *SetNullCategory) GetMetaTitleEn() bool {
	if x != nil && x.MetaTitleEn != nil {
		return *x.MetaTitleEn
	}
	return false
}

func (x *SetNullCategory) GetMetaTitleManRu() bool {
	if x != nil && x.MetaTitleManRu != nil {
		return *x.MetaTitleManRu
	}
	return false
}

func (x *SetNullCategory) GetMetaTitleManEn() bool {
	if x != nil && x.MetaTitleManEn != nil {
		return *x.MetaTitleManEn
	}
	return false
}

func (x *SetNullCategory) GetDescriptionRu() bool {
	if x != nil && x.DescriptionRu != nil {
		return *x.DescriptionRu
	}
	return false
}

func (x *SetNullCategory) GetDescriptionEn() bool {
	if x != nil && x.DescriptionEn != nil {
		return *x.DescriptionEn
	}
	return false
}

func (x *SetNullCategory) GetDescriptionMenRu() bool {
	if x != nil && x.DescriptionMenRu != nil {
		return *x.DescriptionMenRu
	}
	return false
}

func (x *SetNullCategory) GetDescriptionMenEn() bool {
	if x != nil && x.DescriptionMenEn != nil {
		return *x.DescriptionMenEn
	}
	return false
}

func (x *SetNullCategory) GetMetaDescriptionRu() bool {
	if x != nil && x.MetaDescriptionRu != nil {
		return *x.MetaDescriptionRu
	}
	return false
}

func (x *SetNullCategory) GetMetaDescriptionEn() bool {
	if x != nil && x.MetaDescriptionEn != nil {
		return *x.MetaDescriptionEn
	}
	return false
}

func (x *SetNullCategory) GetMetaDescriptionManRu() bool {
	if x != nil && x.MetaDescriptionManRu != nil {
		return *x.MetaDescriptionManRu
	}
	return false
}

func (x *SetNullCategory) GetMetaDescriptionManEn() bool {
	if x != nil && x.MetaDescriptionManEn != nil {
		return *x.MetaDescriptionManEn
	}
	return false
}

func (x *SetNullCategory) GetBanners() bool {
	if x != nil && x.Banners != nil {
		return *x.Banners
	}
	return false
}

func (x *SetNullCategory) GetBlock() bool {
	if x != nil && x.Block != nil {
		return *x.Block
	}
	return false
}

func (x *SetNullCategory) GetColor() bool {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return false
}

func (x *SetNullCategory) GetGoogleProductCategory() bool {
	if x != nil && x.GoogleProductCategory != nil {
		return *x.GoogleProductCategory
	}
	return false
}

func (x *SetNullCategory) GetPromoArticles() bool {
	if x != nil && x.PromoArticles != nil {
		return *x.PromoArticles
	}
	return false
}

func (x *SetNullCategory) GetRelatedProducts() bool {
	if x != nil && x.RelatedProducts != nil {
		return *x.RelatedProducts
	}
	return false
}

type UpdatesCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Update *UpdateCategory  `protobuf:"bytes,2,opt,name=update,proto3,oneof" json:"update,omitempty"`
	Null   *SetNullCategory `protobuf:"bytes,3,opt,name=null,proto3,oneof" json:"null,omitempty"`
}

func (x *UpdatesCategory) Reset() {
	*x = UpdatesCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatesCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatesCategory) ProtoMessage() {}

func (x *UpdatesCategory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatesCategory.ProtoReflect.Descriptor instead.
func (*UpdatesCategory) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{66}
}

func (x *UpdatesCategory) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatesCategory) GetUpdate() *UpdateCategory {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UpdatesCategory) GetNull() *SetNullCategory {
	if x != nil {
		return x.Null
	}
	return nil
}

type CategoryForGetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Order          *int32  `protobuf:"varint,2,opt,name=order,proto3,oneof" json:"order,omitempty"`
	State          *int32  `protobuf:"varint,3,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile    int32   `protobuf:"varint,4,opt,name=state_mobile,json=stateMobile,proto3" json:"state_mobile,omitempty"`
	Slug           *string `protobuf:"bytes,5,opt,name=slug,proto3,oneof" json:"slug,omitempty"`
	TitleRu        *string `protobuf:"bytes,6,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	IsCollection   bool    `protobuf:"varint,7,opt,name=is_collection,json=isCollection,proto3" json:"is_collection,omitempty"`
	IsHideFromMenu bool    `protobuf:"varint,8,opt,name=is_hide_from_menu,json=isHideFromMenu,proto3" json:"is_hide_from_menu,omitempty"`
}

func (x *CategoryForGetList) Reset() {
	*x = CategoryForGetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryForGetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryForGetList) ProtoMessage() {}

func (x *CategoryForGetList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryForGetList.ProtoReflect.Descriptor instead.
func (*CategoryForGetList) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{67}
}

func (x *CategoryForGetList) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryForGetList) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *CategoryForGetList) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CategoryForGetList) GetStateMobile() int32 {
	if x != nil {
		return x.StateMobile
	}
	return 0
}

func (x *CategoryForGetList) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *CategoryForGetList) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *CategoryForGetList) GetIsCollection() bool {
	if x != nil {
		return x.IsCollection
	}
	return false
}

func (x *CategoryForGetList) GetIsHideFromMenu() bool {
	if x != nil {
		return x.IsHideFromMenu
	}
	return false
}

type GetCategoryListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse   `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64                 `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error              `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*CategoryForGetList `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCategoryListResponse) Reset() {
	*x = GetCategoryListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryListResponse) ProtoMessage() {}

func (x *GetCategoryListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryListResponse.ProtoReflect.Descriptor instead.
func (*GetCategoryListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{68}
}

func (x *GetCategoryListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetCategoryListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCategoryListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetCategoryListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCategoryListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetCategoryListResponse) GetData() []*CategoryForGetList {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCategoryByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Category `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64     `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error  `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetCategoryByIDResponse) Reset() {
	*x = GetCategoryByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryByIDResponse) ProtoMessage() {}

func (x *GetCategoryByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryByIDResponse.ProtoReflect.Descriptor instead.
func (*GetCategoryByIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{69}
}

func (x *GetCategoryByIDResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetCategoryByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCategoryByIDResponse) GetData() *Category {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetCategoryByIDResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCategoryByIDResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ProductsToCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleRu  *string  `protobuf:"bytes,2,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	Articles []string `protobuf:"bytes,3,rep,name=articles,proto3" json:"articles,omitempty"`
}

func (x *ProductsToCategory) Reset() {
	*x = ProductsToCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsToCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsToCategory) ProtoMessage() {}

func (x *ProductsToCategory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsToCategory.ProtoReflect.Descriptor instead.
func (*ProductsToCategory) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{70}
}

func (x *ProductsToCategory) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductsToCategory) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *ProductsToCategory) GetArticles() []string {
	if x != nil {
		return x.Articles
	}
	return nil
}

type GetProductsToCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Code    int64               `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error            `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	Data    *ProductsToCategory `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProductsToCategoryResponse) Reset() {
	*x = GetProductsToCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductsToCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductsToCategoryResponse) ProtoMessage() {}

func (x *GetProductsToCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductsToCategoryResponse.ProtoReflect.Descriptor instead.
func (*GetProductsToCategoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{71}
}

func (x *GetProductsToCategoryResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetProductsToCategoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductsToCategoryResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductsToCategoryResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetProductsToCategoryResponse) GetData() *ProductsToCategory {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateProductsToCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Articles         []string `protobuf:"bytes,2,rep,name=articles,proto3" json:"articles,omitempty"`
	ArticlesToRemove []string `protobuf:"bytes,3,rep,name=articles_to_remove,json=articlesToRemove,proto3" json:"articles_to_remove,omitempty"`
}

func (x *UpdateProductsToCategoryRequest) Reset() {
	*x = UpdateProductsToCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductsToCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductsToCategoryRequest) ProtoMessage() {}

func (x *UpdateProductsToCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductsToCategoryRequest.ProtoReflect.Descriptor instead.
func (*UpdateProductsToCategoryRequest) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{72}
}

func (x *UpdateProductsToCategoryRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductsToCategoryRequest) GetArticles() []string {
	if x != nil {
		return x.Articles
	}
	return nil
}

func (x *UpdateProductsToCategoryRequest) GetArticlesToRemove() []string {
	if x != nil {
		return x.ArticlesToRemove
	}
	return nil
}

type ProductForAdminGetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid                string  `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Article             string  `protobuf:"bytes,2,opt,name=article,proto3" json:"article,omitempty"`
	AvailSizes          string  `protobuf:"bytes,3,opt,name=avail_sizes,json=availSizes,proto3" json:"avail_sizes,omitempty"`
	GoogleCategoryCode  *string `protobuf:"bytes,4,opt,name=google_category_code,json=googleCategoryCode,proto3,oneof" json:"google_category_code,omitempty"`
	Image               *string `protobuf:"bytes,5,opt,name=image,proto3,oneof" json:"image,omitempty"`
	IsComingSoon        bool    `protobuf:"varint,6,opt,name=is_coming_soon,json=isComingSoon,proto3" json:"is_coming_soon,omitempty"`
	IsPreorderAvaliable bool    `protobuf:"varint,7,opt,name=is_preorder_avaliable,json=isPreorderAvaliable,proto3" json:"is_preorder_avaliable,omitempty"`
	Price               *string `protobuf:"bytes,8,opt,name=price,proto3,oneof" json:"price,omitempty"`
	State               *int32  `protobuf:"varint,9,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile         *int32  `protobuf:"varint,10,opt,name=state_mobile,json=stateMobile,proto3,oneof" json:"state_mobile,omitempty"`
	StockOrder          *int32  `protobuf:"varint,11,opt,name=stock_order,json=stockOrder,proto3,oneof" json:"stock_order,omitempty"`
	StockOrderMobile    *int32  `protobuf:"varint,12,opt,name=stock_order_mobile,json=stockOrderMobile,proto3,oneof" json:"stock_order_mobile,omitempty"`
	SuperModelGuid      *string `protobuf:"bytes,13,opt,name=super_model_guid,json=superModelGuid,proto3,oneof" json:"super_model_guid,omitempty"`
	TitleRu             *string `protobuf:"bytes,14,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
}

func (x *ProductForAdminGetList) Reset() {
	*x = ProductForAdminGetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductForAdminGetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductForAdminGetList) ProtoMessage() {}

func (x *ProductForAdminGetList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductForAdminGetList.ProtoReflect.Descriptor instead.
func (*ProductForAdminGetList) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{73}
}

func (x *ProductForAdminGetList) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *ProductForAdminGetList) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *ProductForAdminGetList) GetAvailSizes() string {
	if x != nil {
		return x.AvailSizes
	}
	return ""
}

func (x *ProductForAdminGetList) GetGoogleCategoryCode() string {
	if x != nil && x.GoogleCategoryCode != nil {
		return *x.GoogleCategoryCode
	}
	return ""
}

func (x *ProductForAdminGetList) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *ProductForAdminGetList) GetIsComingSoon() bool {
	if x != nil {
		return x.IsComingSoon
	}
	return false
}

func (x *ProductForAdminGetList) GetIsPreorderAvaliable() bool {
	if x != nil {
		return x.IsPreorderAvaliable
	}
	return false
}

func (x *ProductForAdminGetList) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

func (x *ProductForAdminGetList) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *ProductForAdminGetList) GetStateMobile() int32 {
	if x != nil && x.StateMobile != nil {
		return *x.StateMobile
	}
	return 0
}

func (x *ProductForAdminGetList) GetStockOrder() int32 {
	if x != nil && x.StockOrder != nil {
		return *x.StockOrder
	}
	return 0
}

func (x *ProductForAdminGetList) GetStockOrderMobile() int32 {
	if x != nil && x.StockOrderMobile != nil {
		return *x.StockOrderMobile
	}
	return 0
}

func (x *ProductForAdminGetList) GetSuperModelGuid() string {
	if x != nil && x.SuperModelGuid != nil {
		return *x.SuperModelGuid
	}
	return ""
}

func (x *ProductForAdminGetList) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

type GetProductForAdminListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string                    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse       `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64                     `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error                  `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*ProductForAdminGetList `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProductForAdminListResponse) Reset() {
	*x = GetProductForAdminListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductForAdminListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductForAdminListResponse) ProtoMessage() {}

func (x *GetProductForAdminListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductForAdminListResponse.ProtoReflect.Descriptor instead.
func (*GetProductForAdminListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{74}
}

func (x *GetProductForAdminListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetProductForAdminListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductForAdminListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetProductForAdminListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductForAdminListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetProductForAdminListResponse) GetData() []*ProductForAdminGetList {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProductForAdminColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash    *string `protobuf:"bytes,1,opt,name=hash,proto3,oneof" json:"hash,omitempty"`
	TitleRu *string `protobuf:"bytes,2,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
}

func (x *ProductForAdminColor) Reset() {
	*x = ProductForAdminColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductForAdminColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductForAdminColor) ProtoMessage() {}

func (x *ProductForAdminColor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductForAdminColor.ProtoReflect.Descriptor instead.
func (*ProductForAdminColor) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{75}
}

func (x *ProductForAdminColor) GetHash() string {
	if x != nil && x.Hash != nil {
		return *x.Hash
	}
	return ""
}

func (x *ProductForAdminColor) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

type ProductForAdminImages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail   *string `protobuf:"bytes,1,opt,name=detail,proto3,oneof" json:"detail,omitempty"`
	Ghost    *string `protobuf:"bytes,2,opt,name=ghost,proto3,oneof" json:"ghost,omitempty"`
	Popup    *string `protobuf:"bytes,4,opt,name=popup,proto3,oneof" json:"popup,omitempty"`
	Square   *string `protobuf:"bytes,5,opt,name=square,proto3,oneof" json:"square,omitempty"`
	General  *string `protobuf:"bytes,6,opt,name=general,proto3,oneof" json:"general,omitempty"`
	Headless *string `protobuf:"bytes,7,opt,name=headless,proto3,oneof" json:"headless,omitempty"`
	Xl       *string `protobuf:"bytes,8,opt,name=xl,proto3,oneof" json:"xl,omitempty"`
}

func (x *ProductForAdminImages) Reset() {
	*x = ProductForAdminImages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductForAdminImages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductForAdminImages) ProtoMessage() {}

func (x *ProductForAdminImages) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductForAdminImages.ProtoReflect.Descriptor instead.
func (*ProductForAdminImages) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{76}
}

func (x *ProductForAdminImages) GetDetail() string {
	if x != nil && x.Detail != nil {
		return *x.Detail
	}
	return ""
}

func (x *ProductForAdminImages) GetGhost() string {
	if x != nil && x.Ghost != nil {
		return *x.Ghost
	}
	return ""
}

func (x *ProductForAdminImages) GetPopup() string {
	if x != nil && x.Popup != nil {
		return *x.Popup
	}
	return ""
}

func (x *ProductForAdminImages) GetSquare() string {
	if x != nil && x.Square != nil {
		return *x.Square
	}
	return ""
}

func (x *ProductForAdminImages) GetGeneral() string {
	if x != nil && x.General != nil {
		return *x.General
	}
	return ""
}

func (x *ProductForAdminImages) GetHeadless() string {
	if x != nil && x.Headless != nil {
		return *x.Headless
	}
	return ""
}

func (x *ProductForAdminImages) GetXl() string {
	if x != nil && x.Xl != nil {
		return *x.Xl
	}
	return ""
}

type ProductForAdminMainCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug    *string `protobuf:"bytes,2,opt,name=slug,proto3,oneof" json:"slug,omitempty"`
	TitleRu *string `protobuf:"bytes,3,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
}

func (x *ProductForAdminMainCategory) Reset() {
	*x = ProductForAdminMainCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductForAdminMainCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductForAdminMainCategory) ProtoMessage() {}

func (x *ProductForAdminMainCategory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductForAdminMainCategory.ProtoReflect.Descriptor instead.
func (*ProductForAdminMainCategory) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{77}
}

func (x *ProductForAdminMainCategory) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductForAdminMainCategory) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *ProductForAdminMainCategory) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

type ProductForAdminMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescriptionRu  *string `protobuf:"bytes,1,opt,name=description_ru,json=descriptionRu,proto3,oneof" json:"description_ru,omitempty"`
	TextileTitleRu *string `protobuf:"bytes,2,opt,name=textile_title_ru,json=textileTitleRu,proto3,oneof" json:"textile_title_ru,omitempty"`
}

func (x *ProductForAdminMaterial) Reset() {
	*x = ProductForAdminMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductForAdminMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductForAdminMaterial) ProtoMessage() {}

func (x *ProductForAdminMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductForAdminMaterial.ProtoReflect.Descriptor instead.
func (*ProductForAdminMaterial) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{78}
}

func (x *ProductForAdminMaterial) GetDescriptionRu() string {
	if x != nil && x.DescriptionRu != nil {
		return *x.DescriptionRu
	}
	return ""
}

func (x *ProductForAdminMaterial) GetTextileTitleRu() string {
	if x != nil && x.TextileTitleRu != nil {
		return *x.TextileTitleRu
	}
	return ""
}

type ProductForAdminModelTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleRu        string  `protobuf:"bytes,1,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
	TitleEn        *string `protobuf:"bytes,2,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	TitleShortRu   *string `protobuf:"bytes,3,opt,name=title_short_ru,json=titleShortRu,proto3,oneof" json:"title_short_ru,omitempty"`
	TitleShortVkRu *string `protobuf:"bytes,4,opt,name=title_short_vk_ru,json=titleShortVkRu,proto3,oneof" json:"title_short_vk_ru,omitempty"`
}

func (x *ProductForAdminModelTitle) Reset() {
	*x = ProductForAdminModelTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductForAdminModelTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductForAdminModelTitle) ProtoMessage() {}

func (x *ProductForAdminModelTitle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductForAdminModelTitle.ProtoReflect.Descriptor instead.
func (*ProductForAdminModelTitle) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{79}
}

func (x *ProductForAdminModelTitle) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

func (x *ProductForAdminModelTitle) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *ProductForAdminModelTitle) GetTitleShortRu() string {
	if x != nil && x.TitleShortRu != nil {
		return *x.TitleShortRu
	}
	return ""
}

func (x *ProductForAdminModelTitle) GetTitleShortVkRu() string {
	if x != nil && x.TitleShortVkRu != nil {
		return *x.TitleShortVkRu
	}
	return ""
}

type ProductForAdminModelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *int32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (x *ProductForAdminModelType) Reset() {
	*x = ProductForAdminModelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductForAdminModelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductForAdminModelType) ProtoMessage() {}

func (x *ProductForAdminModelType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductForAdminModelType.ProtoReflect.Descriptor instead.
func (*ProductForAdminModelType) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{80}
}

func (x *ProductForAdminModelType) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type ProductForAdminPhotoModelDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Growth    *string `protobuf:"bytes,2,opt,name=growth,proto3,oneof" json:"growth,omitempty"`
	Bust      *string `protobuf:"bytes,3,opt,name=bust,proto3,oneof" json:"bust,omitempty"`
	Hips      *string `protobuf:"bytes,4,opt,name=hips,proto3,oneof" json:"hips,omitempty"`
	Waist     *string `protobuf:"bytes,5,opt,name=waist,proto3,oneof" json:"waist,omitempty"`
	UseSizeRu *string `protobuf:"bytes,6,opt,name=use_size_ru,json=useSizeRu,proto3,oneof" json:"use_size_ru,omitempty"`
}

func (x *ProductForAdminPhotoModelDescription) Reset() {
	*x = ProductForAdminPhotoModelDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductForAdminPhotoModelDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductForAdminPhotoModelDescription) ProtoMessage() {}

func (x *ProductForAdminPhotoModelDescription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductForAdminPhotoModelDescription.ProtoReflect.Descriptor instead.
func (*ProductForAdminPhotoModelDescription) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{81}
}

func (x *ProductForAdminPhotoModelDescription) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ProductForAdminPhotoModelDescription) GetGrowth() string {
	if x != nil && x.Growth != nil {
		return *x.Growth
	}
	return ""
}

func (x *ProductForAdminPhotoModelDescription) GetBust() string {
	if x != nil && x.Bust != nil {
		return *x.Bust
	}
	return ""
}

func (x *ProductForAdminPhotoModelDescription) GetHips() string {
	if x != nil && x.Hips != nil {
		return *x.Hips
	}
	return ""
}

func (x *ProductForAdminPhotoModelDescription) GetWaist() string {
	if x != nil && x.Waist != nil {
		return *x.Waist
	}
	return ""
}

func (x *ProductForAdminPhotoModelDescription) GetUseSizeRu() string {
	if x != nil && x.UseSizeRu != nil {
		return *x.UseSizeRu
	}
	return ""
}

type ProductForAdminPhotoModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Standard *ProductForAdminPhotoModelDescription `protobuf:"bytes,1,opt,name=standard,proto3,oneof" json:"standard,omitempty"`
	Xl       *ProductForAdminPhotoModelDescription `protobuf:"bytes,2,opt,name=xl,proto3,oneof" json:"xl,omitempty"`
}

func (x *ProductForAdminPhotoModel) Reset() {
	*x = ProductForAdminPhotoModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductForAdminPhotoModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductForAdminPhotoModel) ProtoMessage() {}

func (x *ProductForAdminPhotoModel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductForAdminPhotoModel.ProtoReflect.Descriptor instead.
func (*ProductForAdminPhotoModel) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{82}
}

func (x *ProductForAdminPhotoModel) GetStandard() *ProductForAdminPhotoModelDescription {
	if x != nil {
		return x.Standard
	}
	return nil
}

func (x *ProductForAdminPhotoModel) GetXl() *ProductForAdminPhotoModelDescription {
	if x != nil {
		return x.Xl
	}
	return nil
}

type ProductForAdminVideosThumbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Small string `protobuf:"bytes,1,opt,name=small,proto3" json:"small,omitempty"`
	Large string `protobuf:"bytes,2,opt,name=large,proto3" json:"large,omitempty"`
}

func (x *ProductForAdminVideosThumbs) Reset() {
	*x = ProductForAdminVideosThumbs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductForAdminVideosThumbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductForAdminVideosThumbs) ProtoMessage() {}

func (x *ProductForAdminVideosThumbs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductForAdminVideosThumbs.ProtoReflect.Descriptor instead.
func (*ProductForAdminVideosThumbs) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{83}
}

func (x *ProductForAdminVideosThumbs) GetSmall() string {
	if x != nil {
		return x.Small
	}
	return ""
}

func (x *ProductForAdminVideosThumbs) GetLarge() string {
	if x != nil {
		return x.Large
	}
	return ""
}

type ProductForAdminVideos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string                       `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Type   string                       `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Thumbs *ProductForAdminVideosThumbs `protobuf:"bytes,3,opt,name=thumbs,proto3" json:"thumbs,omitempty"`
}

func (x *ProductForAdminVideos) Reset() {
	*x = ProductForAdminVideos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductForAdminVideos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductForAdminVideos) ProtoMessage() {}

func (x *ProductForAdminVideos) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductForAdminVideos.ProtoReflect.Descriptor instead.
func (*ProductForAdminVideos) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{84}
}

func (x *ProductForAdminVideos) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ProductForAdminVideos) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProductForAdminVideos) GetThumbs() *ProductForAdminVideosThumbs {
	if x != nil {
		return x.Thumbs
	}
	return nil
}

type ProductForAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid                        string                       `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Article                     string                       `protobuf:"bytes,2,opt,name=article,proto3" json:"article,omitempty"`
	Categories                  *string                      `protobuf:"bytes,3,opt,name=categories,proto3,oneof" json:"categories,omitempty"`
	Compressibility             int32                        `protobuf:"varint,4,opt,name=compressibility,proto3" json:"compressibility,omitempty"`
	CustomTag                   *string                      `protobuf:"bytes,5,opt,name=custom_tag,json=customTag,proto3,oneof" json:"custom_tag,omitempty"`
	DescriptionRu               *string                      `protobuf:"bytes,6,opt,name=description_ru,json=descriptionRu,proto3,oneof" json:"description_ru,omitempty"`
	DisableSendMail             bool                         `protobuf:"varint,7,opt,name=disable_send_mail,json=disableSendMail,proto3" json:"disable_send_mail,omitempty"`
	Fashion                     *string                      `protobuf:"bytes,8,opt,name=fashion,proto3,oneof" json:"fashion,omitempty"`
	FashionStylist              *string                      `protobuf:"bytes,9,opt,name=fashion_stylist,json=fashionStylist,proto3,oneof" json:"fashion_stylist,omitempty"`
	Gender                      string                       `protobuf:"bytes,10,opt,name=gender,proto3" json:"gender,omitempty"`
	GoogleCategoryCode          *string                      `protobuf:"bytes,11,opt,name=google_category_code,json=googleCategoryCode,proto3,oneof" json:"google_category_code,omitempty"`
	Images                      *ProductForAdminImages       `protobuf:"bytes,12,opt,name=images,proto3" json:"images,omitempty"`
	IsCommission                bool                         `protobuf:"varint,13,opt,name=is_commission,json=isCommission,proto3" json:"is_commission,omitempty"`
	IsOfflineShipmentAvailable  bool                         `protobuf:"varint,14,opt,name=is_offline_shipment_available,json=isOfflineShipmentAvailable,proto3" json:"is_offline_shipment_available,omitempty"`
	IsPreorderAvailable         bool                         `protobuf:"varint,15,opt,name=is_preorder_available,json=isPreorderAvailable,proto3" json:"is_preorder_available,omitempty"`
	IsPresent                   bool                         `protobuf:"varint,16,opt,name=is_present,json=isPresent,proto3" json:"is_present,omitempty"`
	IsSampleSale                bool                         `protobuf:"varint,17,opt,name=is_sample_sale,json=isSampleSale,proto3" json:"is_sample_sale,omitempty"`
	MainCategory                *ProductForAdminMainCategory `protobuf:"bytes,18,opt,name=main_category,json=mainCategory,proto3" json:"main_category,omitempty"`
	Material                    *ProductForAdminMaterial     `protobuf:"bytes,19,opt,name=material,proto3" json:"material,omitempty"`
	ModelParametersRu           *string                      `protobuf:"bytes,20,opt,name=model_parameters_ru,json=modelParametersRu,proto3,oneof" json:"model_parameters_ru,omitempty"`
	ModelSizesRu                *string                      `protobuf:"bytes,21,opt,name=model_sizes_ru,json=modelSizesRu,proto3,oneof" json:"model_sizes_ru,omitempty"`
	ModelTitle                  *ProductForAdminModelTitle   `protobuf:"bytes,22,opt,name=model_title,json=modelTitle,proto3" json:"model_title,omitempty"`
	ModelType                   *ProductForAdminModelType    `protobuf:"bytes,23,opt,name=model_type,json=modelType,proto3" json:"model_type,omitempty"`
	PhotoModel                  *ProductForAdminPhotoModel   `protobuf:"bytes,24,opt,name=photo_model,json=photoModel,proto3" json:"photo_model,omitempty"`
	PillingGrade                *string                      `protobuf:"bytes,25,opt,name=pilling_grade,json=pillingGrade,proto3,oneof" json:"pilling_grade,omitempty"`
	PreorderPlannedDeliveryFrom *string                      `protobuf:"bytes,26,opt,name=preorder_planned_delivery_from,json=preorderPlannedDeliveryFrom,proto3,oneof" json:"preorder_planned_delivery_from,omitempty"`
	PreorderPlannedDeliveryTo   *string                      `protobuf:"bytes,27,opt,name=preorder_planned_delivery_to,json=preorderPlannedDeliveryTo,proto3,oneof" json:"preorder_planned_delivery_to,omitempty"`
	Price                       *string                      `protobuf:"bytes,28,opt,name=price,proto3,oneof" json:"price,omitempty"`
	PriceDiscount               *string                      `protobuf:"bytes,29,opt,name=price_discount,json=priceDiscount,proto3,oneof" json:"price_discount,omitempty"`
	RecommendedProducts         *string                      `protobuf:"bytes,30,opt,name=recommended_products,json=recommendedProducts,proto3,oneof" json:"recommended_products,omitempty"`
	RelatedProducts             *string                      `protobuf:"bytes,31,opt,name=related_products,json=relatedProducts,proto3,oneof" json:"related_products,omitempty"`
	ServiceRu                   *string                      `protobuf:"bytes,32,opt,name=service_ru,json=serviceRu,proto3,oneof" json:"service_ru,omitempty"`
	SizesHelpRu                 *string                      `protobuf:"bytes,33,opt,name=sizes_help_ru,json=sizesHelpRu,proto3,oneof" json:"sizes_help_ru,omitempty"`
	Slug                        *string                      `protobuf:"bytes,34,opt,name=slug,proto3,oneof" json:"slug,omitempty"`
	State                       *int32                       `protobuf:"varint,35,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile                 *int32                       `protobuf:"varint,36,opt,name=state_mobile,json=stateMobile,proto3,oneof" json:"state_mobile,omitempty"`
	TemperatureRu               *string                      `protobuf:"bytes,37,opt,name=temperature_ru,json=temperatureRu,proto3,oneof" json:"temperature_ru,omitempty"`
	SuperModelTitleRu           *string                      `protobuf:"bytes,38,opt,name=super_model_title_ru,json=superModelTitleRu,proto3,oneof" json:"super_model_title_ru,omitempty"`
	Videos                      []*ProductForAdminVideos     `protobuf:"bytes,39,rep,name=videos,proto3" json:"videos,omitempty"`
}

func (x *ProductForAdmin) Reset() {
	*x = ProductForAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductForAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductForAdmin) ProtoMessage() {}

func (x *ProductForAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductForAdmin.ProtoReflect.Descriptor instead.
func (*ProductForAdmin) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{85}
}

func (x *ProductForAdmin) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *ProductForAdmin) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *ProductForAdmin) GetCategories() string {
	if x != nil && x.Categories != nil {
		return *x.Categories
	}
	return ""
}

func (x *ProductForAdmin) GetCompressibility() int32 {
	if x != nil {
		return x.Compressibility
	}
	return 0
}

func (x *ProductForAdmin) GetCustomTag() string {
	if x != nil && x.CustomTag != nil {
		return *x.CustomTag
	}
	return ""
}

func (x *ProductForAdmin) GetDescriptionRu() string {
	if x != nil && x.DescriptionRu != nil {
		return *x.DescriptionRu
	}
	return ""
}

func (x *ProductForAdmin) GetDisableSendMail() bool {
	if x != nil {
		return x.DisableSendMail
	}
	return false
}

func (x *ProductForAdmin) GetFashion() string {
	if x != nil && x.Fashion != nil {
		return *x.Fashion
	}
	return ""
}

func (x *ProductForAdmin) GetFashionStylist() string {
	if x != nil && x.FashionStylist != nil {
		return *x.FashionStylist
	}
	return ""
}

func (x *ProductForAdmin) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *ProductForAdmin) GetGoogleCategoryCode() string {
	if x != nil && x.GoogleCategoryCode != nil {
		return *x.GoogleCategoryCode
	}
	return ""
}

func (x *ProductForAdmin) GetImages() *ProductForAdminImages {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ProductForAdmin) GetIsCommission() bool {
	if x != nil {
		return x.IsCommission
	}
	return false
}

func (x *ProductForAdmin) GetIsOfflineShipmentAvailable() bool {
	if x != nil {
		return x.IsOfflineShipmentAvailable
	}
	return false
}

func (x *ProductForAdmin) GetIsPreorderAvailable() bool {
	if x != nil {
		return x.IsPreorderAvailable
	}
	return false
}

func (x *ProductForAdmin) GetIsPresent() bool {
	if x != nil {
		return x.IsPresent
	}
	return false
}

func (x *ProductForAdmin) GetIsSampleSale() bool {
	if x != nil {
		return x.IsSampleSale
	}
	return false
}

func (x *ProductForAdmin) GetMainCategory() *ProductForAdminMainCategory {
	if x != nil {
		return x.MainCategory
	}
	return nil
}

func (x *ProductForAdmin) GetMaterial() *ProductForAdminMaterial {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *ProductForAdmin) GetModelParametersRu() string {
	if x != nil && x.ModelParametersRu != nil {
		return *x.ModelParametersRu
	}
	return ""
}

func (x *ProductForAdmin) GetModelSizesRu() string {
	if x != nil && x.ModelSizesRu != nil {
		return *x.ModelSizesRu
	}
	return ""
}

func (x *ProductForAdmin) GetModelTitle() *ProductForAdminModelTitle {
	if x != nil {
		return x.ModelTitle
	}
	return nil
}

func (x *ProductForAdmin) GetModelType() *ProductForAdminModelType {
	if x != nil {
		return x.ModelType
	}
	return nil
}

func (x *ProductForAdmin) GetPhotoModel() *ProductForAdminPhotoModel {
	if x != nil {
		return x.PhotoModel
	}
	return nil
}

func (x *ProductForAdmin) GetPillingGrade() string {
	if x != nil && x.PillingGrade != nil {
		return *x.PillingGrade
	}
	return ""
}

func (x *ProductForAdmin) GetPreorderPlannedDeliveryFrom() string {
	if x != nil && x.PreorderPlannedDeliveryFrom != nil {
		return *x.PreorderPlannedDeliveryFrom
	}
	return ""
}

func (x *ProductForAdmin) GetPreorderPlannedDeliveryTo() string {
	if x != nil && x.PreorderPlannedDeliveryTo != nil {
		return *x.PreorderPlannedDeliveryTo
	}
	return ""
}

func (x *ProductForAdmin) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

func (x *ProductForAdmin) GetPriceDiscount() string {
	if x != nil && x.PriceDiscount != nil {
		return *x.PriceDiscount
	}
	return ""
}

func (x *ProductForAdmin) GetRecommendedProducts() string {
	if x != nil && x.RecommendedProducts != nil {
		return *x.RecommendedProducts
	}
	return ""
}

func (x *ProductForAdmin) GetRelatedProducts() string {
	if x != nil && x.RelatedProducts != nil {
		return *x.RelatedProducts
	}
	return ""
}

func (x *ProductForAdmin) GetServiceRu() string {
	if x != nil && x.ServiceRu != nil {
		return *x.ServiceRu
	}
	return ""
}

func (x *ProductForAdmin) GetSizesHelpRu() string {
	if x != nil && x.SizesHelpRu != nil {
		return *x.SizesHelpRu
	}
	return ""
}

func (x *ProductForAdmin) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *ProductForAdmin) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *ProductForAdmin) GetStateMobile() int32 {
	if x != nil && x.StateMobile != nil {
		return *x.StateMobile
	}
	return 0
}

func (x *ProductForAdmin) GetTemperatureRu() string {
	if x != nil && x.TemperatureRu != nil {
		return *x.TemperatureRu
	}
	return ""
}

func (x *ProductForAdmin) GetSuperModelTitleRu() string {
	if x != nil && x.SuperModelTitleRu != nil {
		return *x.SuperModelTitleRu
	}
	return ""
}

func (x *ProductForAdmin) GetVideos() []*ProductForAdminVideos {
	if x != nil {
		return x.Videos
	}
	return nil
}

type GetProductForAdminByGUIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string           `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *ProductForAdmin `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64            `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error         `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetProductForAdminByGUIDResponse) Reset() {
	*x = GetProductForAdminByGUIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductForAdminByGUIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductForAdminByGUIDResponse) ProtoMessage() {}

func (x *GetProductForAdminByGUIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductForAdminByGUIDResponse.ProtoReflect.Descriptor instead.
func (*GetProductForAdminByGUIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{86}
}

func (x *GetProductForAdminByGUIDResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetProductForAdminByGUIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductForAdminByGUIDResponse) GetData() *ProductForAdmin {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetProductForAdminByGUIDResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductForAdminByGUIDResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type UpdateProductForAdminModelTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleRu        *string `protobuf:"bytes,1,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	TitleEn        *string `protobuf:"bytes,2,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	TitleShortRu   *string `protobuf:"bytes,3,opt,name=title_short_ru,json=titleShortRu,proto3,oneof" json:"title_short_ru,omitempty"`
	TitleShortVkRu *string `protobuf:"bytes,4,opt,name=title_short_vk_ru,json=titleShortVkRu,proto3,oneof" json:"title_short_vk_ru,omitempty"`
}

func (x *UpdateProductForAdminModelTitle) Reset() {
	*x = UpdateProductForAdminModelTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductForAdminModelTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductForAdminModelTitle) ProtoMessage() {}

func (x *UpdateProductForAdminModelTitle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductForAdminModelTitle.ProtoReflect.Descriptor instead.
func (*UpdateProductForAdminModelTitle) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{87}
}

func (x *UpdateProductForAdminModelTitle) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *UpdateProductForAdminModelTitle) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *UpdateProductForAdminModelTitle) GetTitleShortRu() string {
	if x != nil && x.TitleShortRu != nil {
		return *x.TitleShortRu
	}
	return ""
}

func (x *UpdateProductForAdminModelTitle) GetTitleShortVkRu() string {
	if x != nil && x.TitleShortVkRu != nil {
		return *x.TitleShortVkRu
	}
	return ""
}

type UpdateProductForAdminMainCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *int32  `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Slug    *string `protobuf:"bytes,2,opt,name=slug,proto3,oneof" json:"slug,omitempty"`
	TitleRu *string `protobuf:"bytes,3,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
}

func (x *UpdateProductForAdminMainCategory) Reset() {
	*x = UpdateProductForAdminMainCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductForAdminMainCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductForAdminMainCategory) ProtoMessage() {}

func (x *UpdateProductForAdminMainCategory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductForAdminMainCategory.ProtoReflect.Descriptor instead.
func (*UpdateProductForAdminMainCategory) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{88}
}

func (x *UpdateProductForAdminMainCategory) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *UpdateProductForAdminMainCategory) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *UpdateProductForAdminMainCategory) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

type UpdateProductForAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories                  *string                            `protobuf:"bytes,1,opt,name=categories,proto3,oneof" json:"categories,omitempty"`
	Compressibility             *int32                             `protobuf:"varint,2,opt,name=compressibility,proto3,oneof" json:"compressibility,omitempty"`
	CustomTag                   *string                            `protobuf:"bytes,3,opt,name=custom_tag,json=customTag,proto3,oneof" json:"custom_tag,omitempty"`
	DescriptionRu               *string                            `protobuf:"bytes,4,opt,name=description_ru,json=descriptionRu,proto3,oneof" json:"description_ru,omitempty"`
	DisableSendMail             *bool                              `protobuf:"varint,5,opt,name=disable_send_mail,json=disableSendMail,proto3,oneof" json:"disable_send_mail,omitempty"`
	Fashion                     *string                            `protobuf:"bytes,6,opt,name=fashion,proto3,oneof" json:"fashion,omitempty"`
	FashionStylist              *string                            `protobuf:"bytes,7,opt,name=fashion_stylist,json=fashionStylist,proto3,oneof" json:"fashion_stylist,omitempty"`
	GoogleCategoryCode          *string                            `protobuf:"bytes,8,opt,name=google_category_code,json=googleCategoryCode,proto3,oneof" json:"google_category_code,omitempty"`
	Images                      *ProductForAdminImages             `protobuf:"bytes,9,opt,name=images,proto3,oneof" json:"images,omitempty"`
	IsCommission                *bool                              `protobuf:"varint,10,opt,name=is_commission,json=isCommission,proto3,oneof" json:"is_commission,omitempty"`
	MainCategory                *UpdateProductForAdminMainCategory `protobuf:"bytes,11,opt,name=main_category,json=mainCategory,proto3,oneof" json:"main_category,omitempty"`
	Material                    *ProductForAdminMaterial           `protobuf:"bytes,12,opt,name=material,proto3,oneof" json:"material,omitempty"`
	ModelParametersRu           *string                            `protobuf:"bytes,13,opt,name=model_parameters_ru,json=modelParametersRu,proto3,oneof" json:"model_parameters_ru,omitempty"`
	ModelSizesRu                *string                            `protobuf:"bytes,14,opt,name=model_sizes_ru,json=modelSizesRu,proto3,oneof" json:"model_sizes_ru,omitempty"`
	ModelTitle                  *UpdateProductForAdminModelTitle   `protobuf:"bytes,15,opt,name=model_title,json=modelTitle,proto3,oneof" json:"model_title,omitempty"`
	ModelType                   *ProductForAdminModelType          `protobuf:"bytes,16,opt,name=model_type,json=modelType,proto3,oneof" json:"model_type,omitempty"`
	PhotoModel                  *ProductForAdminPhotoModel         `protobuf:"bytes,17,opt,name=photo_model,json=photoModel,proto3,oneof" json:"photo_model,omitempty"`
	PreorderPlannedDeliveryFrom *string                            `protobuf:"bytes,18,opt,name=preorder_planned_delivery_from,json=preorderPlannedDeliveryFrom,proto3,oneof" json:"preorder_planned_delivery_from,omitempty"`
	PreorderPlannedDeliveryTo   *string                            `protobuf:"bytes,19,opt,name=preorder_planned_delivery_to,json=preorderPlannedDeliveryTo,proto3,oneof" json:"preorder_planned_delivery_to,omitempty"`
	RecommendedProducts         *string                            `protobuf:"bytes,20,opt,name=recommended_products,json=recommendedProducts,proto3,oneof" json:"recommended_products,omitempty"`
	RelatedProducts             *string                            `protobuf:"bytes,21,opt,name=related_products,json=relatedProducts,proto3,oneof" json:"related_products,omitempty"`
	ServiceRu                   *string                            `protobuf:"bytes,22,opt,name=service_ru,json=serviceRu,proto3,oneof" json:"service_ru,omitempty"`
	SizesHelpRu                 *string                            `protobuf:"bytes,23,opt,name=sizes_help_ru,json=sizesHelpRu,proto3,oneof" json:"sizes_help_ru,omitempty"`
	State                       *int32                             `protobuf:"varint,24,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile                 *int32                             `protobuf:"varint,25,opt,name=state_mobile,json=stateMobile,proto3,oneof" json:"state_mobile,omitempty"`
	TemperatureRu               *string                            `protobuf:"bytes,26,opt,name=temperature_ru,json=temperatureRu,proto3,oneof" json:"temperature_ru,omitempty"`
	Videos                      []*ProductForAdminVideos           `protobuf:"bytes,27,rep,name=videos,proto3" json:"videos,omitempty"`
}

func (x *UpdateProductForAdmin) Reset() {
	*x = UpdateProductForAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductForAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductForAdmin) ProtoMessage() {}

func (x *UpdateProductForAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductForAdmin.ProtoReflect.Descriptor instead.
func (*UpdateProductForAdmin) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{89}
}

func (x *UpdateProductForAdmin) GetCategories() string {
	if x != nil && x.Categories != nil {
		return *x.Categories
	}
	return ""
}

func (x *UpdateProductForAdmin) GetCompressibility() int32 {
	if x != nil && x.Compressibility != nil {
		return *x.Compressibility
	}
	return 0
}

func (x *UpdateProductForAdmin) GetCustomTag() string {
	if x != nil && x.CustomTag != nil {
		return *x.CustomTag
	}
	return ""
}

func (x *UpdateProductForAdmin) GetDescriptionRu() string {
	if x != nil && x.DescriptionRu != nil {
		return *x.DescriptionRu
	}
	return ""
}

func (x *UpdateProductForAdmin) GetDisableSendMail() bool {
	if x != nil && x.DisableSendMail != nil {
		return *x.DisableSendMail
	}
	return false
}

func (x *UpdateProductForAdmin) GetFashion() string {
	if x != nil && x.Fashion != nil {
		return *x.Fashion
	}
	return ""
}

func (x *UpdateProductForAdmin) GetFashionStylist() string {
	if x != nil && x.FashionStylist != nil {
		return *x.FashionStylist
	}
	return ""
}

func (x *UpdateProductForAdmin) GetGoogleCategoryCode() string {
	if x != nil && x.GoogleCategoryCode != nil {
		return *x.GoogleCategoryCode
	}
	return ""
}

func (x *UpdateProductForAdmin) GetImages() *ProductForAdminImages {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *UpdateProductForAdmin) GetIsCommission() bool {
	if x != nil && x.IsCommission != nil {
		return *x.IsCommission
	}
	return false
}

func (x *UpdateProductForAdmin) GetMainCategory() *UpdateProductForAdminMainCategory {
	if x != nil {
		return x.MainCategory
	}
	return nil
}

func (x *UpdateProductForAdmin) GetMaterial() *ProductForAdminMaterial {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *UpdateProductForAdmin) GetModelParametersRu() string {
	if x != nil && x.ModelParametersRu != nil {
		return *x.ModelParametersRu
	}
	return ""
}

func (x *UpdateProductForAdmin) GetModelSizesRu() string {
	if x != nil && x.ModelSizesRu != nil {
		return *x.ModelSizesRu
	}
	return ""
}

func (x *UpdateProductForAdmin) GetModelTitle() *UpdateProductForAdminModelTitle {
	if x != nil {
		return x.ModelTitle
	}
	return nil
}

func (x *UpdateProductForAdmin) GetModelType() *ProductForAdminModelType {
	if x != nil {
		return x.ModelType
	}
	return nil
}

func (x *UpdateProductForAdmin) GetPhotoModel() *ProductForAdminPhotoModel {
	if x != nil {
		return x.PhotoModel
	}
	return nil
}

func (x *UpdateProductForAdmin) GetPreorderPlannedDeliveryFrom() string {
	if x != nil && x.PreorderPlannedDeliveryFrom != nil {
		return *x.PreorderPlannedDeliveryFrom
	}
	return ""
}

func (x *UpdateProductForAdmin) GetPreorderPlannedDeliveryTo() string {
	if x != nil && x.PreorderPlannedDeliveryTo != nil {
		return *x.PreorderPlannedDeliveryTo
	}
	return ""
}

func (x *UpdateProductForAdmin) GetRecommendedProducts() string {
	if x != nil && x.RecommendedProducts != nil {
		return *x.RecommendedProducts
	}
	return ""
}

func (x *UpdateProductForAdmin) GetRelatedProducts() string {
	if x != nil && x.RelatedProducts != nil {
		return *x.RelatedProducts
	}
	return ""
}

func (x *UpdateProductForAdmin) GetServiceRu() string {
	if x != nil && x.ServiceRu != nil {
		return *x.ServiceRu
	}
	return ""
}

func (x *UpdateProductForAdmin) GetSizesHelpRu() string {
	if x != nil && x.SizesHelpRu != nil {
		return *x.SizesHelpRu
	}
	return ""
}

func (x *UpdateProductForAdmin) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *UpdateProductForAdmin) GetStateMobile() int32 {
	if x != nil && x.StateMobile != nil {
		return *x.StateMobile
	}
	return 0
}

func (x *UpdateProductForAdmin) GetTemperatureRu() string {
	if x != nil && x.TemperatureRu != nil {
		return *x.TemperatureRu
	}
	return ""
}

func (x *UpdateProductForAdmin) GetVideos() []*ProductForAdminVideos {
	if x != nil {
		return x.Videos
	}
	return nil
}

type SetNullProductForAdminImages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail   *bool `protobuf:"varint,1,opt,name=detail,proto3,oneof" json:"detail,omitempty"`
	Ghost    *bool `protobuf:"varint,2,opt,name=ghost,proto3,oneof" json:"ghost,omitempty"`
	Popup    *bool `protobuf:"varint,4,opt,name=popup,proto3,oneof" json:"popup,omitempty"`
	Square   *bool `protobuf:"varint,5,opt,name=square,proto3,oneof" json:"square,omitempty"`
	General  *bool `protobuf:"varint,6,opt,name=general,proto3,oneof" json:"general,omitempty"`
	Headless *bool `protobuf:"varint,7,opt,name=headless,proto3,oneof" json:"headless,omitempty"`
	Xl       *bool `protobuf:"varint,8,opt,name=xl,proto3,oneof" json:"xl,omitempty"`
}

func (x *SetNullProductForAdminImages) Reset() {
	*x = SetNullProductForAdminImages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullProductForAdminImages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullProductForAdminImages) ProtoMessage() {}

func (x *SetNullProductForAdminImages) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullProductForAdminImages.ProtoReflect.Descriptor instead.
func (*SetNullProductForAdminImages) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{90}
}

func (x *SetNullProductForAdminImages) GetDetail() bool {
	if x != nil && x.Detail != nil {
		return *x.Detail
	}
	return false
}

func (x *SetNullProductForAdminImages) GetGhost() bool {
	if x != nil && x.Ghost != nil {
		return *x.Ghost
	}
	return false
}

func (x *SetNullProductForAdminImages) GetPopup() bool {
	if x != nil && x.Popup != nil {
		return *x.Popup
	}
	return false
}

func (x *SetNullProductForAdminImages) GetSquare() bool {
	if x != nil && x.Square != nil {
		return *x.Square
	}
	return false
}

func (x *SetNullProductForAdminImages) GetGeneral() bool {
	if x != nil && x.General != nil {
		return *x.General
	}
	return false
}

func (x *SetNullProductForAdminImages) GetHeadless() bool {
	if x != nil && x.Headless != nil {
		return *x.Headless
	}
	return false
}

func (x *SetNullProductForAdminImages) GetXl() bool {
	if x != nil && x.Xl != nil {
		return *x.Xl
	}
	return false
}

type SetNullProductForAdminMainCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug    *bool `protobuf:"varint,2,opt,name=slug,proto3,oneof" json:"slug,omitempty"`
	TitleRu *bool `protobuf:"varint,3,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
}

func (x *SetNullProductForAdminMainCategory) Reset() {
	*x = SetNullProductForAdminMainCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullProductForAdminMainCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullProductForAdminMainCategory) ProtoMessage() {}

func (x *SetNullProductForAdminMainCategory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullProductForAdminMainCategory.ProtoReflect.Descriptor instead.
func (*SetNullProductForAdminMainCategory) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{91}
}

func (x *SetNullProductForAdminMainCategory) GetSlug() bool {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return false
}

func (x *SetNullProductForAdminMainCategory) GetTitleRu() bool {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return false
}

type SetNullProductForAdminMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescriptionRu  *bool `protobuf:"varint,1,opt,name=description_ru,json=descriptionRu,proto3,oneof" json:"description_ru,omitempty"`
	TextileTitleRu *bool `protobuf:"varint,2,opt,name=textile_title_ru,json=textileTitleRu,proto3,oneof" json:"textile_title_ru,omitempty"`
}

func (x *SetNullProductForAdminMaterial) Reset() {
	*x = SetNullProductForAdminMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullProductForAdminMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullProductForAdminMaterial) ProtoMessage() {}

func (x *SetNullProductForAdminMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullProductForAdminMaterial.ProtoReflect.Descriptor instead.
func (*SetNullProductForAdminMaterial) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{92}
}

func (x *SetNullProductForAdminMaterial) GetDescriptionRu() bool {
	if x != nil && x.DescriptionRu != nil {
		return *x.DescriptionRu
	}
	return false
}

func (x *SetNullProductForAdminMaterial) GetTextileTitleRu() bool {
	if x != nil && x.TextileTitleRu != nil {
		return *x.TextileTitleRu
	}
	return false
}

type SetNullProductForAdminModelTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleEn        *bool `protobuf:"varint,1,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	TitleShortRu   *bool `protobuf:"varint,2,opt,name=title_short_ru,json=titleShortRu,proto3,oneof" json:"title_short_ru,omitempty"`
	TitleShortVkRu *bool `protobuf:"varint,3,opt,name=title_short_vk_ru,json=titleShortVkRu,proto3,oneof" json:"title_short_vk_ru,omitempty"`
}

func (x *SetNullProductForAdminModelTitle) Reset() {
	*x = SetNullProductForAdminModelTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullProductForAdminModelTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullProductForAdminModelTitle) ProtoMessage() {}

func (x *SetNullProductForAdminModelTitle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullProductForAdminModelTitle.ProtoReflect.Descriptor instead.
func (*SetNullProductForAdminModelTitle) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{93}
}

func (x *SetNullProductForAdminModelTitle) GetTitleEn() bool {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return false
}

func (x *SetNullProductForAdminModelTitle) GetTitleShortRu() bool {
	if x != nil && x.TitleShortRu != nil {
		return *x.TitleShortRu
	}
	return false
}

func (x *SetNullProductForAdminModelTitle) GetTitleShortVkRu() bool {
	if x != nil && x.TitleShortVkRu != nil {
		return *x.TitleShortVkRu
	}
	return false
}

type SetNullProductForAdminModelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *bool `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (x *SetNullProductForAdminModelType) Reset() {
	*x = SetNullProductForAdminModelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullProductForAdminModelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullProductForAdminModelType) ProtoMessage() {}

func (x *SetNullProductForAdminModelType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullProductForAdminModelType.ProtoReflect.Descriptor instead.
func (*SetNullProductForAdminModelType) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{94}
}

func (x *SetNullProductForAdminModelType) GetId() bool {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return false
}

type SetNullProductForAdminPhotoModelDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *bool `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Growth    *bool `protobuf:"varint,2,opt,name=growth,proto3,oneof" json:"growth,omitempty"`
	Bust      *bool `protobuf:"varint,3,opt,name=bust,proto3,oneof" json:"bust,omitempty"`
	Hips      *bool `protobuf:"varint,4,opt,name=hips,proto3,oneof" json:"hips,omitempty"`
	Waist     *bool `protobuf:"varint,5,opt,name=waist,proto3,oneof" json:"waist,omitempty"`
	UseSizeRu *bool `protobuf:"varint,6,opt,name=use_size_ru,json=useSizeRu,proto3,oneof" json:"use_size_ru,omitempty"`
}

func (x *SetNullProductForAdminPhotoModelDescription) Reset() {
	*x = SetNullProductForAdminPhotoModelDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullProductForAdminPhotoModelDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullProductForAdminPhotoModelDescription) ProtoMessage() {}

func (x *SetNullProductForAdminPhotoModelDescription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullProductForAdminPhotoModelDescription.ProtoReflect.Descriptor instead.
func (*SetNullProductForAdminPhotoModelDescription) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{95}
}

func (x *SetNullProductForAdminPhotoModelDescription) GetId() bool {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return false
}

func (x *SetNullProductForAdminPhotoModelDescription) GetGrowth() bool {
	if x != nil && x.Growth != nil {
		return *x.Growth
	}
	return false
}

func (x *SetNullProductForAdminPhotoModelDescription) GetBust() bool {
	if x != nil && x.Bust != nil {
		return *x.Bust
	}
	return false
}

func (x *SetNullProductForAdminPhotoModelDescription) GetHips() bool {
	if x != nil && x.Hips != nil {
		return *x.Hips
	}
	return false
}

func (x *SetNullProductForAdminPhotoModelDescription) GetWaist() bool {
	if x != nil && x.Waist != nil {
		return *x.Waist
	}
	return false
}

func (x *SetNullProductForAdminPhotoModelDescription) GetUseSizeRu() bool {
	if x != nil && x.UseSizeRu != nil {
		return *x.UseSizeRu
	}
	return false
}

type SetNullProductForAdminPhotoModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Standard *SetNullProductForAdminPhotoModelDescription `protobuf:"bytes,1,opt,name=standard,proto3,oneof" json:"standard,omitempty"`
	Xl       *SetNullProductForAdminPhotoModelDescription `protobuf:"bytes,2,opt,name=xl,proto3,oneof" json:"xl,omitempty"`
}

func (x *SetNullProductForAdminPhotoModel) Reset() {
	*x = SetNullProductForAdminPhotoModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullProductForAdminPhotoModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullProductForAdminPhotoModel) ProtoMessage() {}

func (x *SetNullProductForAdminPhotoModel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullProductForAdminPhotoModel.ProtoReflect.Descriptor instead.
func (*SetNullProductForAdminPhotoModel) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{96}
}

func (x *SetNullProductForAdminPhotoModel) GetStandard() *SetNullProductForAdminPhotoModelDescription {
	if x != nil {
		return x.Standard
	}
	return nil
}

func (x *SetNullProductForAdminPhotoModel) GetXl() *SetNullProductForAdminPhotoModelDescription {
	if x != nil {
		return x.Xl
	}
	return nil
}

type SetNullProductForAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories                  *bool                               `protobuf:"varint,1,opt,name=categories,proto3,oneof" json:"categories,omitempty"`
	CustomTag                   *bool                               `protobuf:"varint,2,opt,name=custom_tag,json=customTag,proto3,oneof" json:"custom_tag,omitempty"`
	DescriptionRu               *bool                               `protobuf:"varint,3,opt,name=description_ru,json=descriptionRu,proto3,oneof" json:"description_ru,omitempty"`
	Fashion                     *bool                               `protobuf:"varint,4,opt,name=fashion,proto3,oneof" json:"fashion,omitempty"`
	FashionStylist              *bool                               `protobuf:"varint,5,opt,name=fashion_stylist,json=fashionStylist,proto3,oneof" json:"fashion_stylist,omitempty"`
	GoogleCategoryCode          *bool                               `protobuf:"varint,6,opt,name=google_category_code,json=googleCategoryCode,proto3,oneof" json:"google_category_code,omitempty"`
	Images                      *SetNullProductForAdminImages       `protobuf:"bytes,7,opt,name=images,proto3,oneof" json:"images,omitempty"`
	MainCategory                *SetNullProductForAdminMainCategory `protobuf:"bytes,8,opt,name=main_category,json=mainCategory,proto3,oneof" json:"main_category,omitempty"`
	Material                    *SetNullProductForAdminMaterial     `protobuf:"bytes,9,opt,name=material,proto3,oneof" json:"material,omitempty"`
	ModelParametersRu           *bool                               `protobuf:"varint,10,opt,name=model_parameters_ru,json=modelParametersRu,proto3,oneof" json:"model_parameters_ru,omitempty"`
	ModelSizesRu                *bool                               `protobuf:"varint,11,opt,name=model_sizes_ru,json=modelSizesRu,proto3,oneof" json:"model_sizes_ru,omitempty"`
	ModelTitle                  *SetNullProductForAdminModelTitle   `protobuf:"bytes,12,opt,name=model_title,json=modelTitle,proto3,oneof" json:"model_title,omitempty"`
	ModelType                   *SetNullProductForAdminModelType    `protobuf:"bytes,13,opt,name=model_type,json=modelType,proto3,oneof" json:"model_type,omitempty"`
	PhotoModel                  *SetNullProductForAdminPhotoModel   `protobuf:"bytes,14,opt,name=photo_model,json=photoModel,proto3,oneof" json:"photo_model,omitempty"`
	PreorderPlannedDeliveryFrom *bool                               `protobuf:"varint,15,opt,name=preorder_planned_delivery_from,json=preorderPlannedDeliveryFrom,proto3,oneof" json:"preorder_planned_delivery_from,omitempty"`
	PreorderPlannedDeliveryTo   *bool                               `protobuf:"varint,16,opt,name=preorder_planned_delivery_to,json=preorderPlannedDeliveryTo,proto3,oneof" json:"preorder_planned_delivery_to,omitempty"`
	RecommendedProducts         *bool                               `protobuf:"varint,17,opt,name=recommended_products,json=recommendedProducts,proto3,oneof" json:"recommended_products,omitempty"`
	RelatedProducts             *bool                               `protobuf:"varint,18,opt,name=related_products,json=relatedProducts,proto3,oneof" json:"related_products,omitempty"`
	ServiceRu                   *bool                               `protobuf:"varint,19,opt,name=service_ru,json=serviceRu,proto3,oneof" json:"service_ru,omitempty"`
	SizesHelpRu                 *bool                               `protobuf:"varint,20,opt,name=sizes_help_ru,json=sizesHelpRu,proto3,oneof" json:"sizes_help_ru,omitempty"`
	State                       *bool                               `protobuf:"varint,21,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile                 *bool                               `protobuf:"varint,22,opt,name=state_mobile,json=stateMobile,proto3,oneof" json:"state_mobile,omitempty"`
	TemperatureRu               *bool                               `protobuf:"varint,23,opt,name=temperature_ru,json=temperatureRu,proto3,oneof" json:"temperature_ru,omitempty"`
	Videos                      *bool                               `protobuf:"varint,24,opt,name=videos,proto3,oneof" json:"videos,omitempty"`
}

func (x *SetNullProductForAdmin) Reset() {
	*x = SetNullProductForAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullProductForAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullProductForAdmin) ProtoMessage() {}

func (x *SetNullProductForAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullProductForAdmin.ProtoReflect.Descriptor instead.
func (*SetNullProductForAdmin) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{97}
}

func (x *SetNullProductForAdmin) GetCategories() bool {
	if x != nil && x.Categories != nil {
		return *x.Categories
	}
	return false
}

func (x *SetNullProductForAdmin) GetCustomTag() bool {
	if x != nil && x.CustomTag != nil {
		return *x.CustomTag
	}
	return false
}

func (x *SetNullProductForAdmin) GetDescriptionRu() bool {
	if x != nil && x.DescriptionRu != nil {
		return *x.DescriptionRu
	}
	return false
}

func (x *SetNullProductForAdmin) GetFashion() bool {
	if x != nil && x.Fashion != nil {
		return *x.Fashion
	}
	return false
}

func (x *SetNullProductForAdmin) GetFashionStylist() bool {
	if x != nil && x.FashionStylist != nil {
		return *x.FashionStylist
	}
	return false
}

func (x *SetNullProductForAdmin) GetGoogleCategoryCode() bool {
	if x != nil && x.GoogleCategoryCode != nil {
		return *x.GoogleCategoryCode
	}
	return false
}

func (x *SetNullProductForAdmin) GetImages() *SetNullProductForAdminImages {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *SetNullProductForAdmin) GetMainCategory() *SetNullProductForAdminMainCategory {
	if x != nil {
		return x.MainCategory
	}
	return nil
}

func (x *SetNullProductForAdmin) GetMaterial() *SetNullProductForAdminMaterial {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *SetNullProductForAdmin) GetModelParametersRu() bool {
	if x != nil && x.ModelParametersRu != nil {
		return *x.ModelParametersRu
	}
	return false
}

func (x *SetNullProductForAdmin) GetModelSizesRu() bool {
	if x != nil && x.ModelSizesRu != nil {
		return *x.ModelSizesRu
	}
	return false
}

func (x *SetNullProductForAdmin) GetModelTitle() *SetNullProductForAdminModelTitle {
	if x != nil {
		return x.ModelTitle
	}
	return nil
}

func (x *SetNullProductForAdmin) GetModelType() *SetNullProductForAdminModelType {
	if x != nil {
		return x.ModelType
	}
	return nil
}

func (x *SetNullProductForAdmin) GetPhotoModel() *SetNullProductForAdminPhotoModel {
	if x != nil {
		return x.PhotoModel
	}
	return nil
}

func (x *SetNullProductForAdmin) GetPreorderPlannedDeliveryFrom() bool {
	if x != nil && x.PreorderPlannedDeliveryFrom != nil {
		return *x.PreorderPlannedDeliveryFrom
	}
	return false
}

func (x *SetNullProductForAdmin) GetPreorderPlannedDeliveryTo() bool {
	if x != nil && x.PreorderPlannedDeliveryTo != nil {
		return *x.PreorderPlannedDeliveryTo
	}
	return false
}

func (x *SetNullProductForAdmin) GetRecommendedProducts() bool {
	if x != nil && x.RecommendedProducts != nil {
		return *x.RecommendedProducts
	}
	return false
}

func (x *SetNullProductForAdmin) GetRelatedProducts() bool {
	if x != nil && x.RelatedProducts != nil {
		return *x.RelatedProducts
	}
	return false
}

func (x *SetNullProductForAdmin) GetServiceRu() bool {
	if x != nil && x.ServiceRu != nil {
		return *x.ServiceRu
	}
	return false
}

func (x *SetNullProductForAdmin) GetSizesHelpRu() bool {
	if x != nil && x.SizesHelpRu != nil {
		return *x.SizesHelpRu
	}
	return false
}

func (x *SetNullProductForAdmin) GetState() bool {
	if x != nil && x.State != nil {
		return *x.State
	}
	return false
}

func (x *SetNullProductForAdmin) GetStateMobile() bool {
	if x != nil && x.StateMobile != nil {
		return *x.StateMobile
	}
	return false
}

func (x *SetNullProductForAdmin) GetTemperatureRu() bool {
	if x != nil && x.TemperatureRu != nil {
		return *x.TemperatureRu
	}
	return false
}

func (x *SetNullProductForAdmin) GetVideos() bool {
	if x != nil && x.Videos != nil {
		return *x.Videos
	}
	return false
}

type UpdatesProductForAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid   string                  `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Update *UpdateProductForAdmin  `protobuf:"bytes,2,opt,name=update,proto3,oneof" json:"update,omitempty"`
	Null   *SetNullProductForAdmin `protobuf:"bytes,3,opt,name=null,proto3,oneof" json:"null,omitempty"`
}

func (x *UpdatesProductForAdmin) Reset() {
	*x = UpdatesProductForAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatesProductForAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatesProductForAdmin) ProtoMessage() {}

func (x *UpdatesProductForAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatesProductForAdmin.ProtoReflect.Descriptor instead.
func (*UpdatesProductForAdmin) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{98}
}

func (x *UpdatesProductForAdmin) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *UpdatesProductForAdmin) GetUpdate() *UpdateProductForAdmin {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UpdatesProductForAdmin) GetNull() *SetNullProductForAdmin {
	if x != nil {
		return x.Null
	}
	return nil
}

var File_proto_nomenclature_proto protoreflect.FileDescriptor

var file_proto_nomenclature_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x41, 0x0a, 0x11, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x58, 0x0a, 0x12, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4d, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x22, 0x9b, 0x01, 0x0a,
	0x0a, 0x53, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73,
	0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x65, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x68,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x22, 0xc8, 0x01,
	0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x52, 0x75, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53,
	0x61, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x68, 0x65, 0x78, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x55, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x37, 0x0a, 0x03, 0x41, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x73, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41,
	0x6c, 0x74, 0x52, 0x04, 0x61, 0x6c, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0xa7, 0x04, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x11, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22,
	0xdf, 0x03, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x11, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72,
	0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x22, 0xe0, 0x03, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x03, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52,
	0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x11, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x72, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x75, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x75, 0x6c,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0xe1, 0x03, 0x0a, 0x13, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49, 0x44,
	0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6d,
	0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xb7, 0x06, 0x0a,
	0x0c, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x61, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x0b, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x08, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x45, 0x63, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x05,
	0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x0a, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x77, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x62, 0x75, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x78, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x58, 0x6c, 0x12,
	0x24, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x62, 0x75, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04,
	0x62, 0x75, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x04, 0x68, 0x69, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x78, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x05, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x58, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62,
	0x75, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x61, 0x69, 0x73, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x68, 0x69, 0x70, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x78, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c,
	0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0b, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x22, 0xae, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x22, 0xfe, 0x01, 0x0a, 0x13, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x75, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x68, 0x69, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x78, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x58, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x0e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x75, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x4e, 0x75, 0x6c, 0x6c, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x22, 0xbe, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74,
	0x4e, 0x75, 0x6c, 0x6c, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x22, 0xf7, 0x01, 0x0a, 0x19, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x53, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x47, 0x55, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x22, 0x60, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x82, 0x02,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x3b, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x22,
	0xc5, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x22, 0x86, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc6, 0x01, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65,
	0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbe, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x3c, 0x0a, 0x0c, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x22, 0x8f, 0x02, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x17, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x52, 0x55, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x22, 0xd6, 0x04, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x63,
	0x6f, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x43, 0x6f, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x72, 0x74, 0x41, 0x64, 0x64,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x62, 0x75, 0x79, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x65, 0x66,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x55, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x22, 0xcf, 0x04, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x5f, 0x63, 0x6f, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x43, 0x6f, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x72, 0x74, 0x41,
	0x64, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x62, 0x75, 0x79, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x65, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x55, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xfe, 0x05, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x43, 0x6f, 0x65, 0x66,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x61, 0x72,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x74, 0x41, 0x64, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62,
	0x75, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x04, 0x62, 0x75, 0x79,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0b, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x65, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x10, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x65, 0x74, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x47, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x75, 0x79, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x48, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x4e, 0x75,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x22, 0xb4, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x75, 0x6c,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x82, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x22, 0x7b, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a,
	0x12, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x10, 0x53, 0x65,
	0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xab, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x01, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0xfc,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xba, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x77, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x01, 0x0a, 0x0e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x61, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x61, 0x72,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x22, 0x4a, 0x0a, 0x16, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22,
	0xc1, 0x12, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09,
	0x62, 0x69, 0x74, 0x72, 0x69, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x62, 0x69, 0x74, 0x72, 0x69, 0x78, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x72, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x6d, 0x65,
	0x74, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x72,
	0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x65,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x6e, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x75, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x11,
	0x6d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x75, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x13, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x14, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x69,
	0x73, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x69, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64,
	0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x12,
	0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x6d, 0x65, 0x6e, 0x75, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x48, 0x69,
	0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x36, 0x0a, 0x18, 0x69, 0x73,
	0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73,
	0x48, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x6e, 0x75, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f,
	0x68, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f,
	0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e,
	0x4d, 0x65, 0x6e, 0x75, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x16, 0x52, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x17, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x69, 0x74, 0x72,
	0x69, 0x78, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6c,
	0x75, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x65, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x5f, 0x65, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x5f, 0x72,
	0x75, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x6e, 0x5f, 0x72, 0x75, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x65, 0x6e,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x22, 0xba, 0x12, 0x0a, 0x11, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x69, 0x74,
	0x72, 0x69, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x62, 0x69, 0x74, 0x72, 0x69, 0x78, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x4d, 0x61, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x4d, 0x61, 0x6e, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0c, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6e, 0x52,
	0x75, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0f, 0x52, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x6e, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x11, 0x6d, 0x65, 0x74,
	0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x12, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x17, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13,
	0x52, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x6e, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x73, 0x12, 0x36, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x14, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x73, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x69, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x48, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x12, 0x29, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x6e,
	0x75, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x36, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x68, 0x69,
	0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x48, 0x69, 0x64,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x6e, 0x75, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12,
	0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x48,
	0x69, 0x64, 0x65, 0x49, 0x6e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x19,
	0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c,
	0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e,
	0x75, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x4d, 0x65, 0x6e,
	0x75, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52,
	0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x4f, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x69, 0x78, 0x5f,
	0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x72, 0x75, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x65,
	0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x75, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x72,
	0x75, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x22, 0xef, 0x15, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x69, 0x74, 0x72, 0x69, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x62, 0x69, 0x74, 0x72, 0x69, 0x78,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x0b, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x4d, 0x61, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x4d, 0x61, 0x6e, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0d,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x10,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6e, 0x52, 0x75,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x10, 0x52, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x6e, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x61,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x13, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52,
	0x14, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x6e, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x36, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x15, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48, 0x17, 0x52, 0x0c, 0x69, 0x73,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x18, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x46, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x73, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x19,
	0x52, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x69, 0x73, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1a, 0x52, 0x0d, 0x69,
	0x73, 0x48, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x6d, 0x65, 0x6e, 0x75, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1b, 0x52, 0x0e, 0x69, 0x73,
	0x48, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x6e, 0x75, 0x88, 0x01, 0x01, 0x12,
	0x3b, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x1c, 0x52, 0x14, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d,
	0x65, 0x6e, 0x75, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12,
	0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1d, 0x52, 0x0f, 0x69, 0x73, 0x48, 0x69,
	0x64, 0x65, 0x49, 0x6e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x19, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x1e, 0x52, 0x15, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x57, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x13, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1f, 0x52, 0x10, 0x69, 0x73,
	0x48, 0x69, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x20, 0x52, 0x11, 0x69, 0x73, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e,
	0x4d, 0x65, 0x6e, 0x75, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x21, 0x52, 0x11, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x08, 0x48, 0x22, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1b, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x48, 0x23,
	0x52, 0x17, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52,
	0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x25, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x26, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x0b,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x69, 0x78, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x65, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x5f, 0x65, 0x6e,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x74,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x69, 0x73, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x73, 0x5f,
	0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x69, 0x73, 0x5f,
	0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e,
	0x75, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x1e, 0x0a,
	0x1c, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e,
	0x75, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x0a,
	0x18, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xb9, 0x0c, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x69, 0x74, 0x72, 0x69, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x62, 0x69, 0x74,
	0x72, 0x69, 0x78, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x72, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x07, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x07, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x06, 0x52, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52,
	0x75, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52,
	0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x72, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a,
	0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x52, 0x75,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b,
	0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x45, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x0d, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x5f, 0x72,
	0x75, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0e, 0x52, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x10, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6e, 0x45, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x10,
	0x52, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x11, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x48, 0x12, 0x52, 0x14,
	0x6d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x5f,
	0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x61,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x45, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x14, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x15, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x48, 0x16, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x48, 0x17, 0x52, 0x15, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48, 0x18, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x19, 0x52, 0x0f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x69, 0x78, 0x5f, 0x69, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x65, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x75, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x5f,
	0x65, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x1a,
	0x0a, 0x18, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0xa8,
	0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x75,
	0x6c, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x75,
	0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0xb0, 0x02, 0x0a, 0x12, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x68, 0x69,
	0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65,
	0x6e, 0x75, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x22, 0x84, 0x02, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xb8, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x6d,
	0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52,
	0x75, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x22, 0xc8, 0x01,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0xaa, 0x05, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x14, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x12, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x6f, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x76, 0x61, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x10, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01,
	0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x72, 0x75, 0x22, 0x8f, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72,
	0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x52, 0x75, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x22, 0xa6, 0x02, 0x0a, 0x15,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x05, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05,
	0x70, 0x6f, 0x70, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x78, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x02, 0x78, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x78, 0x6c, 0x22, 0x7c, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x73, 0x6c, 0x75, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x72, 0x75, 0x22, 0x9c, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f,
	0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2a,
	0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x65,
	0x78, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x69, 0x6c, 0x65, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72,
	0x75, 0x22, 0xe7, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6b, 0x5f, 0x72, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x6b,
	0x52, 0x75, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x65, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x72, 0x75, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6b, 0x5f, 0x72, 0x75, 0x22, 0x36, 0x0a, 0x18, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x24, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x62, 0x75, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04,
	0x62, 0x75, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x69, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x68, 0x69, 0x70, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x75, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x68, 0x69, 0x70, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x61, 0x69, 0x73, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x75, 0x22, 0xcd,
	0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x53, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x47, 0x0a, 0x02, 0x78, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x01, 0x52, 0x02, 0x78, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x78, 0x6c, 0x22, 0x49,
	0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x73, 0x52, 0x06, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x73, 0x22, 0xea, 0x11, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x23,
	0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x61, 0x73,
	0x68, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x66, 0x61,
	0x73, 0x68, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x66, 0x61, 0x73, 0x68,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0e, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x14, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x12,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x50, 0x72, 0x65,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53,
	0x61, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x08, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x75, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x72, 0x75, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x73, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x45, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e,
	0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0c, 0x70, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1e, 0x70,
	0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x72,
	0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x19, 0x70,
	0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x72, 0x75, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x48, 0x65,
	0x6c, 0x70, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x12, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x13, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0d, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52,
	0x11, 0x73, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18,
	0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x52, 0x06, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x67,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x75, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x72, 0x75, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x73, 0x5f, 0x72, 0x75, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x70, 0x72,
	0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x1f, 0x0a, 0x1d,
	0x5f, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x73, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x72, 0x75, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6c,
	0x75, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x75,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x22, 0xc8, 0x01, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x72, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x75,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x76, 0x6b, 0x5f, 0x72, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x6b, 0x52, 0x75,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x76, 0x6b, 0x5f, 0x72, 0x75, 0x22, 0x8e, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x22, 0xab, 0x0f, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x66, 0x61, 0x73, 0x68, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0e, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x12, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x48,
	0x08, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x48, 0x0a,
	0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x0b, 0x52, 0x08, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x75,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x72, 0x75,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x73, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x48, 0x0e, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a,
	0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0f, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x10, 0x52, 0x0a, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1e, 0x70, 0x72, 0x65,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x11, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x19, 0x70, 0x72, 0x65,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x68,
	0x65, 0x6c, 0x70, 0x5f, 0x72, 0x75, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0b,
	0x73, 0x69, 0x7a, 0x65, 0x73, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x18, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x75, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0d, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x52, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f,
	0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f,
	0x72, 0x75, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x73, 0x5f, 0x72, 0x75, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x70, 0x72, 0x65, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x5f,
	0x68, 0x65, 0x6c, 0x70, 0x5f, 0x72, 0x75, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x75, 0x22, 0xad, 0x02, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x05, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x05, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x06, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x78, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x06, 0x52, 0x02, 0x78, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x78, 0x6c, 0x22, 0x73, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d,
	0x61, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52,
	0x75, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x22, 0xa3, 0x01, 0x0a, 0x1e, 0x53,
	0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2a, 0x0a,
	0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x65, 0x78,
	0x74, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x69, 0x6c, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75,
	0x22, 0xd3, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x0c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x11, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x76, 0x6b, 0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0e, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x6b, 0x52, 0x75, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x76, 0x6b, 0x5f, 0x72, 0x75, 0x22, 0x3d, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x8f, 0x02, 0x0a, 0x2b, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x75, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x04, 0x62, 0x75, 0x73, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03,
	0x52, 0x04, 0x68, 0x69, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x61, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x05, 0x77, 0x61, 0x69, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x72, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x62, 0x75, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x69, 0x70, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x77, 0x61, 0x69, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x75, 0x22, 0xe2, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x4e,
	0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x5a, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x65,
	0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x02, 0x78, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x01, 0x52, 0x02, 0x78, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x78, 0x6c, 0x22, 0xef, 0x0d, 0x0a,
	0x16, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x01, 0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x07, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x66,
	0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0e, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x12, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x47, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f,
	0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x48, 0x06, 0x52, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0d, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f,
	0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x48, 0x07, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x08, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x72, 0x75, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0a, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x52,
	0x75, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x48, 0x0b, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0a, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x65,
	0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0c, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a,
	0x0b, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x48, 0x0d, 0x52, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1e, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0e, 0x52, 0x1b, 0x70,
	0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x1c, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x19, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x10, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x11, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x12, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x72, 0x75,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x48,
	0x65, 0x6c, 0x70, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x14, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x48, 0x15, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x16, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x48, 0x17, 0x52, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74,
	0x61, 0x67, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f,
	0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x75,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73,
	0x5f, 0x72, 0x75, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x72, 0x75, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x68, 0x65,
	0x6c, 0x70, 0x5f, 0x72, 0x75, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x75, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x22, 0xc1,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74,
	0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x32, 0xd8, 0x01, 0x0a, 0x13, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x2d,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe1, 0x02,
	0x0a, 0x11, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e,
	0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x49, 0x44, 0x1a, 0x27, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x27, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xa7, 0x02, 0x0a, 0x15, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x53, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x12, 0x1e,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x47, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x2d, 0x2e, 0x6e,
	0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x47,
	0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd9, 0x03, 0x0a, 0x12,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x49, 0x44, 0x1a, 0x28, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x28, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x54, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xef, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x52, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e,
	0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x1a, 0x29, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x56, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x29,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xda, 0x02, 0x0a, 0x10, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x1a, 0x26, 0x2e, 0x6e,
	0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x26,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x6b, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xaf, 0x04, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x49, 0x44, 0x1a, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x1a, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54,
	0x6f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xac, 0x02, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x55, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x47, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f,
	0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x2e, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f,
	0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x11, 0x5a, 0x0f, 0x67, 0x6f, 0x2f, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_nomenclature_proto_rawDescOnce sync.Once
	file_proto_nomenclature_proto_rawDescData = file_proto_nomenclature_proto_rawDesc
)

func file_proto_nomenclature_proto_rawDescGZIP() []byte {
	file_proto_nomenclature_proto_rawDescOnce.Do(func() {
		file_proto_nomenclature_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_nomenclature_proto_rawDescData)
	})
	return file_proto_nomenclature_proto_rawDescData
}

var file_proto_nomenclature_proto_msgTypes = make([]protoimpl.MessageInfo, 99)
var file_proto_nomenclature_proto_goTypes = []interface{}{
	(*PaginationRequest)(nil),                           // 0: nomenclature.PaginationRequest
	(*PaginationResponse)(nil),                          // 1: nomenclature.PaginationResponse
	(*Error)(nil),                                       // 2: nomenclature.Error
	(*NomenclatureDescription)(nil),                     // 3: nomenclature.NomenclatureDescription
	(*SuperModel)(nil),                                  // 4: nomenclature.SuperModel
	(*ColorDescription)(nil),                            // 5: nomenclature.ColorDescription
	(*Color)(nil),                                       // 6: nomenclature.Color
	(*Capsules)(nil),                                    // 7: nomenclature.Capsules
	(*Alt)(nil),                                         // 8: nomenclature.Alt
	(*Price)(nil),                                       // 9: nomenclature.Price
	(*Size)(nil),                                        // 10: nomenclature.Size
	(*Maintenance)(nil),                                 // 11: nomenclature.Maintenance
	(*UpdateMaintenance)(nil),                           // 12: nomenclature.UpdateMaintenance
	(*SetNullMaintenance)(nil),                          // 13: nomenclature.SetNullMaintenance
	(*UpdatesMaintenance)(nil),                          // 14: nomenclature.UpdatesMaintenance
	(*MaintenanceithoutID)(nil),                         // 15: nomenclature.MaintenanceithoutID
	(*Nomenclature)(nil),                                // 16: nomenclature.Nomenclature
	(*PhotoModel)(nil),                                  // 17: nomenclature.PhotoModel
	(*UpdatePhotoModel)(nil),                            // 18: nomenclature.UpdatePhotoModel
	(*SetNullPhotoModel)(nil),                           // 19: nomenclature.SetNullPhotoModel
	(*UpdatesPhotoModel)(nil),                           // 20: nomenclature.UpdatesPhotoModel
	(*PhotoModelWithoutID)(nil),                         // 21: nomenclature.PhotoModelWithoutID
	(*DictionarySize)(nil),                              // 22: nomenclature.DictionarySize
	(*UpdateDictionarySize)(nil),                        // 23: nomenclature.UpdateDictionarySize
	(*SetNullDictionarySize)(nil),                       // 24: nomenclature.SetNullDictionarySize
	(*UpdatesDictionarySize)(nil),                       // 25: nomenclature.UpdatesDictionarySize
	(*DictionarySizeWithoutGUID)(nil),                   // 26: nomenclature.DictionarySizeWithoutGUID
	(*GetListRequest)(nil),                              // 27: nomenclature.GetListRequest
	(*GetNomenclatureListResponse)(nil),                 // 28: nomenclature.GetNomenclatureListResponse
	(*GetNomenclatureByArticleRequest)(nil),             // 29: nomenclature.GetNomenclatureByArticleRequest
	(*GetNomenclatureByArticleResponse)(nil),            // 30: nomenclature.GetNomenclatureByArticleResponse
	(*GetPhotoModelListResponse)(nil),                   // 31: nomenclature.GetPhotoModelListResponse
	(*GetByIDRequest)(nil),                              // 32: nomenclature.GetByIDRequest
	(*GetByGUIDRequest)(nil),                            // 33: nomenclature.GetByGUIDRequest
	(*GetPhotoModelByIDResponse)(nil),                   // 34: nomenclature.GetPhotoModelByIDResponse
	(*GetDictionarySizeListResponse)(nil),               // 35: nomenclature.GetDictionarySizeListResponse
	(*GetDictionarySizeByGUIDResponse)(nil),             // 36: nomenclature.GetDictionarySizeByGUIDResponse
	(*GetMaintenanceListResponse)(nil),                  // 37: nomenclature.GetMaintenanceListResponse
	(*GetMaintenanceByIDResponse)(nil),                  // 38: nomenclature.GetMaintenanceByIDResponse
	(*QuickProduct)(nil),                                // 39: nomenclature.QuickProduct
	(*QuickMaintenance)(nil),                            // 40: nomenclature.QuickMaintenance
	(*GetListProductsToMaintenanceResponse)(nil),        // 41: nomenclature.GetListProductsToMaintenanceResponse
	(*QuickProductWithTitleRU)(nil),                     // 42: nomenclature.QuickProductWithTitleRU
	(*ProductOrder)(nil),                                // 43: nomenclature.ProductOrder
	(*ProductOrderWithoutID)(nil),                       // 44: nomenclature.ProductOrderWithoutID
	(*UpdateProductOrder)(nil),                          // 45: nomenclature.UpdateProductOrder
	(*SetNullProductOrder)(nil),                         // 46: nomenclature.SetNullProductOrder
	(*UpdatesProductOrder)(nil),                         // 47: nomenclature.UpdatesProductOrder
	(*GetProductOrderListResponse)(nil),                 // 48: nomenclature.GetProductOrderListResponse
	(*GetProductOrderByIDResponse)(nil),                 // 49: nomenclature.GetProductOrderByIDResponse
	(*ModelType)(nil),                                   // 50: nomenclature.ModelType
	(*ModelTypeWithoutID)(nil),                          // 51: nomenclature.ModelTypeWithoutID
	(*UpdateModelType)(nil),                             // 52: nomenclature.UpdateModelType
	(*SetNullModelType)(nil),                            // 53: nomenclature.SetNullModelType
	(*UpdatesModelType)(nil),                            // 54: nomenclature.UpdatesModelType
	(*GetModelTypeListResponse)(nil),                    // 55: nomenclature.GetModelTypeListResponse
	(*GetModelTypeByIDResponse)(nil),                    // 56: nomenclature.GetModelTypeByIDResponse
	(*ProductFilter)(nil),                               // 57: nomenclature.ProductFilter
	(*GetProductFilterListResponse)(nil),                // 58: nomenclature.GetProductFilterListResponse
	(*CategoryBanner)(nil),                              // 59: nomenclature.CategoryBanner
	(*CategoryBlock)(nil),                               // 60: nomenclature.CategoryBlock
	(*CategoryRelatedProduct)(nil),                      // 61: nomenclature.CategoryRelatedProduct
	(*Category)(nil),                                    // 62: nomenclature.Category
	(*CategoryWithoutID)(nil),                           // 63: nomenclature.CategoryWithoutID
	(*UpdateCategory)(nil),                              // 64: nomenclature.UpdateCategory
	(*SetNullCategory)(nil),                             // 65: nomenclature.SetNullCategory
	(*UpdatesCategory)(nil),                             // 66: nomenclature.UpdatesCategory
	(*CategoryForGetList)(nil),                          // 67: nomenclature.CategoryForGetList
	(*GetCategoryListResponse)(nil),                     // 68: nomenclature.GetCategoryListResponse
	(*GetCategoryByIDResponse)(nil),                     // 69: nomenclature.GetCategoryByIDResponse
	(*ProductsToCategory)(nil),                          // 70: nomenclature.ProductsToCategory
	(*GetProductsToCategoryResponse)(nil),               // 71: nomenclature.GetProductsToCategoryResponse
	(*UpdateProductsToCategoryRequest)(nil),             // 72: nomenclature.UpdateProductsToCategoryRequest
	(*ProductForAdminGetList)(nil),                      // 73: nomenclature.ProductForAdminGetList
	(*GetProductForAdminListResponse)(nil),              // 74: nomenclature.GetProductForAdminListResponse
	(*ProductForAdminColor)(nil),                        // 75: nomenclature.ProductForAdminColor
	(*ProductForAdminImages)(nil),                       // 76: nomenclature.ProductForAdminImages
	(*ProductForAdminMainCategory)(nil),                 // 77: nomenclature.ProductForAdminMainCategory
	(*ProductForAdminMaterial)(nil),                     // 78: nomenclature.ProductForAdminMaterial
	(*ProductForAdminModelTitle)(nil),                   // 79: nomenclature.ProductForAdminModelTitle
	(*ProductForAdminModelType)(nil),                    // 80: nomenclature.ProductForAdminModelType
	(*ProductForAdminPhotoModelDescription)(nil),        // 81: nomenclature.ProductForAdminPhotoModelDescription
	(*ProductForAdminPhotoModel)(nil),                   // 82: nomenclature.ProductForAdminPhotoModel
	(*ProductForAdminVideosThumbs)(nil),                 // 83: nomenclature.ProductForAdminVideosThumbs
	(*ProductForAdminVideos)(nil),                       // 84: nomenclature.ProductForAdminVideos
	(*ProductForAdmin)(nil),                             // 85: nomenclature.ProductForAdmin
	(*GetProductForAdminByGUIDResponse)(nil),            // 86: nomenclature.GetProductForAdminByGUIDResponse
	(*UpdateProductForAdminModelTitle)(nil),             // 87: nomenclature.UpdateProductForAdminModelTitle
	(*UpdateProductForAdminMainCategory)(nil),           // 88: nomenclature.UpdateProductForAdminMainCategory
	(*UpdateProductForAdmin)(nil),                       // 89: nomenclature.UpdateProductForAdmin
	(*SetNullProductForAdminImages)(nil),                // 90: nomenclature.SetNullProductForAdminImages
	(*SetNullProductForAdminMainCategory)(nil),          // 91: nomenclature.SetNullProductForAdminMainCategory
	(*SetNullProductForAdminMaterial)(nil),              // 92: nomenclature.SetNullProductForAdminMaterial
	(*SetNullProductForAdminModelTitle)(nil),            // 93: nomenclature.SetNullProductForAdminModelTitle
	(*SetNullProductForAdminModelType)(nil),             // 94: nomenclature.SetNullProductForAdminModelType
	(*SetNullProductForAdminPhotoModelDescription)(nil), // 95: nomenclature.SetNullProductForAdminPhotoModelDescription
	(*SetNullProductForAdminPhotoModel)(nil),            // 96: nomenclature.SetNullProductForAdminPhotoModel
	(*SetNullProductForAdmin)(nil),                      // 97: nomenclature.SetNullProductForAdmin
	(*UpdatesProductForAdmin)(nil),                      // 98: nomenclature.UpdatesProductForAdmin
}
var file_proto_nomenclature_proto_depIdxs = []int32{
	5,   // 0: nomenclature.Color.color_groups:type_name -> nomenclature.ColorDescription
	3,   // 1: nomenclature.Size.size:type_name -> nomenclature.NomenclatureDescription
	8,   // 2: nomenclature.Size.alts:type_name -> nomenclature.Alt
	9,   // 3: nomenclature.Size.prices:type_name -> nomenclature.Price
	12,  // 4: nomenclature.UpdatesMaintenance.update:type_name -> nomenclature.UpdateMaintenance
	13,  // 5: nomenclature.UpdatesMaintenance.null:type_name -> nomenclature.SetNullMaintenance
	3,   // 6: nomenclature.Nomenclature.fabric:type_name -> nomenclature.NomenclatureDescription
	3,   // 7: nomenclature.Nomenclature.family:type_name -> nomenclature.NomenclatureDescription
	3,   // 8: nomenclature.Nomenclature.color_model:type_name -> nomenclature.NomenclatureDescription
	4,   // 9: nomenclature.Nomenclature.super_model:type_name -> nomenclature.SuperModel
	6,   // 10: nomenclature.Nomenclature.color:type_name -> nomenclature.Color
	7,   // 11: nomenclature.Nomenclature.capsules:type_name -> nomenclature.Capsules
	11,  // 12: nomenclature.Nomenclature.maintenance:type_name -> nomenclature.Maintenance
	10,  // 13: nomenclature.Nomenclature.sizes:type_name -> nomenclature.Size
	18,  // 14: nomenclature.UpdatesPhotoModel.update:type_name -> nomenclature.UpdatePhotoModel
	19,  // 15: nomenclature.UpdatesPhotoModel.null:type_name -> nomenclature.SetNullPhotoModel
	23,  // 16: nomenclature.UpdatesDictionarySize.update:type_name -> nomenclature.UpdateDictionarySize
	24,  // 17: nomenclature.UpdatesDictionarySize.null:type_name -> nomenclature.SetNullDictionarySize
	0,   // 18: nomenclature.GetListRequest.pagination:type_name -> nomenclature.PaginationRequest
	1,   // 19: nomenclature.GetNomenclatureListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,   // 20: nomenclature.GetNomenclatureListResponse.errors:type_name -> nomenclature.Error
	16,  // 21: nomenclature.GetNomenclatureListResponse.data:type_name -> nomenclature.Nomenclature
	16,  // 22: nomenclature.GetNomenclatureByArticleResponse.data:type_name -> nomenclature.Nomenclature
	2,   // 23: nomenclature.GetNomenclatureByArticleResponse.errors:type_name -> nomenclature.Error
	1,   // 24: nomenclature.GetPhotoModelListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,   // 25: nomenclature.GetPhotoModelListResponse.errors:type_name -> nomenclature.Error
	17,  // 26: nomenclature.GetPhotoModelListResponse.data:type_name -> nomenclature.PhotoModel
	17,  // 27: nomenclature.GetPhotoModelByIDResponse.data:type_name -> nomenclature.PhotoModel
	2,   // 28: nomenclature.GetPhotoModelByIDResponse.errors:type_name -> nomenclature.Error
	1,   // 29: nomenclature.GetDictionarySizeListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,   // 30: nomenclature.GetDictionarySizeListResponse.errors:type_name -> nomenclature.Error
	22,  // 31: nomenclature.GetDictionarySizeListResponse.data:type_name -> nomenclature.DictionarySize
	22,  // 32: nomenclature.GetDictionarySizeByGUIDResponse.data:type_name -> nomenclature.DictionarySize
	2,   // 33: nomenclature.GetDictionarySizeByGUIDResponse.errors:type_name -> nomenclature.Error
	1,   // 34: nomenclature.GetMaintenanceListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,   // 35: nomenclature.GetMaintenanceListResponse.errors:type_name -> nomenclature.Error
	11,  // 36: nomenclature.GetMaintenanceListResponse.data:type_name -> nomenclature.Maintenance
	11,  // 37: nomenclature.GetMaintenanceByIDResponse.data:type_name -> nomenclature.Maintenance
	2,   // 38: nomenclature.GetMaintenanceByIDResponse.errors:type_name -> nomenclature.Error
	39,  // 39: nomenclature.QuickMaintenance.products_list:type_name -> nomenclature.QuickProduct
	1,   // 40: nomenclature.GetListProductsToMaintenanceResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,   // 41: nomenclature.GetListProductsToMaintenanceResponse.errors:type_name -> nomenclature.Error
	40,  // 42: nomenclature.GetListProductsToMaintenanceResponse.data:type_name -> nomenclature.QuickMaintenance
	42,  // 43: nomenclature.ProductOrder.product:type_name -> nomenclature.QuickProductWithTitleRU
	42,  // 44: nomenclature.ProductOrderWithoutID.product:type_name -> nomenclature.QuickProductWithTitleRU
	45,  // 45: nomenclature.UpdatesProductOrder.update:type_name -> nomenclature.UpdateProductOrder
	46,  // 46: nomenclature.UpdatesProductOrder.null:type_name -> nomenclature.SetNullProductOrder
	1,   // 47: nomenclature.GetProductOrderListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,   // 48: nomenclature.GetProductOrderListResponse.errors:type_name -> nomenclature.Error
	43,  // 49: nomenclature.GetProductOrderListResponse.data:type_name -> nomenclature.ProductOrder
	43,  // 50: nomenclature.GetProductOrderByIDResponse.data:type_name -> nomenclature.ProductOrder
	2,   // 51: nomenclature.GetProductOrderByIDResponse.errors:type_name -> nomenclature.Error
	52,  // 52: nomenclature.UpdatesModelType.update:type_name -> nomenclature.UpdateModelType
	53,  // 53: nomenclature.UpdatesModelType.null:type_name -> nomenclature.SetNullModelType
	1,   // 54: nomenclature.GetModelTypeListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,   // 55: nomenclature.GetModelTypeListResponse.errors:type_name -> nomenclature.Error
	50,  // 56: nomenclature.GetModelTypeListResponse.data:type_name -> nomenclature.ModelType
	50,  // 57: nomenclature.GetModelTypeByIDResponse.data:type_name -> nomenclature.ModelType
	2,   // 58: nomenclature.GetModelTypeByIDResponse.errors:type_name -> nomenclature.Error
	1,   // 59: nomenclature.GetProductFilterListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,   // 60: nomenclature.GetProductFilterListResponse.errors:type_name -> nomenclature.Error
	57,  // 61: nomenclature.GetProductFilterListResponse.data:type_name -> nomenclature.ProductFilter
	59,  // 62: nomenclature.Category.banners:type_name -> nomenclature.CategoryBanner
	60,  // 63: nomenclature.Category.block:type_name -> nomenclature.CategoryBlock
	61,  // 64: nomenclature.Category.related_products:type_name -> nomenclature.CategoryRelatedProduct
	59,  // 65: nomenclature.CategoryWithoutID.banners:type_name -> nomenclature.CategoryBanner
	60,  // 66: nomenclature.CategoryWithoutID.block:type_name -> nomenclature.CategoryBlock
	61,  // 67: nomenclature.CategoryWithoutID.related_products:type_name -> nomenclature.CategoryRelatedProduct
	59,  // 68: nomenclature.UpdateCategory.banners:type_name -> nomenclature.CategoryBanner
	60,  // 69: nomenclature.UpdateCategory.block:type_name -> nomenclature.CategoryBlock
	61,  // 70: nomenclature.UpdateCategory.related_products:type_name -> nomenclature.CategoryRelatedProduct
	64,  // 71: nomenclature.UpdatesCategory.update:type_name -> nomenclature.UpdateCategory
	65,  // 72: nomenclature.UpdatesCategory.null:type_name -> nomenclature.SetNullCategory
	1,   // 73: nomenclature.GetCategoryListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,   // 74: nomenclature.GetCategoryListResponse.errors:type_name -> nomenclature.Error
	67,  // 75: nomenclature.GetCategoryListResponse.data:type_name -> nomenclature.CategoryForGetList
	62,  // 76: nomenclature.GetCategoryByIDResponse.data:type_name -> nomenclature.Category
	2,   // 77: nomenclature.GetCategoryByIDResponse.errors:type_name -> nomenclature.Error
	2,   // 78: nomenclature.GetProductsToCategoryResponse.errors:type_name -> nomenclature.Error
	70,  // 79: nomenclature.GetProductsToCategoryResponse.data:type_name -> nomenclature.ProductsToCategory
	1,   // 80: nomenclature.GetProductForAdminListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,   // 81: nomenclature.GetProductForAdminListResponse.errors:type_name -> nomenclature.Error
	73,  // 82: nomenclature.GetProductForAdminListResponse.data:type_name -> nomenclature.ProductForAdminGetList
	81,  // 83: nomenclature.ProductForAdminPhotoModel.standard:type_name -> nomenclature.ProductForAdminPhotoModelDescription
	81,  // 84: nomenclature.ProductForAdminPhotoModel.xl:type_name -> nomenclature.ProductForAdminPhotoModelDescription
	83,  // 85: nomenclature.ProductForAdminVideos.thumbs:type_name -> nomenclature.ProductForAdminVideosThumbs
	76,  // 86: nomenclature.ProductForAdmin.images:type_name -> nomenclature.ProductForAdminImages
	77,  // 87: nomenclature.ProductForAdmin.main_category:type_name -> nomenclature.ProductForAdminMainCategory
	78,  // 88: nomenclature.ProductForAdmin.material:type_name -> nomenclature.ProductForAdminMaterial
	79,  // 89: nomenclature.ProductForAdmin.model_title:type_name -> nomenclature.ProductForAdminModelTitle
	80,  // 90: nomenclature.ProductForAdmin.model_type:type_name -> nomenclature.ProductForAdminModelType
	82,  // 91: nomenclature.ProductForAdmin.photo_model:type_name -> nomenclature.ProductForAdminPhotoModel
	84,  // 92: nomenclature.ProductForAdmin.videos:type_name -> nomenclature.ProductForAdminVideos
	85,  // 93: nomenclature.GetProductForAdminByGUIDResponse.data:type_name -> nomenclature.ProductForAdmin
	2,   // 94: nomenclature.GetProductForAdminByGUIDResponse.errors:type_name -> nomenclature.Error
	76,  // 95: nomenclature.UpdateProductForAdmin.images:type_name -> nomenclature.ProductForAdminImages
	88,  // 96: nomenclature.UpdateProductForAdmin.main_category:type_name -> nomenclature.UpdateProductForAdminMainCategory
	78,  // 97: nomenclature.UpdateProductForAdmin.material:type_name -> nomenclature.ProductForAdminMaterial
	87,  // 98: nomenclature.UpdateProductForAdmin.model_title:type_name -> nomenclature.UpdateProductForAdminModelTitle
	80,  // 99: nomenclature.UpdateProductForAdmin.model_type:type_name -> nomenclature.ProductForAdminModelType
	82,  // 100: nomenclature.UpdateProductForAdmin.photo_model:type_name -> nomenclature.ProductForAdminPhotoModel
	84,  // 101: nomenclature.UpdateProductForAdmin.videos:type_name -> nomenclature.ProductForAdminVideos
	95,  // 102: nomenclature.SetNullProductForAdminPhotoModel.standard:type_name -> nomenclature.SetNullProductForAdminPhotoModelDescription
	95,  // 103: nomenclature.SetNullProductForAdminPhotoModel.xl:type_name -> nomenclature.SetNullProductForAdminPhotoModelDescription
	90,  // 104: nomenclature.SetNullProductForAdmin.images:type_name -> nomenclature.SetNullProductForAdminImages
	91,  // 105: nomenclature.SetNullProductForAdmin.main_category:type_name -> nomenclature.SetNullProductForAdminMainCategory
	92,  // 106: nomenclature.SetNullProductForAdmin.material:type_name -> nomenclature.SetNullProductForAdminMaterial
	93,  // 107: nomenclature.SetNullProductForAdmin.model_title:type_name -> nomenclature.SetNullProductForAdminModelTitle
	94,  // 108: nomenclature.SetNullProductForAdmin.model_type:type_name -> nomenclature.SetNullProductForAdminModelType
	96,  // 109: nomenclature.SetNullProductForAdmin.photo_model:type_name -> nomenclature.SetNullProductForAdminPhotoModel
	89,  // 110: nomenclature.UpdatesProductForAdmin.update:type_name -> nomenclature.UpdateProductForAdmin
	97,  // 111: nomenclature.UpdatesProductForAdmin.null:type_name -> nomenclature.SetNullProductForAdmin
	27,  // 112: nomenclature.NomenclatureService.GetList:input_type -> nomenclature.GetListRequest
	29,  // 113: nomenclature.NomenclatureService.GetByArticle:input_type -> nomenclature.GetNomenclatureByArticleRequest
	27,  // 114: nomenclature.PhotoModelService.GetList:input_type -> nomenclature.GetListRequest
	32,  // 115: nomenclature.PhotoModelService.GetByID:input_type -> nomenclature.GetByIDRequest
	21,  // 116: nomenclature.PhotoModelService.Create:input_type -> nomenclature.PhotoModelWithoutID
	20,  // 117: nomenclature.PhotoModelService.Update:input_type -> nomenclature.UpdatesPhotoModel
	27,  // 118: nomenclature.DictionarySizeService.GetList:input_type -> nomenclature.GetListRequest
	33,  // 119: nomenclature.DictionarySizeService.GetByGUID:input_type -> nomenclature.GetByGUIDRequest
	25,  // 120: nomenclature.DictionarySizeService.Update:input_type -> nomenclature.UpdatesDictionarySize
	27,  // 121: nomenclature.MaintenanceService.GetList:input_type -> nomenclature.GetListRequest
	32,  // 122: nomenclature.MaintenanceService.GetByID:input_type -> nomenclature.GetByIDRequest
	15,  // 123: nomenclature.MaintenanceService.Create:input_type -> nomenclature.MaintenanceithoutID
	14,  // 124: nomenclature.MaintenanceService.Update:input_type -> nomenclature.UpdatesMaintenance
	27,  // 125: nomenclature.MaintenanceService.GetListProductsToMaintenance:input_type -> nomenclature.GetListRequest
	27,  // 126: nomenclature.ProductOrderService.GetList:input_type -> nomenclature.GetListRequest
	32,  // 127: nomenclature.ProductOrderService.GetByID:input_type -> nomenclature.GetByIDRequest
	44,  // 128: nomenclature.ProductOrderService.Create:input_type -> nomenclature.ProductOrderWithoutID
	47,  // 129: nomenclature.ProductOrderService.Update:input_type -> nomenclature.UpdatesProductOrder
	27,  // 130: nomenclature.ModelTypeService.GetList:input_type -> nomenclature.GetListRequest
	32,  // 131: nomenclature.ModelTypeService.GetByID:input_type -> nomenclature.GetByIDRequest
	51,  // 132: nomenclature.ModelTypeService.Create:input_type -> nomenclature.ModelTypeWithoutID
	54,  // 133: nomenclature.ModelTypeService.Update:input_type -> nomenclature.UpdatesModelType
	27,  // 134: nomenclature.ProductFilterService.GetList:input_type -> nomenclature.GetListRequest
	27,  // 135: nomenclature.CategoryService.GetList:input_type -> nomenclature.GetListRequest
	32,  // 136: nomenclature.CategoryService.GetByID:input_type -> nomenclature.GetByIDRequest
	63,  // 137: nomenclature.CategoryService.Create:input_type -> nomenclature.CategoryWithoutID
	66,  // 138: nomenclature.CategoryService.Update:input_type -> nomenclature.UpdatesCategory
	32,  // 139: nomenclature.CategoryService.GetProductsToCategory:input_type -> nomenclature.GetByIDRequest
	72,  // 140: nomenclature.CategoryService.UpdateProductsToCategory:input_type -> nomenclature.UpdateProductsToCategoryRequest
	27,  // 141: nomenclature.ProductForAdminService.GetList:input_type -> nomenclature.GetListRequest
	33,  // 142: nomenclature.ProductForAdminService.GetByGUID:input_type -> nomenclature.GetByGUIDRequest
	98,  // 143: nomenclature.ProductForAdminService.Update:input_type -> nomenclature.UpdatesProductForAdmin
	28,  // 144: nomenclature.NomenclatureService.GetList:output_type -> nomenclature.GetNomenclatureListResponse
	30,  // 145: nomenclature.NomenclatureService.GetByArticle:output_type -> nomenclature.GetNomenclatureByArticleResponse
	31,  // 146: nomenclature.PhotoModelService.GetList:output_type -> nomenclature.GetPhotoModelListResponse
	34,  // 147: nomenclature.PhotoModelService.GetByID:output_type -> nomenclature.GetPhotoModelByIDResponse
	34,  // 148: nomenclature.PhotoModelService.Create:output_type -> nomenclature.GetPhotoModelByIDResponse
	34,  // 149: nomenclature.PhotoModelService.Update:output_type -> nomenclature.GetPhotoModelByIDResponse
	35,  // 150: nomenclature.DictionarySizeService.GetList:output_type -> nomenclature.GetDictionarySizeListResponse
	36,  // 151: nomenclature.DictionarySizeService.GetByGUID:output_type -> nomenclature.GetDictionarySizeByGUIDResponse
	36,  // 152: nomenclature.DictionarySizeService.Update:output_type -> nomenclature.GetDictionarySizeByGUIDResponse
	37,  // 153: nomenclature.MaintenanceService.GetList:output_type -> nomenclature.GetMaintenanceListResponse
	38,  // 154: nomenclature.MaintenanceService.GetByID:output_type -> nomenclature.GetMaintenanceByIDResponse
	38,  // 155: nomenclature.MaintenanceService.Create:output_type -> nomenclature.GetMaintenanceByIDResponse
	38,  // 156: nomenclature.MaintenanceService.Update:output_type -> nomenclature.GetMaintenanceByIDResponse
	41,  // 157: nomenclature.MaintenanceService.GetListProductsToMaintenance:output_type -> nomenclature.GetListProductsToMaintenanceResponse
	48,  // 158: nomenclature.ProductOrderService.GetList:output_type -> nomenclature.GetProductOrderListResponse
	49,  // 159: nomenclature.ProductOrderService.GetByID:output_type -> nomenclature.GetProductOrderByIDResponse
	49,  // 160: nomenclature.ProductOrderService.Create:output_type -> nomenclature.GetProductOrderByIDResponse
	49,  // 161: nomenclature.ProductOrderService.Update:output_type -> nomenclature.GetProductOrderByIDResponse
	55,  // 162: nomenclature.ModelTypeService.GetList:output_type -> nomenclature.GetModelTypeListResponse
	56,  // 163: nomenclature.ModelTypeService.GetByID:output_type -> nomenclature.GetModelTypeByIDResponse
	56,  // 164: nomenclature.ModelTypeService.Create:output_type -> nomenclature.GetModelTypeByIDResponse
	56,  // 165: nomenclature.ModelTypeService.Update:output_type -> nomenclature.GetModelTypeByIDResponse
	58,  // 166: nomenclature.ProductFilterService.GetList:output_type -> nomenclature.GetProductFilterListResponse
	68,  // 167: nomenclature.CategoryService.GetList:output_type -> nomenclature.GetCategoryListResponse
	69,  // 168: nomenclature.CategoryService.GetByID:output_type -> nomenclature.GetCategoryByIDResponse
	69,  // 169: nomenclature.CategoryService.Create:output_type -> nomenclature.GetCategoryByIDResponse
	69,  // 170: nomenclature.CategoryService.Update:output_type -> nomenclature.GetCategoryByIDResponse
	71,  // 171: nomenclature.CategoryService.GetProductsToCategory:output_type -> nomenclature.GetProductsToCategoryResponse
	71,  // 172: nomenclature.CategoryService.UpdateProductsToCategory:output_type -> nomenclature.GetProductsToCategoryResponse
	74,  // 173: nomenclature.ProductForAdminService.GetList:output_type -> nomenclature.GetProductForAdminListResponse
	86,  // 174: nomenclature.ProductForAdminService.GetByGUID:output_type -> nomenclature.GetProductForAdminByGUIDResponse
	86,  // 175: nomenclature.ProductForAdminService.Update:output_type -> nomenclature.GetProductForAdminByGUIDResponse
	144, // [144:176] is the sub-list for method output_type
	112, // [112:144] is the sub-list for method input_type
	112, // [112:112] is the sub-list for extension type_name
	112, // [112:112] is the sub-list for extension extendee
	0,   // [0:112] is the sub-list for field type_name
}

func init() { file_proto_nomenclature_proto_init() }
func file_proto_nomenclature_proto_init() {
	if File_proto_nomenclature_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_nomenclature_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NomenclatureDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capsules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Size); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Maintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatesMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaintenanceithoutID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nomenclature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePhotoModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullPhotoModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatesPhotoModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoModelWithoutID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DictionarySize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDictionarySize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullDictionarySize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatesDictionarySize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DictionarySizeWithoutGUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNomenclatureListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNomenclatureByArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNomenclatureByArticleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPhotoModelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByGUIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPhotoModelByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionarySizeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionarySizeByGUIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaintenanceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaintenanceByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListProductsToMaintenanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickProductWithTitleRU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductOrderWithoutID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullProductOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatesProductOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductOrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductOrderByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelTypeWithoutID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateModelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullModelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatesModelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelTypeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelTypeByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductFilterListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryRelatedProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryWithoutID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatesCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryForGetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsToCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductsToCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductsToCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductForAdminGetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductForAdminListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductForAdminColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductForAdminImages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductForAdminMainCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductForAdminMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductForAdminModelTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductForAdminModelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductForAdminPhotoModelDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductForAdminPhotoModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductForAdminVideosThumbs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductForAdminVideos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductForAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductForAdminByGUIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductForAdminModelTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductForAdminMainCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductForAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullProductForAdminImages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullProductForAdminMainCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullProductForAdminMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullProductForAdminModelTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullProductForAdminModelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullProductForAdminPhotoModelDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullProductForAdminPhotoModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullProductForAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatesProductForAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_nomenclature_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[65].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[66].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[67].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[70].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[73].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[75].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[76].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[77].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[78].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[79].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[81].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[82].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[85].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[87].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[88].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[89].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[90].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[91].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[92].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[93].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[94].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[95].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[96].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[97].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[98].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_nomenclature_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   99,
			NumExtensions: 0,
			NumServices:   9,
		},
		GoTypes:           file_proto_nomenclature_proto_goTypes,
		DependencyIndexes: file_proto_nomenclature_proto_depIdxs,
		MessageInfos:      file_proto_nomenclature_proto_msgTypes,
	}.Build()
	File_proto_nomenclature_proto = out.File
	file_proto_nomenclature_proto_rawDesc = nil
	file_proto_nomenclature_proto_goTypes = nil
	file_proto_nomenclature_proto_depIdxs = nil
}
