// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.9
// source: proto/order.proto

package order

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ForBloggerType int32

const (
	ForBloggerType_blogger_type_not    ForBloggerType = 0
	ForBloggerType_blogger_type_for    ForBloggerType = 1
	ForBloggerType_blogger_type_return ForBloggerType = 2
	ForBloggerType_blogger_type_media  ForBloggerType = 3
	ForBloggerType_blogger_type_top1   ForBloggerType = 4
	ForBloggerType_blogger_type_top2   ForBloggerType = 5
)

// Enum value maps for ForBloggerType.
var (
	ForBloggerType_name = map[int32]string{
		0: "blogger_type_not",
		1: "blogger_type_for",
		2: "blogger_type_return",
		3: "blogger_type_media",
		4: "blogger_type_top1",
		5: "blogger_type_top2",
	}
	ForBloggerType_value = map[string]int32{
		"blogger_type_not":    0,
		"blogger_type_for":    1,
		"blogger_type_return": 2,
		"blogger_type_media":  3,
		"blogger_type_top1":   4,
		"blogger_type_top2":   5,
	}
)

func (x ForBloggerType) Enum() *ForBloggerType {
	p := new(ForBloggerType)
	*p = x
	return p
}

func (x ForBloggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForBloggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_order_proto_enumTypes[0].Descriptor()
}

func (ForBloggerType) Type() protoreflect.EnumType {
	return &file_proto_order_proto_enumTypes[0]
}

func (x ForBloggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForBloggerType.Descriptor instead.
func (ForBloggerType) EnumDescriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{0}
}

type PVZProvider int32

const (
	PVZProvider_boxberry PVZProvider = 0
	PVZProvider_lamoda   PVZProvider = 1
)

// Enum value maps for PVZProvider.
var (
	PVZProvider_name = map[int32]string{
		0: "boxberry",
		1: "lamoda",
	}
	PVZProvider_value = map[string]int32{
		"boxberry": 0,
		"lamoda":   1,
	}
)

func (x PVZProvider) Enum() *PVZProvider {
	p := new(PVZProvider)
	*p = x
	return p
}

func (x PVZProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PVZProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_order_proto_enumTypes[1].Descriptor()
}

func (PVZProvider) Type() protoreflect.EnumType {
	return &file_proto_order_proto_enumTypes[1]
}

func (x PVZProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PVZProvider.Descriptor instead.
func (PVZProvider) EnumDescriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{1}
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{0}
}

func (x *ListRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Paginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total  uint32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Paginate) Reset() {
	*x = Paginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paginate) ProtoMessage() {}

func (x *Paginate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paginate.ProtoReflect.Descriptor instead.
func (*Paginate) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{1}
}

func (x *Paginate) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Paginate) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Paginate) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target  string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Code    int32  `protobuf:"zigzag32,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PositionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InternalTitle  string `protobuf:"bytes,2,opt,name=internal_title,json=internalTitle,proto3" json:"internal_title,omitempty"`
	Code           int64  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	IsCancelStatus bool   `protobuf:"varint,4,opt,name=is_cancel_status,json=isCancelStatus,proto3" json:"is_cancel_status,omitempty"`
	CreatedAt      string `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      string `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PositionStatus) Reset() {
	*x = PositionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionStatus) ProtoMessage() {}

func (x *PositionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionStatus.ProtoReflect.Descriptor instead.
func (*PositionStatus) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{3}
}

func (x *PositionStatus) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PositionStatus) GetInternalTitle() string {
	if x != nil {
		return x.InternalTitle
	}
	return ""
}

func (x *PositionStatus) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PositionStatus) GetIsCancelStatus() bool {
	if x != nil {
		return x.IsCancelStatus
	}
	return false
}

func (x *PositionStatus) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *PositionStatus) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LamodaId            *string         `protobuf:"bytes,2,opt,name=lamoda_id,json=lamodaId,proto3,oneof" json:"lamoda_id,omitempty"`
	LamodaLastStatus    *string         `protobuf:"bytes,3,opt,name=lamoda_last_status,json=lamodaLastStatus,proto3,oneof" json:"lamoda_last_status,omitempty"`
	Status              *PositionStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	PriceBeforeDiscount float32         `protobuf:"fixed32,5,opt,name=price_before_discount,json=priceBeforeDiscount,proto3" json:"price_before_discount,omitempty"`
	Price               float32         `protobuf:"fixed32,6,opt,name=price,proto3" json:"price,omitempty"`
	Sum                 float32         `protobuf:"fixed32,7,opt,name=sum,proto3" json:"sum,omitempty"`
	DiscountSum         float32         `protobuf:"fixed32,8,opt,name=discount_sum,json=discountSum,proto3" json:"discount_sum,omitempty"`
	DiscountManual      float32         `protobuf:"fixed32,9,opt,name=discount_manual,json=discountManual,proto3" json:"discount_manual,omitempty"`
	DiscountPromo       float32         `protobuf:"fixed32,10,opt,name=discount_promo,json=discountPromo,proto3" json:"discount_promo,omitempty"`
	DiscountBonus       float32         `protobuf:"fixed32,11,opt,name=discount_bonus,json=discountBonus,proto3" json:"discount_bonus,omitempty"`
	SpentPromo          float32         `protobuf:"fixed32,12,opt,name=spent_promo,json=spentPromo,proto3" json:"spent_promo,omitempty"`
	SpentBonus          float32         `protobuf:"fixed32,13,opt,name=spent_bonus,json=spentBonus,proto3" json:"spent_bonus,omitempty"`
	IsPayed             bool            `protobuf:"varint,14,opt,name=is_payed,json=isPayed,proto3" json:"is_payed,omitempty"`
	IsPreorder          bool            `protobuf:"varint,15,opt,name=is_preorder,json=isPreorder,proto3" json:"is_preorder,omitempty"`
	IsClickAndCollect   bool            `protobuf:"varint,16,opt,name=is_click_and_collect,json=isClickAndCollect,proto3" json:"is_click_and_collect,omitempty"`
	IsPresent           bool            `protobuf:"varint,17,opt,name=is_present,json=isPresent,proto3" json:"is_present,omitempty"`
	IsGaSendEnabled     bool            `protobuf:"varint,18,opt,name=is_ga_send_enabled,json=isGaSendEnabled,proto3" json:"is_ga_send_enabled,omitempty"`
	StoreCode           *int64          `protobuf:"varint,19,opt,name=store_code,json=storeCode,proto3,oneof" json:"store_code,omitempty"`
	Gs1MMark            *string         `protobuf:"bytes,20,opt,name=gs1m_mark,json=gs1mMark,proto3,oneof" json:"gs1m_mark,omitempty"`
	CancelReason        *string         `protobuf:"bytes,21,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	ReturnReason        *string         `protobuf:"bytes,22,opt,name=return_reason,json=returnReason,proto3,oneof" json:"return_reason,omitempty"`
	LamodaCancelReason  *string         `protobuf:"bytes,23,opt,name=lamoda_cancel_reason,json=lamodaCancelReason,proto3,oneof" json:"lamoda_cancel_reason,omitempty"`
	LastChangeSource    *string         `protobuf:"bytes,24,opt,name=last_change_source,json=lastChangeSource,proto3,oneof" json:"last_change_source,omitempty"`
	Version             int64           `protobuf:"varint,25,opt,name=version,proto3" json:"version,omitempty"`
	ProductId           int64           `protobuf:"varint,26,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ItemId              int64           `protobuf:"varint,27,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ItemTitle           string          `protobuf:"bytes,28,opt,name=item_title,json=itemTitle,proto3" json:"item_title,omitempty"`
	Article             string          `protobuf:"bytes,29,opt,name=article,proto3" json:"article,omitempty"`
	Barcode             int64           `protobuf:"varint,30,opt,name=barcode,proto3" json:"barcode,omitempty"`
	ProductName         string          `protobuf:"bytes,31,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ProductTitleRu      string          `protobuf:"bytes,32,opt,name=product_title_ru,json=productTitleRu,proto3" json:"product_title_ru,omitempty"`
	ProductTitleEn      string          `protobuf:"bytes,33,opt,name=product_title_en,json=productTitleEn,proto3" json:"product_title_en,omitempty"`
	ColorModelTitleRu   *string         `protobuf:"bytes,34,opt,name=color_model_title_ru,json=colorModelTitleRu,proto3,oneof" json:"color_model_title_ru,omitempty"`
	ColorModelTitleEn   *string         `protobuf:"bytes,35,opt,name=color_model_title_en,json=colorModelTitleEn,proto3,oneof" json:"color_model_title_en,omitempty"`
	ProductImage        *string         `protobuf:"bytes,36,opt,name=product_image,json=productImage,proto3,oneof" json:"product_image,omitempty"`
	SizeTitleRu         string          `protobuf:"bytes,37,opt,name=size_title_ru,json=sizeTitleRu,proto3" json:"size_title_ru,omitempty"`
	SizeTitleEn         string          `protobuf:"bytes,38,opt,name=size_title_en,json=sizeTitleEn,proto3" json:"size_title_en,omitempty"`
	ColorGuid           string          `protobuf:"bytes,39,opt,name=color_guid,json=colorGuid,proto3" json:"color_guid,omitempty"`
	ColorHex            *string         `protobuf:"bytes,40,opt,name=color_hex,json=colorHex,proto3,oneof" json:"color_hex,omitempty"`
	ColorTitleRu        string          `protobuf:"bytes,41,opt,name=color_title_ru,json=colorTitleRu,proto3" json:"color_title_ru,omitempty"`
	ColorTitleEn        string          `protobuf:"bytes,42,opt,name=color_title_en,json=colorTitleEn,proto3" json:"color_title_en,omitempty"`
	ColorHasCircle      bool            `protobuf:"varint,43,opt,name=color_has_circle,json=colorHasCircle,proto3" json:"color_has_circle,omitempty"`
	CreatedAt           string          `protobuf:"bytes,44,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt           string          `protobuf:"bytes,45,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{4}
}

func (x *Position) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Position) GetLamodaId() string {
	if x != nil && x.LamodaId != nil {
		return *x.LamodaId
	}
	return ""
}

func (x *Position) GetLamodaLastStatus() string {
	if x != nil && x.LamodaLastStatus != nil {
		return *x.LamodaLastStatus
	}
	return ""
}

func (x *Position) GetStatus() *PositionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Position) GetPriceBeforeDiscount() float32 {
	if x != nil {
		return x.PriceBeforeDiscount
	}
	return 0
}

func (x *Position) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Position) GetSum() float32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *Position) GetDiscountSum() float32 {
	if x != nil {
		return x.DiscountSum
	}
	return 0
}

func (x *Position) GetDiscountManual() float32 {
	if x != nil {
		return x.DiscountManual
	}
	return 0
}

func (x *Position) GetDiscountPromo() float32 {
	if x != nil {
		return x.DiscountPromo
	}
	return 0
}

func (x *Position) GetDiscountBonus() float32 {
	if x != nil {
		return x.DiscountBonus
	}
	return 0
}

func (x *Position) GetSpentPromo() float32 {
	if x != nil {
		return x.SpentPromo
	}
	return 0
}

func (x *Position) GetSpentBonus() float32 {
	if x != nil {
		return x.SpentBonus
	}
	return 0
}

func (x *Position) GetIsPayed() bool {
	if x != nil {
		return x.IsPayed
	}
	return false
}

func (x *Position) GetIsPreorder() bool {
	if x != nil {
		return x.IsPreorder
	}
	return false
}

func (x *Position) GetIsClickAndCollect() bool {
	if x != nil {
		return x.IsClickAndCollect
	}
	return false
}

func (x *Position) GetIsPresent() bool {
	if x != nil {
		return x.IsPresent
	}
	return false
}

func (x *Position) GetIsGaSendEnabled() bool {
	if x != nil {
		return x.IsGaSendEnabled
	}
	return false
}

func (x *Position) GetStoreCode() int64 {
	if x != nil && x.StoreCode != nil {
		return *x.StoreCode
	}
	return 0
}

func (x *Position) GetGs1MMark() string {
	if x != nil && x.Gs1MMark != nil {
		return *x.Gs1MMark
	}
	return ""
}

func (x *Position) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *Position) GetReturnReason() string {
	if x != nil && x.ReturnReason != nil {
		return *x.ReturnReason
	}
	return ""
}

func (x *Position) GetLamodaCancelReason() string {
	if x != nil && x.LamodaCancelReason != nil {
		return *x.LamodaCancelReason
	}
	return ""
}

func (x *Position) GetLastChangeSource() string {
	if x != nil && x.LastChangeSource != nil {
		return *x.LastChangeSource
	}
	return ""
}

func (x *Position) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Position) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *Position) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *Position) GetItemTitle() string {
	if x != nil {
		return x.ItemTitle
	}
	return ""
}

func (x *Position) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *Position) GetBarcode() int64 {
	if x != nil {
		return x.Barcode
	}
	return 0
}

func (x *Position) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *Position) GetProductTitleRu() string {
	if x != nil {
		return x.ProductTitleRu
	}
	return ""
}

func (x *Position) GetProductTitleEn() string {
	if x != nil {
		return x.ProductTitleEn
	}
	return ""
}

func (x *Position) GetColorModelTitleRu() string {
	if x != nil && x.ColorModelTitleRu != nil {
		return *x.ColorModelTitleRu
	}
	return ""
}

func (x *Position) GetColorModelTitleEn() string {
	if x != nil && x.ColorModelTitleEn != nil {
		return *x.ColorModelTitleEn
	}
	return ""
}

func (x *Position) GetProductImage() string {
	if x != nil && x.ProductImage != nil {
		return *x.ProductImage
	}
	return ""
}

func (x *Position) GetSizeTitleRu() string {
	if x != nil {
		return x.SizeTitleRu
	}
	return ""
}

func (x *Position) GetSizeTitleEn() string {
	if x != nil {
		return x.SizeTitleEn
	}
	return ""
}

func (x *Position) GetColorGuid() string {
	if x != nil {
		return x.ColorGuid
	}
	return ""
}

func (x *Position) GetColorHex() string {
	if x != nil && x.ColorHex != nil {
		return *x.ColorHex
	}
	return ""
}

func (x *Position) GetColorTitleRu() string {
	if x != nil {
		return x.ColorTitleRu
	}
	return ""
}

func (x *Position) GetColorTitleEn() string {
	if x != nil {
		return x.ColorTitleEn
	}
	return ""
}

func (x *Position) GetColorHasCircle() bool {
	if x != nil {
		return x.ColorHasCircle
	}
	return false
}

func (x *Position) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Position) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type PositionHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoryId int64 `protobuf:"varint,1,opt,name=history_id,json=historyId,proto3" json:"history_id,omitempty"`
	// Types that are assignable to Result:
	//	*PositionHistory_EntityId
	//	*PositionHistory_Position
	Result    isPositionHistory_Result `protobuf_oneof:"result"`
	Source    string                   `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	UserId    int64                    `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FieldName string                   `protobuf:"bytes,6,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	OldValue  *string                  `protobuf:"bytes,7,opt,name=old_value,json=oldValue,proto3,oneof" json:"old_value,omitempty"`
	NewValue  string                   `protobuf:"bytes,8,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	CreatedAt string                   `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *PositionHistory) Reset() {
	*x = PositionHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionHistory) ProtoMessage() {}

func (x *PositionHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionHistory.ProtoReflect.Descriptor instead.
func (*PositionHistory) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{5}
}

func (x *PositionHistory) GetHistoryId() int64 {
	if x != nil {
		return x.HistoryId
	}
	return 0
}

func (m *PositionHistory) GetResult() isPositionHistory_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *PositionHistory) GetEntityId() int64 {
	if x, ok := x.GetResult().(*PositionHistory_EntityId); ok {
		return x.EntityId
	}
	return 0
}

func (x *PositionHistory) GetPosition() *Position {
	if x, ok := x.GetResult().(*PositionHistory_Position); ok {
		return x.Position
	}
	return nil
}

func (x *PositionHistory) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PositionHistory) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PositionHistory) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *PositionHistory) GetOldValue() string {
	if x != nil && x.OldValue != nil {
		return *x.OldValue
	}
	return ""
}

func (x *PositionHistory) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

func (x *PositionHistory) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type isPositionHistory_Result interface {
	isPositionHistory_Result()
}

type PositionHistory_EntityId struct {
	EntityId int64 `protobuf:"varint,2,opt,name=entity_id,json=entityId,proto3,oneof"`
}

type PositionHistory_Position struct {
	Position *Position `protobuf:"bytes,3,opt,name=position,proto3,oneof"`
}

func (*PositionHistory_EntityId) isPositionHistory_Result() {}

func (*PositionHistory_Position) isPositionHistory_Result() {}

type StatusGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleRu string `protobuf:"bytes,2,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
}

func (x *StatusGroup) Reset() {
	*x = StatusGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusGroup) ProtoMessage() {}

func (x *StatusGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusGroup.ProtoReflect.Descriptor instead.
func (*StatusGroup) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{6}
}

func (x *StatusGroup) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StatusGroup) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

type OrderStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleInternal     string       `protobuf:"bytes,2,opt,name=title_internal,json=titleInternal,proto3" json:"title_internal,omitempty"`
	TitleRu           *string      `protobuf:"bytes,3,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	Code              int64        `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Group             *StatusGroup `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	IsReturned        bool         `protobuf:"varint,6,opt,name=is_returned,json=isReturned,proto3" json:"is_returned,omitempty"`
	CanBeReturned     bool         `protobuf:"varint,7,opt,name=can_be_returned,json=canBeReturned,proto3" json:"can_be_returned,omitempty"`
	IsCanceled        bool         `protobuf:"varint,8,opt,name=is_canceled,json=isCanceled,proto3" json:"is_canceled,omitempty"`
	CanBeCanceled     bool         `protobuf:"varint,9,opt,name=can_be_canceled,json=canBeCanceled,proto3" json:"can_be_canceled,omitempty"`
	IsPreorder        bool         `protobuf:"varint,10,opt,name=is_preorder,json=isPreorder,proto3" json:"is_preorder,omitempty"`
	IsOfflineShipment bool         `protobuf:"varint,11,opt,name=is_offline_shipment,json=isOfflineShipment,proto3" json:"is_offline_shipment,omitempty"`
	IsClickAndCollect bool         `protobuf:"varint,12,opt,name=is_click_and_collect,json=isClickAndCollect,proto3" json:"is_click_and_collect,omitempty"`
	CreatedAt         string       `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         string       `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *OrderStatus) Reset() {
	*x = OrderStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatus) ProtoMessage() {}

func (x *OrderStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatus.ProtoReflect.Descriptor instead.
func (*OrderStatus) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{7}
}

func (x *OrderStatus) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderStatus) GetTitleInternal() string {
	if x != nil {
		return x.TitleInternal
	}
	return ""
}

func (x *OrderStatus) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *OrderStatus) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OrderStatus) GetGroup() *StatusGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *OrderStatus) GetIsReturned() bool {
	if x != nil {
		return x.IsReturned
	}
	return false
}

func (x *OrderStatus) GetCanBeReturned() bool {
	if x != nil {
		return x.CanBeReturned
	}
	return false
}

func (x *OrderStatus) GetIsCanceled() bool {
	if x != nil {
		return x.IsCanceled
	}
	return false
}

func (x *OrderStatus) GetCanBeCanceled() bool {
	if x != nil {
		return x.CanBeCanceled
	}
	return false
}

func (x *OrderStatus) GetIsPreorder() bool {
	if x != nil {
		return x.IsPreorder
	}
	return false
}

func (x *OrderStatus) GetIsOfflineShipment() bool {
	if x != nil {
		return x.IsOfflineShipment
	}
	return false
}

func (x *OrderStatus) GetIsClickAndCollect() bool {
	if x != nil {
		return x.IsClickAndCollect
	}
	return false
}

func (x *OrderStatus) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *OrderStatus) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type StatusTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChangeTime *string      `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3,oneof" json:"change_time,omitempty"`
	Status     *OrderStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt  string       `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  string       `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *StatusTimer) Reset() {
	*x = StatusTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusTimer) ProtoMessage() {}

func (x *StatusTimer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusTimer.ProtoReflect.Descriptor instead.
func (*StatusTimer) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{8}
}

func (x *StatusTimer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StatusTimer) GetChangeTime() string {
	if x != nil && x.ChangeTime != nil {
		return *x.ChangeTime
	}
	return ""
}

func (x *StatusTimer) GetStatus() *OrderStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *StatusTimer) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *StatusTimer) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type Flow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FlowId          int64 `protobuf:"varint,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	CurrentStatusId int64 `protobuf:"varint,3,opt,name=current_status_id,json=currentStatusId,proto3" json:"current_status_id,omitempty"`
	NextStatusId    int64 `protobuf:"varint,4,opt,name=next_status_id,json=nextStatusId,proto3" json:"next_status_id,omitempty"`
}

func (x *Flow) Reset() {
	*x = Flow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{9}
}

func (x *Flow) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Flow) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *Flow) GetCurrentStatusId() int64 {
	if x != nil {
		return x.CurrentStatusId
	}
	return 0
}

func (x *Flow) GetNextStatusId() int64 {
	if x != nil {
		return x.NextStatusId
	}
	return 0
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt                   string         `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                   string         `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	RcrmId                      int64          `protobuf:"varint,4,opt,name=rcrm_id,json=rcrmId,proto3" json:"rcrm_id,omitempty"`
	RcrmSite                    string         `protobuf:"bytes,5,opt,name=rcrm_site,json=rcrmSite,proto3" json:"rcrm_site,omitempty"`
	MindboxId                   *int64         `protobuf:"varint,6,opt,name=mindbox_id,json=mindboxId,proto3,oneof" json:"mindbox_id,omitempty"`
	AdmitadUid                  *string        `protobuf:"bytes,7,opt,name=admitad_uid,json=admitadUid,proto3,oneof" json:"admitad_uid,omitempty"`
	DolyameId                   *string        `protobuf:"bytes,8,opt,name=dolyame_id,json=dolyameId,proto3,oneof" json:"dolyame_id,omitempty"`
	DolyameVersion              *int64         `protobuf:"varint,9,opt,name=dolyame_version,json=dolyameVersion,proto3,oneof" json:"dolyame_version,omitempty"`
	LamodaId                    *string        `protobuf:"bytes,10,opt,name=lamoda_id,json=lamodaId,proto3,oneof" json:"lamoda_id,omitempty"`
	LamodaLastStatus            *string        `protobuf:"bytes,11,opt,name=lamoda_last_status,json=lamodaLastStatus,proto3,oneof" json:"lamoda_last_status,omitempty"`
	LamodaCancelReason          *string        `protobuf:"bytes,12,opt,name=lamoda_cancel_reason,json=lamodaCancelReason,proto3,oneof" json:"lamoda_cancel_reason,omitempty"`
	UserId                      int64          `protobuf:"varint,13,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status                      *OrderStatus   `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	StatusComment               *string        `protobuf:"bytes,15,opt,name=status_comment,json=statusComment,proto3,oneof" json:"status_comment,omitempty"`
	StatusWms                   string         `protobuf:"bytes,16,opt,name=status_wms,json=statusWms,proto3" json:"status_wms,omitempty"`
	Sum                         float32        `protobuf:"fixed32,17,opt,name=sum,proto3" json:"sum,omitempty"`
	SurchargeSum                float32        `protobuf:"fixed32,18,opt,name=surcharge_sum,json=surchargeSum,proto3" json:"surcharge_sum,omitempty"`
	SurchargeComment            *string        `protobuf:"bytes,19,opt,name=surcharge_comment,json=surchargeComment,proto3,oneof" json:"surcharge_comment,omitempty"`
	DeliveryPrice               float32        `protobuf:"fixed32,20,opt,name=delivery_price,json=deliveryPrice,proto3" json:"delivery_price,omitempty"`
	DiscountSum                 float32        `protobuf:"fixed32,21,opt,name=discount_sum,json=discountSum,proto3" json:"discount_sum,omitempty"`
	DiscountManual              float32        `protobuf:"fixed32,22,opt,name=discount_manual,json=discountManual,proto3" json:"discount_manual,omitempty"`
	DiscountPromo               float32        `protobuf:"fixed32,23,opt,name=discount_promo,json=discountPromo,proto3" json:"discount_promo,omitempty"`
	DiscountBonus               float32        `protobuf:"fixed32,24,opt,name=discount_bonus,json=discountBonus,proto3" json:"discount_bonus,omitempty"`
	SpendBonus                  float32        `protobuf:"fixed32,25,opt,name=spend_bonus,json=spendBonus,proto3" json:"spend_bonus,omitempty"`
	GivenBonus                  float32        `protobuf:"fixed32,26,opt,name=given_bonus,json=givenBonus,proto3" json:"given_bonus,omitempty"`
	PromoCodeId                 *string        `protobuf:"bytes,27,opt,name=promo_code_id,json=promoCodeId,proto3,oneof" json:"promo_code_id,omitempty"`
	PaymentStatus               *int64         `protobuf:"varint,28,opt,name=payment_status,json=paymentStatus,proto3,oneof" json:"payment_status,omitempty"`
	PaymentDate                 string         `protobuf:"bytes,29,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	DeliveryTkId                *string        `protobuf:"bytes,30,opt,name=delivery_tk_id,json=deliveryTkId,proto3,oneof" json:"delivery_tk_id,omitempty"`
	DeliveryMethodId            *int64         `protobuf:"varint,31,opt,name=delivery_method_id,json=deliveryMethodId,proto3,oneof" json:"delivery_method_id,omitempty"`
	DeliverySlug                *string        `protobuf:"bytes,32,opt,name=delivery_slug,json=deliverySlug,proto3,oneof" json:"delivery_slug,omitempty"`
	DeliveryDatetime            *string        `protobuf:"bytes,33,opt,name=delivery_datetime,json=deliveryDatetime,proto3,oneof" json:"delivery_datetime,omitempty"`
	DeliveryDateChangedCount    int64          `protobuf:"varint,34,opt,name=delivery_date_changed_count,json=deliveryDateChangedCount,proto3" json:"delivery_date_changed_count,omitempty"`
	DeliveryTrackNumber         *string        `protobuf:"bytes,35,opt,name=delivery_track_number,json=deliveryTrackNumber,proto3,oneof" json:"delivery_track_number,omitempty"`
	DeliveryComment             *string        `protobuf:"bytes,36,opt,name=delivery_comment,json=deliveryComment,proto3,oneof" json:"delivery_comment,omitempty"`
	PvzProviderId               *string        `protobuf:"bytes,37,opt,name=pvz_provider_id,json=pvzProviderId,proto3,oneof" json:"pvz_provider_id,omitempty"`
	PvzProvider                 *PVZProvider   `protobuf:"varint,38,opt,name=pvz_provider,json=pvzProvider,proto3,enum=orders.PVZProvider,oneof" json:"pvz_provider,omitempty"`
	GeoIdType                   *string        `protobuf:"bytes,39,opt,name=geo_id_type,json=geoIdType,proto3,oneof" json:"geo_id_type,omitempty"`
	FullAddress                 *string        `protobuf:"bytes,40,opt,name=full_address,json=fullAddress,proto3,oneof" json:"full_address,omitempty"`
	FullAddressId               *string        `protobuf:"bytes,41,opt,name=full_address_id,json=fullAddressId,proto3,oneof" json:"full_address_id,omitempty"`
	CountryIsoCode              *string        `protobuf:"bytes,42,opt,name=country_iso_code,json=countryIsoCode,proto3,oneof" json:"country_iso_code,omitempty"`
	Region                      *string        `protobuf:"bytes,43,opt,name=region,proto3,oneof" json:"region,omitempty"`
	RegionId                    *string        `protobuf:"bytes,44,opt,name=region_id,json=regionId,proto3,oneof" json:"region_id,omitempty"`
	City                        *string        `protobuf:"bytes,45,opt,name=city,proto3,oneof" json:"city,omitempty"`
	CityId                      *string        `protobuf:"bytes,46,opt,name=city_id,json=cityId,proto3,oneof" json:"city_id,omitempty"`
	Street                      *string        `protobuf:"bytes,47,opt,name=street,proto3,oneof" json:"street,omitempty"`
	StreetId                    *string        `protobuf:"bytes,48,opt,name=street_id,json=streetId,proto3,oneof" json:"street_id,omitempty"`
	House                       *string        `protobuf:"bytes,49,opt,name=house,proto3,oneof" json:"house,omitempty"`
	Housing                     *string        `protobuf:"bytes,50,opt,name=housing,proto3,oneof" json:"housing,omitempty"`
	Building                    *string        `protobuf:"bytes,51,opt,name=building,proto3,oneof" json:"building,omitempty"`
	Entrance                    *string        `protobuf:"bytes,52,opt,name=entrance,proto3,oneof" json:"entrance,omitempty"`
	Floor                       *string        `protobuf:"bytes,53,opt,name=floor,proto3,oneof" json:"floor,omitempty"`
	Flat                        *string        `protobuf:"bytes,54,opt,name=flat,proto3,oneof" json:"flat,omitempty"`
	PostalCode                  *string        `protobuf:"bytes,55,opt,name=postal_code,json=postalCode,proto3,oneof" json:"postal_code,omitempty"`
	RecipientLastName           *string        `protobuf:"bytes,56,opt,name=recipient_last_name,json=recipientLastName,proto3,oneof" json:"recipient_last_name,omitempty"`
	RecipientPhone              *string        `protobuf:"bytes,57,opt,name=recipient_phone,json=recipientPhone,proto3,oneof" json:"recipient_phone,omitempty"`
	RecipientEmail              *string        `protobuf:"bytes,58,opt,name=recipient_email,json=recipientEmail,proto3,oneof" json:"recipient_email,omitempty"`
	RecipientComment            *string        `protobuf:"bytes,59,opt,name=recipient_comment,json=recipientComment,proto3,oneof" json:"recipient_comment,omitempty"`
	ManagerComment              *string        `protobuf:"bytes,60,opt,name=manager_comment,json=managerComment,proto3,oneof" json:"manager_comment,omitempty"`
	ManagerId                   *int64         `protobuf:"varint,61,opt,name=manager_id,json=managerId,proto3,oneof" json:"manager_id,omitempty"`
	ManagerProcessingReason     *string        `protobuf:"bytes,62,opt,name=manager_processing_reason,json=managerProcessingReason,proto3,oneof" json:"manager_processing_reason,omitempty"`
	ReturnDeliveryTk            *string        `protobuf:"bytes,63,opt,name=return_delivery_tk,json=returnDeliveryTk,proto3,oneof" json:"return_delivery_tk,omitempty"`
	ReturnDeliveryMethod        *string        `protobuf:"bytes,64,opt,name=return_delivery_method,json=returnDeliveryMethod,proto3,oneof" json:"return_delivery_method,omitempty"`
	ReturnMoney                 *string        `protobuf:"bytes,65,opt,name=return_money,json=returnMoney,proto3,oneof" json:"return_money,omitempty"`
	ReturnStore                 *int64         `protobuf:"varint,66,opt,name=return_store,json=returnStore,proto3,oneof" json:"return_store,omitempty"`
	ReturnReason                *string        `protobuf:"bytes,67,opt,name=return_reason,json=returnReason,proto3,oneof" json:"return_reason,omitempty"`
	CancelReason                *string        `protobuf:"bytes,68,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	OrderMethod                 *string        `protobuf:"bytes,69,opt,name=order_method,json=orderMethod,proto3,oneof" json:"order_method,omitempty"`
	LastChangeSource            *string        `protobuf:"bytes,70,opt,name=last_change_source,json=lastChangeSource,proto3,oneof" json:"last_change_source,omitempty"`
	Version                     int64          `protobuf:"varint,71,opt,name=version,proto3" json:"version,omitempty"`
	Seller_1SGuid               *string        `protobuf:"bytes,72,opt,name=seller_1s_guid,json=seller1sGuid,proto3,oneof" json:"seller_1s_guid,omitempty"`
	SellerStoreId               *string        `protobuf:"bytes,73,opt,name=seller_store_id,json=sellerStoreId,proto3,oneof" json:"seller_store_id,omitempty"`
	SellerUserId                *string        `protobuf:"bytes,74,opt,name=seller_user_id,json=sellerUserId,proto3,oneof" json:"seller_user_id,omitempty"`
	SellerName                  *string        `protobuf:"bytes,75,opt,name=seller_name,json=sellerName,proto3,oneof" json:"seller_name,omitempty"`
	Org                         *string        `protobuf:"bytes,76,opt,name=org,proto3,oneof" json:"org,omitempty"`
	StoreCode                   *int64         `protobuf:"varint,77,opt,name=store_code,json=storeCode,proto3,oneof" json:"store_code,omitempty"`
	StorageExpiredAt            *string        `protobuf:"bytes,78,opt,name=storage_expired_at,json=storageExpiredAt,proto3,oneof" json:"storage_expired_at,omitempty"`
	IsIncreasedStorageExpiredAt bool           `protobuf:"varint,79,opt,name=is_increased_storage_expired_at,json=isIncreasedStorageExpiredAt,proto3" json:"is_increased_storage_expired_at,omitempty"`
	IsDismantle                 bool           `protobuf:"varint,80,opt,name=is_dismantle,json=isDismantle,proto3" json:"is_dismantle,omitempty"`
	IsOrderedByQr               bool           `protobuf:"varint,81,opt,name=is_ordered_by_qr,json=isOrderedByQr,proto3" json:"is_ordered_by_qr,omitempty"`
	OrderType                   string         `protobuf:"bytes,82,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	PreorderPlannedDeliveryFrom *string        `protobuf:"bytes,83,opt,name=preorder_planned_delivery_from,json=preorderPlannedDeliveryFrom,proto3,oneof" json:"preorder_planned_delivery_from,omitempty"`
	PreorderPlannedDeliveryTo   *string        `protobuf:"bytes,84,opt,name=preorder_planned_delivery_to,json=preorderPlannedDeliveryTo,proto3,oneof" json:"preorder_planned_delivery_to,omitempty"`
	ForBlogger                  ForBloggerType `protobuf:"varint,85,opt,name=for_blogger,json=forBlogger,proto3,enum=orders.ForBloggerType" json:"for_blogger,omitempty"`
	Positions                   []*Position    `protobuf:"bytes,86,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{10}
}

func (x *Order) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Order) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Order) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Order) GetRcrmId() int64 {
	if x != nil {
		return x.RcrmId
	}
	return 0
}

func (x *Order) GetRcrmSite() string {
	if x != nil {
		return x.RcrmSite
	}
	return ""
}

func (x *Order) GetMindboxId() int64 {
	if x != nil && x.MindboxId != nil {
		return *x.MindboxId
	}
	return 0
}

func (x *Order) GetAdmitadUid() string {
	if x != nil && x.AdmitadUid != nil {
		return *x.AdmitadUid
	}
	return ""
}

func (x *Order) GetDolyameId() string {
	if x != nil && x.DolyameId != nil {
		return *x.DolyameId
	}
	return ""
}

func (x *Order) GetDolyameVersion() int64 {
	if x != nil && x.DolyameVersion != nil {
		return *x.DolyameVersion
	}
	return 0
}

func (x *Order) GetLamodaId() string {
	if x != nil && x.LamodaId != nil {
		return *x.LamodaId
	}
	return ""
}

func (x *Order) GetLamodaLastStatus() string {
	if x != nil && x.LamodaLastStatus != nil {
		return *x.LamodaLastStatus
	}
	return ""
}

func (x *Order) GetLamodaCancelReason() string {
	if x != nil && x.LamodaCancelReason != nil {
		return *x.LamodaCancelReason
	}
	return ""
}

func (x *Order) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Order) GetStatus() *OrderStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Order) GetStatusComment() string {
	if x != nil && x.StatusComment != nil {
		return *x.StatusComment
	}
	return ""
}

func (x *Order) GetStatusWms() string {
	if x != nil {
		return x.StatusWms
	}
	return ""
}

func (x *Order) GetSum() float32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *Order) GetSurchargeSum() float32 {
	if x != nil {
		return x.SurchargeSum
	}
	return 0
}

func (x *Order) GetSurchargeComment() string {
	if x != nil && x.SurchargeComment != nil {
		return *x.SurchargeComment
	}
	return ""
}

func (x *Order) GetDeliveryPrice() float32 {
	if x != nil {
		return x.DeliveryPrice
	}
	return 0
}

func (x *Order) GetDiscountSum() float32 {
	if x != nil {
		return x.DiscountSum
	}
	return 0
}

func (x *Order) GetDiscountManual() float32 {
	if x != nil {
		return x.DiscountManual
	}
	return 0
}

func (x *Order) GetDiscountPromo() float32 {
	if x != nil {
		return x.DiscountPromo
	}
	return 0
}

func (x *Order) GetDiscountBonus() float32 {
	if x != nil {
		return x.DiscountBonus
	}
	return 0
}

func (x *Order) GetSpendBonus() float32 {
	if x != nil {
		return x.SpendBonus
	}
	return 0
}

func (x *Order) GetGivenBonus() float32 {
	if x != nil {
		return x.GivenBonus
	}
	return 0
}

func (x *Order) GetPromoCodeId() string {
	if x != nil && x.PromoCodeId != nil {
		return *x.PromoCodeId
	}
	return ""
}

func (x *Order) GetPaymentStatus() int64 {
	if x != nil && x.PaymentStatus != nil {
		return *x.PaymentStatus
	}
	return 0
}

func (x *Order) GetPaymentDate() string {
	if x != nil {
		return x.PaymentDate
	}
	return ""
}

func (x *Order) GetDeliveryTkId() string {
	if x != nil && x.DeliveryTkId != nil {
		return *x.DeliveryTkId
	}
	return ""
}

func (x *Order) GetDeliveryMethodId() int64 {
	if x != nil && x.DeliveryMethodId != nil {
		return *x.DeliveryMethodId
	}
	return 0
}

func (x *Order) GetDeliverySlug() string {
	if x != nil && x.DeliverySlug != nil {
		return *x.DeliverySlug
	}
	return ""
}

func (x *Order) GetDeliveryDatetime() string {
	if x != nil && x.DeliveryDatetime != nil {
		return *x.DeliveryDatetime
	}
	return ""
}

func (x *Order) GetDeliveryDateChangedCount() int64 {
	if x != nil {
		return x.DeliveryDateChangedCount
	}
	return 0
}

func (x *Order) GetDeliveryTrackNumber() string {
	if x != nil && x.DeliveryTrackNumber != nil {
		return *x.DeliveryTrackNumber
	}
	return ""
}

func (x *Order) GetDeliveryComment() string {
	if x != nil && x.DeliveryComment != nil {
		return *x.DeliveryComment
	}
	return ""
}

func (x *Order) GetPvzProviderId() string {
	if x != nil && x.PvzProviderId != nil {
		return *x.PvzProviderId
	}
	return ""
}

func (x *Order) GetPvzProvider() PVZProvider {
	if x != nil && x.PvzProvider != nil {
		return *x.PvzProvider
	}
	return PVZProvider_boxberry
}

func (x *Order) GetGeoIdType() string {
	if x != nil && x.GeoIdType != nil {
		return *x.GeoIdType
	}
	return ""
}

func (x *Order) GetFullAddress() string {
	if x != nil && x.FullAddress != nil {
		return *x.FullAddress
	}
	return ""
}

func (x *Order) GetFullAddressId() string {
	if x != nil && x.FullAddressId != nil {
		return *x.FullAddressId
	}
	return ""
}

func (x *Order) GetCountryIsoCode() string {
	if x != nil && x.CountryIsoCode != nil {
		return *x.CountryIsoCode
	}
	return ""
}

func (x *Order) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *Order) GetRegionId() string {
	if x != nil && x.RegionId != nil {
		return *x.RegionId
	}
	return ""
}

func (x *Order) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *Order) GetCityId() string {
	if x != nil && x.CityId != nil {
		return *x.CityId
	}
	return ""
}

func (x *Order) GetStreet() string {
	if x != nil && x.Street != nil {
		return *x.Street
	}
	return ""
}

func (x *Order) GetStreetId() string {
	if x != nil && x.StreetId != nil {
		return *x.StreetId
	}
	return ""
}

func (x *Order) GetHouse() string {
	if x != nil && x.House != nil {
		return *x.House
	}
	return ""
}

func (x *Order) GetHousing() string {
	if x != nil && x.Housing != nil {
		return *x.Housing
	}
	return ""
}

func (x *Order) GetBuilding() string {
	if x != nil && x.Building != nil {
		return *x.Building
	}
	return ""
}

func (x *Order) GetEntrance() string {
	if x != nil && x.Entrance != nil {
		return *x.Entrance
	}
	return ""
}

func (x *Order) GetFloor() string {
	if x != nil && x.Floor != nil {
		return *x.Floor
	}
	return ""
}

func (x *Order) GetFlat() string {
	if x != nil && x.Flat != nil {
		return *x.Flat
	}
	return ""
}

func (x *Order) GetPostalCode() string {
	if x != nil && x.PostalCode != nil {
		return *x.PostalCode
	}
	return ""
}

func (x *Order) GetRecipientLastName() string {
	if x != nil && x.RecipientLastName != nil {
		return *x.RecipientLastName
	}
	return ""
}

func (x *Order) GetRecipientPhone() string {
	if x != nil && x.RecipientPhone != nil {
		return *x.RecipientPhone
	}
	return ""
}

func (x *Order) GetRecipientEmail() string {
	if x != nil && x.RecipientEmail != nil {
		return *x.RecipientEmail
	}
	return ""
}

func (x *Order) GetRecipientComment() string {
	if x != nil && x.RecipientComment != nil {
		return *x.RecipientComment
	}
	return ""
}

func (x *Order) GetManagerComment() string {
	if x != nil && x.ManagerComment != nil {
		return *x.ManagerComment
	}
	return ""
}

func (x *Order) GetManagerId() int64 {
	if x != nil && x.ManagerId != nil {
		return *x.ManagerId
	}
	return 0
}

func (x *Order) GetManagerProcessingReason() string {
	if x != nil && x.ManagerProcessingReason != nil {
		return *x.ManagerProcessingReason
	}
	return ""
}

func (x *Order) GetReturnDeliveryTk() string {
	if x != nil && x.ReturnDeliveryTk != nil {
		return *x.ReturnDeliveryTk
	}
	return ""
}

func (x *Order) GetReturnDeliveryMethod() string {
	if x != nil && x.ReturnDeliveryMethod != nil {
		return *x.ReturnDeliveryMethod
	}
	return ""
}

func (x *Order) GetReturnMoney() string {
	if x != nil && x.ReturnMoney != nil {
		return *x.ReturnMoney
	}
	return ""
}

func (x *Order) GetReturnStore() int64 {
	if x != nil && x.ReturnStore != nil {
		return *x.ReturnStore
	}
	return 0
}

func (x *Order) GetReturnReason() string {
	if x != nil && x.ReturnReason != nil {
		return *x.ReturnReason
	}
	return ""
}

func (x *Order) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *Order) GetOrderMethod() string {
	if x != nil && x.OrderMethod != nil {
		return *x.OrderMethod
	}
	return ""
}

func (x *Order) GetLastChangeSource() string {
	if x != nil && x.LastChangeSource != nil {
		return *x.LastChangeSource
	}
	return ""
}

func (x *Order) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Order) GetSeller_1SGuid() string {
	if x != nil && x.Seller_1SGuid != nil {
		return *x.Seller_1SGuid
	}
	return ""
}

func (x *Order) GetSellerStoreId() string {
	if x != nil && x.SellerStoreId != nil {
		return *x.SellerStoreId
	}
	return ""
}

func (x *Order) GetSellerUserId() string {
	if x != nil && x.SellerUserId != nil {
		return *x.SellerUserId
	}
	return ""
}

func (x *Order) GetSellerName() string {
	if x != nil && x.SellerName != nil {
		return *x.SellerName
	}
	return ""
}

func (x *Order) GetOrg() string {
	if x != nil && x.Org != nil {
		return *x.Org
	}
	return ""
}

func (x *Order) GetStoreCode() int64 {
	if x != nil && x.StoreCode != nil {
		return *x.StoreCode
	}
	return 0
}

func (x *Order) GetStorageExpiredAt() string {
	if x != nil && x.StorageExpiredAt != nil {
		return *x.StorageExpiredAt
	}
	return ""
}

func (x *Order) GetIsIncreasedStorageExpiredAt() bool {
	if x != nil {
		return x.IsIncreasedStorageExpiredAt
	}
	return false
}

func (x *Order) GetIsDismantle() bool {
	if x != nil {
		return x.IsDismantle
	}
	return false
}

func (x *Order) GetIsOrderedByQr() bool {
	if x != nil {
		return x.IsOrderedByQr
	}
	return false
}

func (x *Order) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *Order) GetPreorderPlannedDeliveryFrom() string {
	if x != nil && x.PreorderPlannedDeliveryFrom != nil {
		return *x.PreorderPlannedDeliveryFrom
	}
	return ""
}

func (x *Order) GetPreorderPlannedDeliveryTo() string {
	if x != nil && x.PreorderPlannedDeliveryTo != nil {
		return *x.PreorderPlannedDeliveryTo
	}
	return ""
}

func (x *Order) GetForBlogger() ForBloggerType {
	if x != nil {
		return x.ForBlogger
	}
	return ForBloggerType_blogger_type_not
}

func (x *Order) GetPositions() []*Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

type OrderHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoryId int64 `protobuf:"varint,1,opt,name=history_id,json=historyId,proto3" json:"history_id,omitempty"`
	// Types that are assignable to Result:
	//	*OrderHistory_Order
	//	*OrderHistory_EntityId
	Result    isOrderHistory_Result `protobuf_oneof:"result"`
	Source    string                `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	UserId    int64                 `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FieldName string                `protobuf:"bytes,6,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	OldValue  *string               `protobuf:"bytes,7,opt,name=old_value,json=oldValue,proto3,oneof" json:"old_value,omitempty"`
	NewValue  string                `protobuf:"bytes,8,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	CreatedAt string                `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *OrderHistory) Reset() {
	*x = OrderHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderHistory) ProtoMessage() {}

func (x *OrderHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderHistory.ProtoReflect.Descriptor instead.
func (*OrderHistory) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{11}
}

func (x *OrderHistory) GetHistoryId() int64 {
	if x != nil {
		return x.HistoryId
	}
	return 0
}

func (m *OrderHistory) GetResult() isOrderHistory_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *OrderHistory) GetOrder() *Order {
	if x, ok := x.GetResult().(*OrderHistory_Order); ok {
		return x.Order
	}
	return nil
}

func (x *OrderHistory) GetEntityId() int64 {
	if x, ok := x.GetResult().(*OrderHistory_EntityId); ok {
		return x.EntityId
	}
	return 0
}

func (x *OrderHistory) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *OrderHistory) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OrderHistory) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *OrderHistory) GetOldValue() string {
	if x != nil && x.OldValue != nil {
		return *x.OldValue
	}
	return ""
}

func (x *OrderHistory) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

func (x *OrderHistory) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type isOrderHistory_Result interface {
	isOrderHistory_Result()
}

type OrderHistory_Order struct {
	Order *Order `protobuf:"bytes,2,opt,name=order,proto3,oneof"`
}

type OrderHistory_EntityId struct {
	EntityId int64 `protobuf:"varint,3,opt,name=entity_id,json=entityId,proto3,oneof"`
}

func (*OrderHistory_Order) isOrderHistory_Result() {}

func (*OrderHistory_EntityId) isOrderHistory_Result() {}

type ExchangeLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Result:
	//	*ExchangeLog_EntityId
	//	*ExchangeLog_Order
	Result     isExchangeLog_Result `protobuf_oneof:"result"`
	EntityName string               `protobuf:"bytes,4,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	Body       string               `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	Version    int64                `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	CreatedAt  string               `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ExchangeLog) Reset() {
	*x = ExchangeLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeLog) ProtoMessage() {}

func (x *ExchangeLog) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeLog.ProtoReflect.Descriptor instead.
func (*ExchangeLog) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{12}
}

func (x *ExchangeLog) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *ExchangeLog) GetResult() isExchangeLog_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *ExchangeLog) GetEntityId() int64 {
	if x, ok := x.GetResult().(*ExchangeLog_EntityId); ok {
		return x.EntityId
	}
	return 0
}

func (x *ExchangeLog) GetOrder() *Order {
	if x, ok := x.GetResult().(*ExchangeLog_Order); ok {
		return x.Order
	}
	return nil
}

func (x *ExchangeLog) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

func (x *ExchangeLog) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *ExchangeLog) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ExchangeLog) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type isExchangeLog_Result interface {
	isExchangeLog_Result()
}

type ExchangeLog_EntityId struct {
	EntityId int64 `protobuf:"varint,2,opt,name=entity_id,json=entityId,proto3,oneof"`
}

type ExchangeLog_Order struct {
	Order *Order `protobuf:"bytes,3,opt,name=order,proto3,oneof"`
}

func (*ExchangeLog_EntityId) isExchangeLog_Result() {}

func (*ExchangeLog_Order) isExchangeLog_Result() {}

type Outbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Result:
	//	*Outbox_EntityId
	//	*Outbox_Order
	Result       isOutbox_Result `protobuf_oneof:"result"`
	EntityName   string          `protobuf:"bytes,4,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	EventType    string          `protobuf:"bytes,5,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	LastMessage  *string         `protobuf:"bytes,6,opt,name=last_message,json=lastMessage,proto3,oneof" json:"last_message,omitempty"`
	Status       string          `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Destination  string          `protobuf:"bytes,8,opt,name=destination,proto3" json:"destination,omitempty"`
	Body         string          `protobuf:"bytes,9,opt,name=body,proto3" json:"body,omitempty"`
	RetryCounter int32           `protobuf:"varint,10,opt,name=retry_counter,json=retryCounter,proto3" json:"retry_counter,omitempty"`
	Version      int64           `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
	CreatedAt    string          `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    string          `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Outbox) Reset() {
	*x = Outbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Outbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outbox) ProtoMessage() {}

func (x *Outbox) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outbox.ProtoReflect.Descriptor instead.
func (*Outbox) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{13}
}

func (x *Outbox) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *Outbox) GetResult() isOutbox_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *Outbox) GetEntityId() int64 {
	if x, ok := x.GetResult().(*Outbox_EntityId); ok {
		return x.EntityId
	}
	return 0
}

func (x *Outbox) GetOrder() *Order {
	if x, ok := x.GetResult().(*Outbox_Order); ok {
		return x.Order
	}
	return nil
}

func (x *Outbox) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

func (x *Outbox) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *Outbox) GetLastMessage() string {
	if x != nil && x.LastMessage != nil {
		return *x.LastMessage
	}
	return ""
}

func (x *Outbox) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Outbox) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *Outbox) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Outbox) GetRetryCounter() int32 {
	if x != nil {
		return x.RetryCounter
	}
	return 0
}

func (x *Outbox) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Outbox) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Outbox) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type isOutbox_Result interface {
	isOutbox_Result()
}

type Outbox_EntityId struct {
	EntityId int64 `protobuf:"varint,2,opt,name=entity_id,json=entityId,proto3,oneof"`
}

type Outbox_Order struct {
	Order *Order `protobuf:"bytes,3,opt,name=order,proto3,oneof"`
}

func (*Outbox_EntityId) isOutbox_Result() {}

func (*Outbox_Order) isOutbox_Result() {}

type GetListOutBoxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedOrders bool         `protobuf:"varint,2,opt,name=need_orders,json=needOrders,proto3" json:"need_orders,omitempty"`
	Pagination *ListRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetListOutBoxRequest) Reset() {
	*x = GetListOutBoxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListOutBoxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListOutBoxRequest) ProtoMessage() {}

func (x *GetListOutBoxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListOutBoxRequest.ProtoReflect.Descriptor instead.
func (*GetListOutBoxRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{14}
}

func (x *GetListOutBoxRequest) GetNeedOrders() bool {
	if x != nil {
		return x.NeedOrders
	}
	return false
}

func (x *GetListOutBoxRequest) GetPagination() *ListRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetListOutBoxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *Paginate `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64     `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error  `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*Outbox `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetListOutBoxResponse) Reset() {
	*x = GetListOutBoxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListOutBoxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListOutBoxResponse) ProtoMessage() {}

func (x *GetListOutBoxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListOutBoxResponse.ProtoReflect.Descriptor instead.
func (*GetListOutBoxResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{15}
}

func (x *GetListOutBoxResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListOutBoxResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetListOutBoxResponse) GetPagination() *Paginate {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListOutBoxResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetListOutBoxResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetListOutBoxResponse) GetData() []*Outbox {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetByIDOutBoxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetByIDOutBoxRequest) Reset() {
	*x = GetByIDOutBoxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDOutBoxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDOutBoxRequest) ProtoMessage() {}

func (x *GetByIDOutBoxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDOutBoxRequest.ProtoReflect.Descriptor instead.
func (*GetByIDOutBoxRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{16}
}

func (x *GetByIDOutBoxRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetByIDOutBoxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Outbox  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetByIDOutBoxResponse) Reset() {
	*x = GetByIDOutBoxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDOutBoxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDOutBoxResponse) ProtoMessage() {}

func (x *GetByIDOutBoxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDOutBoxResponse.ProtoReflect.Descriptor instead.
func (*GetByIDOutBoxResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{17}
}

func (x *GetByIDOutBoxResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetByIDOutBoxResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetByIDOutBoxResponse) GetData() *Outbox {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetByIDOutBoxResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetByIDOutBoxResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type SetByIDOutboxBodyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NewBody string `protobuf:"bytes,2,opt,name=new_body,json=newBody,proto3" json:"new_body,omitempty"`
}

func (x *SetByIDOutboxBodyRequest) Reset() {
	*x = SetByIDOutboxBodyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetByIDOutboxBodyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetByIDOutboxBodyRequest) ProtoMessage() {}

func (x *SetByIDOutboxBodyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetByIDOutboxBodyRequest.ProtoReflect.Descriptor instead.
func (*SetByIDOutboxBodyRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{18}
}

func (x *SetByIDOutboxBodyRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetByIDOutboxBodyRequest) GetNewBody() string {
	if x != nil {
		return x.NewBody
	}
	return ""
}

type SetByIDOutboxBodyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Code    int64    `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *SetByIDOutboxBodyResponse) Reset() {
	*x = SetByIDOutboxBodyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetByIDOutboxBodyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetByIDOutboxBodyResponse) ProtoMessage() {}

func (x *SetByIDOutboxBodyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetByIDOutboxBodyResponse.ProtoReflect.Descriptor instead.
func (*SetByIDOutboxBodyResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{19}
}

func (x *SetByIDOutboxBodyResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SetByIDOutboxBodyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SetByIDOutboxBodyResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SetByIDOutboxBodyResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type DeleteByIDOutboxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteByIDOutboxRequest) Reset() {
	*x = DeleteByIDOutboxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteByIDOutboxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteByIDOutboxRequest) ProtoMessage() {}

func (x *DeleteByIDOutboxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteByIDOutboxRequest.ProtoReflect.Descriptor instead.
func (*DeleteByIDOutboxRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteByIDOutboxRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteByIDOutboxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Code    int64    `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *DeleteByIDOutboxResponse) Reset() {
	*x = DeleteByIDOutboxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteByIDOutboxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteByIDOutboxResponse) ProtoMessage() {}

func (x *DeleteByIDOutboxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteByIDOutboxResponse.ProtoReflect.Descriptor instead.
func (*DeleteByIDOutboxResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteByIDOutboxResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeleteByIDOutboxResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteByIDOutboxResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteByIDOutboxResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetListOrderHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedOrders    bool         `protobuf:"varint,2,opt,name=need_orders,json=needOrders,proto3" json:"need_orders,omitempty"`
	NeedPositions bool         `protobuf:"varint,3,opt,name=need_positions,json=needPositions,proto3" json:"need_positions,omitempty"`
	Pagination    *ListRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetListOrderHistoryRequest) Reset() {
	*x = GetListOrderHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListOrderHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListOrderHistoryRequest) ProtoMessage() {}

func (x *GetListOrderHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListOrderHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetListOrderHistoryRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{22}
}

func (x *GetListOrderHistoryRequest) GetNeedOrders() bool {
	if x != nil {
		return x.NeedOrders
	}
	return false
}

func (x *GetListOrderHistoryRequest) GetNeedPositions() bool {
	if x != nil {
		return x.NeedPositions
	}
	return false
}

func (x *GetListOrderHistoryRequest) GetPagination() *ListRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetListOrderHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *Paginate       `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64           `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error        `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*OrderHistory `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetListOrderHistoryResponse) Reset() {
	*x = GetListOrderHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListOrderHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListOrderHistoryResponse) ProtoMessage() {}

func (x *GetListOrderHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListOrderHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetListOrderHistoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{23}
}

func (x *GetListOrderHistoryResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListOrderHistoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetListOrderHistoryResponse) GetPagination() *Paginate {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListOrderHistoryResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetListOrderHistoryResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetListOrderHistoryResponse) GetData() []*OrderHistory {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetByIDOrderHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetByIDOrderHistoryRequest) Reset() {
	*x = GetByIDOrderHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDOrderHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDOrderHistoryRequest) ProtoMessage() {}

func (x *GetByIDOrderHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDOrderHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetByIDOrderHistoryRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{24}
}

func (x *GetByIDOrderHistoryRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetByIDOrderHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *OrderHistory `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64         `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error      `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetByIDOrderHistoryResponse) Reset() {
	*x = GetByIDOrderHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDOrderHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDOrderHistoryResponse) ProtoMessage() {}

func (x *GetByIDOrderHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDOrderHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetByIDOrderHistoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{25}
}

func (x *GetByIDOrderHistoryResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetByIDOrderHistoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetByIDOrderHistoryResponse) GetData() *OrderHistory {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetByIDOrderHistoryResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetByIDOrderHistoryResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetListPositionHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedPositions bool         `protobuf:"varint,2,opt,name=need_positions,json=needPositions,proto3" json:"need_positions,omitempty"`
	Pagination    *ListRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetListPositionHistoryRequest) Reset() {
	*x = GetListPositionHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListPositionHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListPositionHistoryRequest) ProtoMessage() {}

func (x *GetListPositionHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListPositionHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetListPositionHistoryRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{26}
}

func (x *GetListPositionHistoryRequest) GetNeedPositions() bool {
	if x != nil {
		return x.NeedPositions
	}
	return false
}

func (x *GetListPositionHistoryRequest) GetPagination() *ListRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetListPositionHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *Paginate          `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64              `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error           `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*PositionHistory `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetListPositionHistoryResponse) Reset() {
	*x = GetListPositionHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListPositionHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListPositionHistoryResponse) ProtoMessage() {}

func (x *GetListPositionHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListPositionHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetListPositionHistoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{27}
}

func (x *GetListPositionHistoryResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListPositionHistoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetListPositionHistoryResponse) GetPagination() *Paginate {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListPositionHistoryResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetListPositionHistoryResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetListPositionHistoryResponse) GetData() []*PositionHistory {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetByIDPositionHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetByIDPositionHistoryRequest) Reset() {
	*x = GetByIDPositionHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDPositionHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDPositionHistoryRequest) ProtoMessage() {}

func (x *GetByIDPositionHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDPositionHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetByIDPositionHistoryRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{28}
}

func (x *GetByIDPositionHistoryRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetByIDPositionHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string           `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *PositionHistory `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64            `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error         `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetByIDPositionHistoryResponse) Reset() {
	*x = GetByIDPositionHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDPositionHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDPositionHistoryResponse) ProtoMessage() {}

func (x *GetByIDPositionHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDPositionHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetByIDPositionHistoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{29}
}

func (x *GetByIDPositionHistoryResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetByIDPositionHistoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetByIDPositionHistoryResponse) GetData() *PositionHistory {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetByIDPositionHistoryResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetByIDPositionHistoryResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetListOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedPositions bool         `protobuf:"varint,2,opt,name=need_positions,json=needPositions,proto3" json:"need_positions,omitempty"`
	Pagination    *ListRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetListOrderRequest) Reset() {
	*x = GetListOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListOrderRequest) ProtoMessage() {}

func (x *GetListOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListOrderRequest.ProtoReflect.Descriptor instead.
func (*GetListOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{30}
}

func (x *GetListOrderRequest) GetNeedPositions() bool {
	if x != nil {
		return x.NeedPositions
	}
	return false
}

func (x *GetListOrderRequest) GetPagination() *ListRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetListOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *Paginate `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64     `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error  `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*Order  `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetListOrderResponse) Reset() {
	*x = GetListOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListOrderResponse) ProtoMessage() {}

func (x *GetListOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListOrderResponse.ProtoReflect.Descriptor instead.
func (*GetListOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{31}
}

func (x *GetListOrderResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetListOrderResponse) GetPagination() *Paginate {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListOrderResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetListOrderResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetListOrderResponse) GetData() []*Order {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetByIDOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetByIDOrderRequest) Reset() {
	*x = GetByIDOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDOrderRequest) ProtoMessage() {}

func (x *GetByIDOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDOrderRequest.ProtoReflect.Descriptor instead.
func (*GetByIDOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{32}
}

func (x *GetByIDOrderRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetByIDOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Order   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetByIDOrderResponse) Reset() {
	*x = GetByIDOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDOrderResponse) ProtoMessage() {}

func (x *GetByIDOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDOrderResponse.ProtoReflect.Descriptor instead.
func (*GetByIDOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{33}
}

func (x *GetByIDOrderResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetByIDOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetByIDOrderResponse) GetData() *Order {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetByIDOrderResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetByIDOrderResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_proto_order_proto protoreflect.FileDescriptor

var file_proto_order_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x3b, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x4e, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4d, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xeb, 0x0e,
	0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61,
	0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12,
	0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x6c, 0x61, 0x6d, 0x6f,
	0x64, 0x61, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x70, 0x65,
	0x6e, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x70, 0x61,
	0x79, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x50, 0x61, 0x79,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x69, 0x73, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x67, 0x61, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x47, 0x61, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x73, 0x31, 0x6d, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x67, 0x73, 0x31, 0x6d, 0x4d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6c, 0x61,
	0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x12, 0x6c, 0x61, 0x6d, 0x6f,
	0x64, 0x61, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e,
	0x12, 0x34, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x69, 0x7a, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0b, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72,
	0x75, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x52, 0x75, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x61, 0x73, 0x43,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x69,
	0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x73, 0x31, 0x6d,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x61,
	0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x72, 0x75, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x78, 0x22, 0xc5, 0x02, 0x0a, 0x0f,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x22, 0x82, 0x04,
	0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52,
	0x75, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63,
	0x61, 0x6e, 0x42, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x72,
	0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x72, 0x75, 0x22, 0xbe, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x22, 0x91, 0x24, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x63, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x63, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x63, 0x72, 0x6d,
	0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x63, 0x72,
	0x6d, 0x53, 0x69, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x64, 0x6d,
	0x69, 0x74, 0x61, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x61, 0x64, 0x55, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x64, 0x6f, 0x6c, 0x79, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x64, 0x6f, 0x6c, 0x79, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x6f, 0x6c, 0x79, 0x61, 0x6d, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0e,
	0x64, 0x6f, 0x6c, 0x79, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x10, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x12, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x77, 0x6d, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x6d, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x75, 0x6d,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x75,
	0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x10, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75,
	0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x69, 0x76,
	0x65, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0c, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0c, 0x52, 0x10, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x1b,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x15, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x13, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10,
	0x52, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x76, 0x7a, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52,
	0x0d, 0x70, 0x76, 0x7a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x76, 0x7a, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x50, 0x56, 0x5a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x48, 0x12, 0x52, 0x0b,
	0x70, 0x76, 0x7a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0b, 0x66, 0x75, 0x6c,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0d, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x16, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1a, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x05, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x68, 0x6f, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x07, 0x68, 0x6f, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x22, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x23, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x24, 0x52, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x25, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26,
	0x52, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27,
	0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x28,
	0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x29, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x17, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x6b, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x14, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52, 0x0b,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x2e, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52,
	0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x31, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x32,
	0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x31, 0x73, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x48, 0x33, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x31, 0x73, 0x47, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x34, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x35, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x36, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x37, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x4d, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x38, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x39, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x61, 0x6e, 0x74, 0x6c, 0x65, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x73, 0x6d, 0x61, 0x6e, 0x74, 0x6c, 0x65, 0x12,
	0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x71, 0x72, 0x18, 0x51, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x51, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x1e, 0x70, 0x72, 0x65, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x3a, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x44, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x6f, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3b, 0x52, 0x19, 0x70, 0x72, 0x65, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x5f, 0x62,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x56, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x69, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x61, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x6f, 0x6c, 0x79, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x64, 0x6f, 0x6c, 0x79, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x69, 0x64,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x61, 0x6d, 0x6f,
	0x64, 0x61, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x6b, 0x5f, 0x69,
	0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x70, 0x76, 0x7a, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x76, 0x7a, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x6b, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x31, 0x73, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x72,
	0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x70, 0x72, 0x65, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x70,
	0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x22, 0xb9, 0x02, 0x0a, 0x0c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6c,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xac, 0x03, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x7b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x75, 0x74, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x22, 0xda, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74,
	0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x26,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x22, 0x45, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x65, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x88, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x87,
	0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x33, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x22, 0x8a, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xec,
	0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xba,
	0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xd8,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xa6, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2a, 0x9b, 0x01, 0x0a, 0x0e, 0x46, 0x6f,
	0x72, 0x42, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x62, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x6f, 0x74,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x62, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x31, 0x10, 0x04,
	0x12, 0x15, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x74, 0x6f, 0x70, 0x32, 0x10, 0x05, 0x2a, 0x27, 0x0a, 0x0b, 0x50, 0x56, 0x5a, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x08, 0x62, 0x6f, 0x78, 0x62, 0x65, 0x72,
	0x72, 0x79, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x10, 0x01,
	0x32, 0x83, 0x07, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x4f,
	0x75, 0x74, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a,
	0x11, 0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x20, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x42,
	0x79, 0x49, 0x44, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1f, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x79, 0x49, 0x44, 0x12, 0x22, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x25, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1b, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x67, 0x6f, 0x2f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_order_proto_rawDescOnce sync.Once
	file_proto_order_proto_rawDescData = file_proto_order_proto_rawDesc
)

func file_proto_order_proto_rawDescGZIP() []byte {
	file_proto_order_proto_rawDescOnce.Do(func() {
		file_proto_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_order_proto_rawDescData)
	})
	return file_proto_order_proto_rawDescData
}

var file_proto_order_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_order_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_proto_order_proto_goTypes = []interface{}{
	(ForBloggerType)(0),                    // 0: orders.ForBloggerType
	(PVZProvider)(0),                       // 1: orders.PVZProvider
	(*ListRequest)(nil),                    // 2: orders.ListRequest
	(*Paginate)(nil),                       // 3: orders.Paginate
	(*Error)(nil),                          // 4: orders.Error
	(*PositionStatus)(nil),                 // 5: orders.PositionStatus
	(*Position)(nil),                       // 6: orders.Position
	(*PositionHistory)(nil),                // 7: orders.PositionHistory
	(*StatusGroup)(nil),                    // 8: orders.StatusGroup
	(*OrderStatus)(nil),                    // 9: orders.OrderStatus
	(*StatusTimer)(nil),                    // 10: orders.StatusTimer
	(*Flow)(nil),                           // 11: orders.Flow
	(*Order)(nil),                          // 12: orders.Order
	(*OrderHistory)(nil),                   // 13: orders.OrderHistory
	(*ExchangeLog)(nil),                    // 14: orders.ExchangeLog
	(*Outbox)(nil),                         // 15: orders.Outbox
	(*GetListOutBoxRequest)(nil),           // 16: orders.GetListOutBoxRequest
	(*GetListOutBoxResponse)(nil),          // 17: orders.GetListOutBoxResponse
	(*GetByIDOutBoxRequest)(nil),           // 18: orders.GetByIDOutBoxRequest
	(*GetByIDOutBoxResponse)(nil),          // 19: orders.GetByIDOutBoxResponse
	(*SetByIDOutboxBodyRequest)(nil),       // 20: orders.SetByIDOutboxBodyRequest
	(*SetByIDOutboxBodyResponse)(nil),      // 21: orders.SetByIDOutboxBodyResponse
	(*DeleteByIDOutboxRequest)(nil),        // 22: orders.DeleteByIDOutboxRequest
	(*DeleteByIDOutboxResponse)(nil),       // 23: orders.DeleteByIDOutboxResponse
	(*GetListOrderHistoryRequest)(nil),     // 24: orders.GetListOrderHistoryRequest
	(*GetListOrderHistoryResponse)(nil),    // 25: orders.GetListOrderHistoryResponse
	(*GetByIDOrderHistoryRequest)(nil),     // 26: orders.GetByIDOrderHistoryRequest
	(*GetByIDOrderHistoryResponse)(nil),    // 27: orders.GetByIDOrderHistoryResponse
	(*GetListPositionHistoryRequest)(nil),  // 28: orders.GetListPositionHistoryRequest
	(*GetListPositionHistoryResponse)(nil), // 29: orders.GetListPositionHistoryResponse
	(*GetByIDPositionHistoryRequest)(nil),  // 30: orders.GetByIDPositionHistoryRequest
	(*GetByIDPositionHistoryResponse)(nil), // 31: orders.GetByIDPositionHistoryResponse
	(*GetListOrderRequest)(nil),            // 32: orders.GetListOrderRequest
	(*GetListOrderResponse)(nil),           // 33: orders.GetListOrderResponse
	(*GetByIDOrderRequest)(nil),            // 34: orders.GetByIDOrderRequest
	(*GetByIDOrderResponse)(nil),           // 35: orders.GetByIDOrderResponse
}
var file_proto_order_proto_depIdxs = []int32{
	5,  // 0: orders.Position.status:type_name -> orders.PositionStatus
	6,  // 1: orders.PositionHistory.position:type_name -> orders.Position
	8,  // 2: orders.OrderStatus.group:type_name -> orders.StatusGroup
	9,  // 3: orders.StatusTimer.status:type_name -> orders.OrderStatus
	9,  // 4: orders.Order.status:type_name -> orders.OrderStatus
	1,  // 5: orders.Order.pvz_provider:type_name -> orders.PVZProvider
	0,  // 6: orders.Order.for_blogger:type_name -> orders.ForBloggerType
	6,  // 7: orders.Order.positions:type_name -> orders.Position
	12, // 8: orders.OrderHistory.order:type_name -> orders.Order
	12, // 9: orders.ExchangeLog.order:type_name -> orders.Order
	12, // 10: orders.Outbox.order:type_name -> orders.Order
	2,  // 11: orders.GetListOutBoxRequest.pagination:type_name -> orders.ListRequest
	3,  // 12: orders.GetListOutBoxResponse.pagination:type_name -> orders.Paginate
	4,  // 13: orders.GetListOutBoxResponse.errors:type_name -> orders.Error
	15, // 14: orders.GetListOutBoxResponse.data:type_name -> orders.Outbox
	15, // 15: orders.GetByIDOutBoxResponse.data:type_name -> orders.Outbox
	4,  // 16: orders.GetByIDOutBoxResponse.errors:type_name -> orders.Error
	4,  // 17: orders.SetByIDOutboxBodyResponse.errors:type_name -> orders.Error
	4,  // 18: orders.DeleteByIDOutboxResponse.errors:type_name -> orders.Error
	2,  // 19: orders.GetListOrderHistoryRequest.pagination:type_name -> orders.ListRequest
	3,  // 20: orders.GetListOrderHistoryResponse.pagination:type_name -> orders.Paginate
	4,  // 21: orders.GetListOrderHistoryResponse.errors:type_name -> orders.Error
	13, // 22: orders.GetListOrderHistoryResponse.data:type_name -> orders.OrderHistory
	13, // 23: orders.GetByIDOrderHistoryResponse.data:type_name -> orders.OrderHistory
	4,  // 24: orders.GetByIDOrderHistoryResponse.errors:type_name -> orders.Error
	2,  // 25: orders.GetListPositionHistoryRequest.pagination:type_name -> orders.ListRequest
	3,  // 26: orders.GetListPositionHistoryResponse.pagination:type_name -> orders.Paginate
	4,  // 27: orders.GetListPositionHistoryResponse.errors:type_name -> orders.Error
	7,  // 28: orders.GetListPositionHistoryResponse.data:type_name -> orders.PositionHistory
	7,  // 29: orders.GetByIDPositionHistoryResponse.data:type_name -> orders.PositionHistory
	4,  // 30: orders.GetByIDPositionHistoryResponse.errors:type_name -> orders.Error
	2,  // 31: orders.GetListOrderRequest.pagination:type_name -> orders.ListRequest
	3,  // 32: orders.GetListOrderResponse.pagination:type_name -> orders.Paginate
	4,  // 33: orders.GetListOrderResponse.errors:type_name -> orders.Error
	12, // 34: orders.GetListOrderResponse.data:type_name -> orders.Order
	12, // 35: orders.GetByIDOrderResponse.data:type_name -> orders.Order
	4,  // 36: orders.GetByIDOrderResponse.errors:type_name -> orders.Error
	16, // 37: orders.OrderService.GetOutboxList:input_type -> orders.GetListOutBoxRequest
	18, // 38: orders.OrderService.GetOutboxByID:input_type -> orders.GetByIDOutBoxRequest
	20, // 39: orders.OrderService.SetOutboxBodyByID:input_type -> orders.SetByIDOutboxBodyRequest
	22, // 40: orders.OrderService.DeleteOutboxByID:input_type -> orders.DeleteByIDOutboxRequest
	24, // 41: orders.OrderService.GetOrderHistoryList:input_type -> orders.GetListOrderHistoryRequest
	26, // 42: orders.OrderService.GetOrderHistoryByID:input_type -> orders.GetByIDOrderHistoryRequest
	28, // 43: orders.OrderService.GetPositionHistoryList:input_type -> orders.GetListPositionHistoryRequest
	30, // 44: orders.OrderService.GetPositionHistoryByID:input_type -> orders.GetByIDPositionHistoryRequest
	32, // 45: orders.OrderService.GetOrderList:input_type -> orders.GetListOrderRequest
	34, // 46: orders.OrderService.GetOrderByID:input_type -> orders.GetByIDOrderRequest
	17, // 47: orders.OrderService.GetOutboxList:output_type -> orders.GetListOutBoxResponse
	19, // 48: orders.OrderService.GetOutboxByID:output_type -> orders.GetByIDOutBoxResponse
	21, // 49: orders.OrderService.SetOutboxBodyByID:output_type -> orders.SetByIDOutboxBodyResponse
	23, // 50: orders.OrderService.DeleteOutboxByID:output_type -> orders.DeleteByIDOutboxResponse
	25, // 51: orders.OrderService.GetOrderHistoryList:output_type -> orders.GetListOrderHistoryResponse
	27, // 52: orders.OrderService.GetOrderHistoryByID:output_type -> orders.GetByIDOrderHistoryResponse
	29, // 53: orders.OrderService.GetPositionHistoryList:output_type -> orders.GetListPositionHistoryResponse
	31, // 54: orders.OrderService.GetPositionHistoryByID:output_type -> orders.GetByIDPositionHistoryResponse
	33, // 55: orders.OrderService.GetOrderList:output_type -> orders.GetListOrderResponse
	35, // 56: orders.OrderService.GetOrderByID:output_type -> orders.GetByIDOrderResponse
	47, // [47:57] is the sub-list for method output_type
	37, // [37:47] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_proto_order_proto_init() }
func file_proto_order_proto_init() {
	if File_proto_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Outbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListOutBoxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListOutBoxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDOutBoxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDOutBoxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetByIDOutboxBodyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetByIDOutboxBodyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteByIDOutboxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteByIDOutboxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListOrderHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListOrderHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDOrderHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDOrderHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListPositionHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListPositionHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDPositionHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDPositionHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_order_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*PositionHistory_EntityId)(nil),
		(*PositionHistory_Position)(nil),
	}
	file_proto_order_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*OrderHistory_Order)(nil),
		(*OrderHistory_EntityId)(nil),
	}
	file_proto_order_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ExchangeLog_EntityId)(nil),
		(*ExchangeLog_Order)(nil),
	}
	file_proto_order_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Outbox_EntityId)(nil),
		(*Outbox_Order)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_order_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_order_proto_goTypes,
		DependencyIndexes: file_proto_order_proto_depIdxs,
		EnumInfos:         file_proto_order_proto_enumTypes,
		MessageInfos:      file_proto_order_proto_msgTypes,
	}.Build()
	File_proto_order_proto = out.File
	file_proto_order_proto_rawDesc = nil
	file_proto_order_proto_goTypes = nil
	file_proto_order_proto_depIdxs = nil
}
