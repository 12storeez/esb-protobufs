// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: stocks.proto

package stocks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StocksServiceClient is the client API for StocksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StocksServiceClient interface {
	List(ctx context.Context, in *ListStocksRequest, opts ...grpc.CallOption) (*ListStocksResponse, error)
}

type stocksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStocksServiceClient(cc grpc.ClientConnInterface) StocksServiceClient {
	return &stocksServiceClient{cc}
}

func (c *stocksServiceClient) List(ctx context.Context, in *ListStocksRequest, opts ...grpc.CallOption) (*ListStocksResponse, error) {
	out := new(ListStocksResponse)
	err := c.cc.Invoke(ctx, "/stocks.StocksService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StocksServiceServer is the server API for StocksService service.
// All implementations should embed UnimplementedStocksServiceServer
// for forward compatibility
type StocksServiceServer interface {
	List(context.Context, *ListStocksRequest) (*ListStocksResponse, error)
}

// UnimplementedStocksServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStocksServiceServer struct {
}

func (UnimplementedStocksServiceServer) List(context.Context, *ListStocksRequest) (*ListStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeStocksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StocksServiceServer will
// result in compilation errors.
type UnsafeStocksServiceServer interface {
	mustEmbedUnimplementedStocksServiceServer()
}

func RegisterStocksServiceServer(s grpc.ServiceRegistrar, srv StocksServiceServer) {
	s.RegisterService(&StocksService_ServiceDesc, srv)
}

func _StocksService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StocksServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocks.StocksService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StocksServiceServer).List(ctx, req.(*ListStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StocksService_ServiceDesc is the grpc.ServiceDesc for StocksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StocksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stocks.StocksService",
	HandlerType: (*StocksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _StocksService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stocks.proto",
}

// StocksTokenServiceClient is the client API for StocksTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StocksTokenServiceClient interface {
	Token(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TokenStocksResponse, error)
}

type stocksTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStocksTokenServiceClient(cc grpc.ClientConnInterface) StocksTokenServiceClient {
	return &stocksTokenServiceClient{cc}
}

func (c *stocksTokenServiceClient) Token(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TokenStocksResponse, error) {
	out := new(TokenStocksResponse)
	err := c.cc.Invoke(ctx, "/stocks.StocksTokenService/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StocksTokenServiceServer is the server API for StocksTokenService service.
// All implementations should embed UnimplementedStocksTokenServiceServer
// for forward compatibility
type StocksTokenServiceServer interface {
	Token(context.Context, *emptypb.Empty) (*TokenStocksResponse, error)
}

// UnimplementedStocksTokenServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStocksTokenServiceServer struct {
}

func (UnimplementedStocksTokenServiceServer) Token(context.Context, *emptypb.Empty) (*TokenStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}

// UnsafeStocksTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StocksTokenServiceServer will
// result in compilation errors.
type UnsafeStocksTokenServiceServer interface {
	mustEmbedUnimplementedStocksTokenServiceServer()
}

func RegisterStocksTokenServiceServer(s grpc.ServiceRegistrar, srv StocksTokenServiceServer) {
	s.RegisterService(&StocksTokenService_ServiceDesc, srv)
}

func _StocksTokenService_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StocksTokenServiceServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocks.StocksTokenService/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StocksTokenServiceServer).Token(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StocksTokenService_ServiceDesc is the grpc.ServiceDesc for StocksTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StocksTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stocks.StocksTokenService",
	HandlerType: (*StocksTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Token",
			Handler:    _StocksTokenService_Token_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stocks.proto",
}
