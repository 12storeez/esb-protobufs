// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.9
// source: proto/order.proto

package order

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PaginationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *PaginationRequest) Reset() {
	*x = PaginationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationRequest) ProtoMessage() {}

func (x *PaginationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationRequest.ProtoReflect.Descriptor instead.
func (*PaginationRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{0}
}

func (x *PaginationRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type PaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total  uint32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PaginationResponse) Reset() {
	*x = PaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationResponse) ProtoMessage() {}

func (x *PaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationResponse.ProtoReflect.Descriptor instead.
func (*PaginationResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{1}
}

func (x *PaginationResponse) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationResponse) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PaginationResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target  string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Code    int32  `protobuf:"zigzag32,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetListRequest) Reset() {
	*x = GetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequest) ProtoMessage() {}

func (x *GetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequest.ProtoReflect.Descriptor instead.
func (*GetListRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{3}
}

func (x *GetListRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetListRequestForOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedOrders bool               `protobuf:"varint,2,opt,name=need_orders,json=needOrders,proto3" json:"need_orders,omitempty"`
	Pagination *PaginationRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetListRequestForOrder) Reset() {
	*x = GetListRequestForOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequestForOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequestForOrder) ProtoMessage() {}

func (x *GetListRequestForOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequestForOrder.ProtoReflect.Descriptor instead.
func (*GetListRequestForOrder) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{4}
}

func (x *GetListRequestForOrder) GetNeedOrders() bool {
	if x != nil {
		return x.NeedOrders
	}
	return false
}

func (x *GetListRequestForOrder) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetListRequestForPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedPositions bool               `protobuf:"varint,2,opt,name=need_positions,json=needPositions,proto3" json:"need_positions,omitempty"`
	Pagination    *PaginationRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetListRequestForPosition) Reset() {
	*x = GetListRequestForPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequestForPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequestForPosition) ProtoMessage() {}

func (x *GetListRequestForPosition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequestForPosition.ProtoReflect.Descriptor instead.
func (*GetListRequestForPosition) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{5}
}

func (x *GetListRequestForPosition) GetNeedPositions() bool {
	if x != nil {
		return x.NeedPositions
	}
	return false
}

func (x *GetListRequestForPosition) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetListRequestForOrderAndPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedOrders    bool               `protobuf:"varint,2,opt,name=need_orders,json=needOrders,proto3" json:"need_orders,omitempty"`
	NeedPositions bool               `protobuf:"varint,3,opt,name=need_positions,json=needPositions,proto3" json:"need_positions,omitempty"`
	Pagination    *PaginationRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetListRequestForOrderAndPosition) Reset() {
	*x = GetListRequestForOrderAndPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequestForOrderAndPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequestForOrderAndPosition) ProtoMessage() {}

func (x *GetListRequestForOrderAndPosition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequestForOrderAndPosition.ProtoReflect.Descriptor instead.
func (*GetListRequestForOrderAndPosition) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{6}
}

func (x *GetListRequestForOrderAndPosition) GetNeedOrders() bool {
	if x != nil {
		return x.NeedOrders
	}
	return false
}

func (x *GetListRequestForOrderAndPosition) GetNeedPositions() bool {
	if x != nil {
		return x.NeedPositions
	}
	return false
}

func (x *GetListRequestForOrderAndPosition) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetByIDRequest) Reset() {
	*x = GetByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDRequest) ProtoMessage() {}

func (x *GetByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDRequest.ProtoReflect.Descriptor instead.
func (*GetByIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{7}
}

func (x *GetByIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PositionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InternalTitle  string `protobuf:"bytes,2,opt,name=internal_title,json=internalTitle,proto3" json:"internal_title,omitempty"`
	Code           int64  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	IsCancelStatus bool   `protobuf:"varint,4,opt,name=is_cancel_status,json=isCancelStatus,proto3" json:"is_cancel_status,omitempty"`
	CreatedAt      string `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      string `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PositionStatus) Reset() {
	*x = PositionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionStatus) ProtoMessage() {}

func (x *PositionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionStatus.ProtoReflect.Descriptor instead.
func (*PositionStatus) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{8}
}

func (x *PositionStatus) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PositionStatus) GetInternalTitle() string {
	if x != nil {
		return x.InternalTitle
	}
	return ""
}

func (x *PositionStatus) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PositionStatus) GetIsCancelStatus() bool {
	if x != nil {
		return x.IsCancelStatus
	}
	return false
}

func (x *PositionStatus) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *PositionStatus) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LamodaId            *string         `protobuf:"bytes,2,opt,name=lamoda_id,json=lamodaId,proto3,oneof" json:"lamoda_id,omitempty"`
	LamodaLastStatus    *string         `protobuf:"bytes,3,opt,name=lamoda_last_status,json=lamodaLastStatus,proto3,oneof" json:"lamoda_last_status,omitempty"`
	Status              *PositionStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	PriceBeforeDiscount float32         `protobuf:"fixed32,5,opt,name=price_before_discount,json=priceBeforeDiscount,proto3" json:"price_before_discount,omitempty"`
	Price               float32         `protobuf:"fixed32,6,opt,name=price,proto3" json:"price,omitempty"`
	Sum                 float32         `protobuf:"fixed32,7,opt,name=sum,proto3" json:"sum,omitempty"`
	DiscountSum         float32         `protobuf:"fixed32,8,opt,name=discount_sum,json=discountSum,proto3" json:"discount_sum,omitempty"`
	DiscountManual      float32         `protobuf:"fixed32,9,opt,name=discount_manual,json=discountManual,proto3" json:"discount_manual,omitempty"`
	DiscountPromo       float32         `protobuf:"fixed32,10,opt,name=discount_promo,json=discountPromo,proto3" json:"discount_promo,omitempty"`
	DiscountBonus       float32         `protobuf:"fixed32,11,opt,name=discount_bonus,json=discountBonus,proto3" json:"discount_bonus,omitempty"`
	SpentPromo          float32         `protobuf:"fixed32,12,opt,name=spent_promo,json=spentPromo,proto3" json:"spent_promo,omitempty"`
	SpentBonus          float32         `protobuf:"fixed32,13,opt,name=spent_bonus,json=spentBonus,proto3" json:"spent_bonus,omitempty"`
	IsPayed             bool            `protobuf:"varint,14,opt,name=is_payed,json=isPayed,proto3" json:"is_payed,omitempty"`
	IsPreorder          bool            `protobuf:"varint,15,opt,name=is_preorder,json=isPreorder,proto3" json:"is_preorder,omitempty"`
	IsClickAndCollect   bool            `protobuf:"varint,16,opt,name=is_click_and_collect,json=isClickAndCollect,proto3" json:"is_click_and_collect,omitempty"`
	IsPresent           bool            `protobuf:"varint,17,opt,name=is_present,json=isPresent,proto3" json:"is_present,omitempty"`
	IsGaSendEnabled     bool            `protobuf:"varint,18,opt,name=is_ga_send_enabled,json=isGaSendEnabled,proto3" json:"is_ga_send_enabled,omitempty"`
	StoreCode           *int64          `protobuf:"varint,19,opt,name=store_code,json=storeCode,proto3,oneof" json:"store_code,omitempty"`
	Gs1MMark            *string         `protobuf:"bytes,20,opt,name=gs1m_mark,json=gs1mMark,proto3,oneof" json:"gs1m_mark,omitempty"`
	CancelReason        *string         `protobuf:"bytes,21,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	ReturnReason        *string         `protobuf:"bytes,22,opt,name=return_reason,json=returnReason,proto3,oneof" json:"return_reason,omitempty"`
	LamodaCancelReason  *string         `protobuf:"bytes,23,opt,name=lamoda_cancel_reason,json=lamodaCancelReason,proto3,oneof" json:"lamoda_cancel_reason,omitempty"`
	LastChangeSource    *string         `protobuf:"bytes,24,opt,name=last_change_source,json=lastChangeSource,proto3,oneof" json:"last_change_source,omitempty"`
	ProductGuid         string          `protobuf:"bytes,25,opt,name=product_guid,json=productGuid,proto3" json:"product_guid,omitempty"`
	Article             string          `protobuf:"bytes,26,opt,name=article,proto3" json:"article,omitempty"`
	Barcode             int64           `protobuf:"varint,27,opt,name=barcode,proto3" json:"barcode,omitempty"`
	ProductTitleRu      string          `protobuf:"bytes,28,opt,name=product_title_ru,json=productTitleRu,proto3" json:"product_title_ru,omitempty"`
	ProductTitleEn      string          `protobuf:"bytes,29,opt,name=product_title_en,json=productTitleEn,proto3" json:"product_title_en,omitempty"`
	ColorModelTitleRu   *string         `protobuf:"bytes,30,opt,name=color_model_title_ru,json=colorModelTitleRu,proto3,oneof" json:"color_model_title_ru,omitempty"`
	ColorModelTitleEn   *string         `protobuf:"bytes,31,opt,name=color_model_title_en,json=colorModelTitleEn,proto3,oneof" json:"color_model_title_en,omitempty"`
	ProductImage        *string         `protobuf:"bytes,32,opt,name=product_image,json=productImage,proto3,oneof" json:"product_image,omitempty"`
	SizeTitleRu         string          `protobuf:"bytes,33,opt,name=size_title_ru,json=sizeTitleRu,proto3" json:"size_title_ru,omitempty"`
	SizeTitleEn         string          `protobuf:"bytes,34,opt,name=size_title_en,json=sizeTitleEn,proto3" json:"size_title_en,omitempty"`
	ColorGuid           string          `protobuf:"bytes,35,opt,name=color_guid,json=colorGuid,proto3" json:"color_guid,omitempty"`
	ColorHex            *string         `protobuf:"bytes,36,opt,name=color_hex,json=colorHex,proto3,oneof" json:"color_hex,omitempty"`
	ColorTitleRu        string          `protobuf:"bytes,37,opt,name=color_title_ru,json=colorTitleRu,proto3" json:"color_title_ru,omitempty"`
	ColorTitleEn        string          `protobuf:"bytes,38,opt,name=color_title_en,json=colorTitleEn,proto3" json:"color_title_en,omitempty"`
	ColorHasCircle      bool            `protobuf:"varint,39,opt,name=color_has_circle,json=colorHasCircle,proto3" json:"color_has_circle,omitempty"`
	CreatedAt           string          `protobuf:"bytes,40,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt           string          `protobuf:"bytes,41,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{9}
}

func (x *Position) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Position) GetLamodaId() string {
	if x != nil && x.LamodaId != nil {
		return *x.LamodaId
	}
	return ""
}

func (x *Position) GetLamodaLastStatus() string {
	if x != nil && x.LamodaLastStatus != nil {
		return *x.LamodaLastStatus
	}
	return ""
}

func (x *Position) GetStatus() *PositionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Position) GetPriceBeforeDiscount() float32 {
	if x != nil {
		return x.PriceBeforeDiscount
	}
	return 0
}

func (x *Position) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Position) GetSum() float32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *Position) GetDiscountSum() float32 {
	if x != nil {
		return x.DiscountSum
	}
	return 0
}

func (x *Position) GetDiscountManual() float32 {
	if x != nil {
		return x.DiscountManual
	}
	return 0
}

func (x *Position) GetDiscountPromo() float32 {
	if x != nil {
		return x.DiscountPromo
	}
	return 0
}

func (x *Position) GetDiscountBonus() float32 {
	if x != nil {
		return x.DiscountBonus
	}
	return 0
}

func (x *Position) GetSpentPromo() float32 {
	if x != nil {
		return x.SpentPromo
	}
	return 0
}

func (x *Position) GetSpentBonus() float32 {
	if x != nil {
		return x.SpentBonus
	}
	return 0
}

func (x *Position) GetIsPayed() bool {
	if x != nil {
		return x.IsPayed
	}
	return false
}

func (x *Position) GetIsPreorder() bool {
	if x != nil {
		return x.IsPreorder
	}
	return false
}

func (x *Position) GetIsClickAndCollect() bool {
	if x != nil {
		return x.IsClickAndCollect
	}
	return false
}

func (x *Position) GetIsPresent() bool {
	if x != nil {
		return x.IsPresent
	}
	return false
}

func (x *Position) GetIsGaSendEnabled() bool {
	if x != nil {
		return x.IsGaSendEnabled
	}
	return false
}

func (x *Position) GetStoreCode() int64 {
	if x != nil && x.StoreCode != nil {
		return *x.StoreCode
	}
	return 0
}

func (x *Position) GetGs1MMark() string {
	if x != nil && x.Gs1MMark != nil {
		return *x.Gs1MMark
	}
	return ""
}

func (x *Position) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *Position) GetReturnReason() string {
	if x != nil && x.ReturnReason != nil {
		return *x.ReturnReason
	}
	return ""
}

func (x *Position) GetLamodaCancelReason() string {
	if x != nil && x.LamodaCancelReason != nil {
		return *x.LamodaCancelReason
	}
	return ""
}

func (x *Position) GetLastChangeSource() string {
	if x != nil && x.LastChangeSource != nil {
		return *x.LastChangeSource
	}
	return ""
}

func (x *Position) GetProductGuid() string {
	if x != nil {
		return x.ProductGuid
	}
	return ""
}

func (x *Position) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *Position) GetBarcode() int64 {
	if x != nil {
		return x.Barcode
	}
	return 0
}

func (x *Position) GetProductTitleRu() string {
	if x != nil {
		return x.ProductTitleRu
	}
	return ""
}

func (x *Position) GetProductTitleEn() string {
	if x != nil {
		return x.ProductTitleEn
	}
	return ""
}

func (x *Position) GetColorModelTitleRu() string {
	if x != nil && x.ColorModelTitleRu != nil {
		return *x.ColorModelTitleRu
	}
	return ""
}

func (x *Position) GetColorModelTitleEn() string {
	if x != nil && x.ColorModelTitleEn != nil {
		return *x.ColorModelTitleEn
	}
	return ""
}

func (x *Position) GetProductImage() string {
	if x != nil && x.ProductImage != nil {
		return *x.ProductImage
	}
	return ""
}

func (x *Position) GetSizeTitleRu() string {
	if x != nil {
		return x.SizeTitleRu
	}
	return ""
}

func (x *Position) GetSizeTitleEn() string {
	if x != nil {
		return x.SizeTitleEn
	}
	return ""
}

func (x *Position) GetColorGuid() string {
	if x != nil {
		return x.ColorGuid
	}
	return ""
}

func (x *Position) GetColorHex() string {
	if x != nil && x.ColorHex != nil {
		return *x.ColorHex
	}
	return ""
}

func (x *Position) GetColorTitleRu() string {
	if x != nil {
		return x.ColorTitleRu
	}
	return ""
}

func (x *Position) GetColorTitleEn() string {
	if x != nil {
		return x.ColorTitleEn
	}
	return ""
}

func (x *Position) GetColorHasCircle() bool {
	if x != nil {
		return x.ColorHasCircle
	}
	return false
}

func (x *Position) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Position) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type PositionHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoryId int64 `protobuf:"varint,1,opt,name=history_id,json=historyId,proto3" json:"history_id,omitempty"`
	// Types that are assignable to Result:
	//	*PositionHistory_EntityId
	//	*PositionHistory_Position
	Result    isPositionHistory_Result `protobuf_oneof:"result"`
	Source    *string                  `protobuf:"bytes,4,opt,name=source,proto3,oneof" json:"source,omitempty"`
	UserGuid  *string                  `protobuf:"bytes,5,opt,name=user_guid,json=userGuid,proto3,oneof" json:"user_guid,omitempty"`
	FieldName string                   `protobuf:"bytes,6,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	OldValue  *string                  `protobuf:"bytes,7,opt,name=old_value,json=oldValue,proto3,oneof" json:"old_value,omitempty"`
	NewValue  string                   `protobuf:"bytes,8,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	CreatedAt string                   `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Ip        *string                  `protobuf:"bytes,10,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
}

func (x *PositionHistory) Reset() {
	*x = PositionHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionHistory) ProtoMessage() {}

func (x *PositionHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionHistory.ProtoReflect.Descriptor instead.
func (*PositionHistory) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{10}
}

func (x *PositionHistory) GetHistoryId() int64 {
	if x != nil {
		return x.HistoryId
	}
	return 0
}

func (m *PositionHistory) GetResult() isPositionHistory_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *PositionHistory) GetEntityId() int64 {
	if x, ok := x.GetResult().(*PositionHistory_EntityId); ok {
		return x.EntityId
	}
	return 0
}

func (x *PositionHistory) GetPosition() *Position {
	if x, ok := x.GetResult().(*PositionHistory_Position); ok {
		return x.Position
	}
	return nil
}

func (x *PositionHistory) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *PositionHistory) GetUserGuid() string {
	if x != nil && x.UserGuid != nil {
		return *x.UserGuid
	}
	return ""
}

func (x *PositionHistory) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *PositionHistory) GetOldValue() string {
	if x != nil && x.OldValue != nil {
		return *x.OldValue
	}
	return ""
}

func (x *PositionHistory) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

func (x *PositionHistory) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *PositionHistory) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

type isPositionHistory_Result interface {
	isPositionHistory_Result()
}

type PositionHistory_EntityId struct {
	EntityId int64 `protobuf:"varint,2,opt,name=entity_id,json=entityId,proto3,oneof"`
}

type PositionHistory_Position struct {
	Position *Position `protobuf:"bytes,3,opt,name=position,proto3,oneof"`
}

func (*PositionHistory_EntityId) isPositionHistory_Result() {}

func (*PositionHistory_Position) isPositionHistory_Result() {}

type StatusGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleRu            string `protobuf:"bytes,2,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
	BgColor            string `protobuf:"bytes,3,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	TextColor          string `protobuf:"bytes,4,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	TextColorWithoutBg string `protobuf:"bytes,5,opt,name=text_color_without_bg,json=textColorWithoutBg,proto3" json:"text_color_without_bg,omitempty"`
	Icon               string `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	CreatedAt          string `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          string `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *StatusGroup) Reset() {
	*x = StatusGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusGroup) ProtoMessage() {}

func (x *StatusGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusGroup.ProtoReflect.Descriptor instead.
func (*StatusGroup) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{11}
}

func (x *StatusGroup) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StatusGroup) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

func (x *StatusGroup) GetBgColor() string {
	if x != nil {
		return x.BgColor
	}
	return ""
}

func (x *StatusGroup) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *StatusGroup) GetTextColorWithoutBg() string {
	if x != nil {
		return x.TextColorWithoutBg
	}
	return ""
}

func (x *StatusGroup) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *StatusGroup) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *StatusGroup) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type OrderStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleInternal     string       `protobuf:"bytes,2,opt,name=title_internal,json=titleInternal,proto3" json:"title_internal,omitempty"`
	TitleRu           *string      `protobuf:"bytes,3,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	Code              int64        `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Group             *StatusGroup `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	IsReturned        bool         `protobuf:"varint,6,opt,name=is_returned,json=isReturned,proto3" json:"is_returned,omitempty"`
	CanBeReturned     bool         `protobuf:"varint,7,opt,name=can_be_returned,json=canBeReturned,proto3" json:"can_be_returned,omitempty"`
	IsCanceled        bool         `protobuf:"varint,8,opt,name=is_canceled,json=isCanceled,proto3" json:"is_canceled,omitempty"`
	CanBeCanceled     bool         `protobuf:"varint,9,opt,name=can_be_canceled,json=canBeCanceled,proto3" json:"can_be_canceled,omitempty"`
	IsPreorder        bool         `protobuf:"varint,10,opt,name=is_preorder,json=isPreorder,proto3" json:"is_preorder,omitempty"`
	IsOfflineShipment bool         `protobuf:"varint,11,opt,name=is_offline_shipment,json=isOfflineShipment,proto3" json:"is_offline_shipment,omitempty"`
	IsClickAndCollect bool         `protobuf:"varint,12,opt,name=is_click_and_collect,json=isClickAndCollect,proto3" json:"is_click_and_collect,omitempty"`
	CreatedAt         string       `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         string       `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *OrderStatus) Reset() {
	*x = OrderStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatus) ProtoMessage() {}

func (x *OrderStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatus.ProtoReflect.Descriptor instead.
func (*OrderStatus) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{12}
}

func (x *OrderStatus) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderStatus) GetTitleInternal() string {
	if x != nil {
		return x.TitleInternal
	}
	return ""
}

func (x *OrderStatus) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *OrderStatus) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OrderStatus) GetGroup() *StatusGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *OrderStatus) GetIsReturned() bool {
	if x != nil {
		return x.IsReturned
	}
	return false
}

func (x *OrderStatus) GetCanBeReturned() bool {
	if x != nil {
		return x.CanBeReturned
	}
	return false
}

func (x *OrderStatus) GetIsCanceled() bool {
	if x != nil {
		return x.IsCanceled
	}
	return false
}

func (x *OrderStatus) GetCanBeCanceled() bool {
	if x != nil {
		return x.CanBeCanceled
	}
	return false
}

func (x *OrderStatus) GetIsPreorder() bool {
	if x != nil {
		return x.IsPreorder
	}
	return false
}

func (x *OrderStatus) GetIsOfflineShipment() bool {
	if x != nil {
		return x.IsOfflineShipment
	}
	return false
}

func (x *OrderStatus) GetIsClickAndCollect() bool {
	if x != nil {
		return x.IsClickAndCollect
	}
	return false
}

func (x *OrderStatus) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *OrderStatus) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type StatusTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChangeTime *string      `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3,oneof" json:"change_time,omitempty"`
	Status     *OrderStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt  string       `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  string       `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *StatusTimer) Reset() {
	*x = StatusTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusTimer) ProtoMessage() {}

func (x *StatusTimer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusTimer.ProtoReflect.Descriptor instead.
func (*StatusTimer) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{13}
}

func (x *StatusTimer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StatusTimer) GetChangeTime() string {
	if x != nil && x.ChangeTime != nil {
		return *x.ChangeTime
	}
	return ""
}

func (x *StatusTimer) GetStatus() *OrderStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *StatusTimer) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *StatusTimer) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type Flow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FlowId          int64 `protobuf:"varint,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	CurrentStatusId int64 `protobuf:"varint,3,opt,name=current_status_id,json=currentStatusId,proto3" json:"current_status_id,omitempty"`
	NextStatusId    int64 `protobuf:"varint,4,opt,name=next_status_id,json=nextStatusId,proto3" json:"next_status_id,omitempty"`
}

func (x *Flow) Reset() {
	*x = Flow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{14}
}

func (x *Flow) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Flow) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *Flow) GetCurrentStatusId() int64 {
	if x != nil {
		return x.CurrentStatusId
	}
	return 0
}

func (x *Flow) GetNextStatusId() int64 {
	if x != nil {
		return x.NextStatusId
	}
	return 0
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                     int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt                              string       `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                              string       `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	RcrmId                                 *int64       `protobuf:"varint,4,opt,name=rcrm_id,json=rcrmId,proto3,oneof" json:"rcrm_id,omitempty"`
	RcrmSite                               *string      `protobuf:"bytes,5,opt,name=rcrm_site,json=rcrmSite,proto3,oneof" json:"rcrm_site,omitempty"`
	MindboxId                              *int64       `protobuf:"varint,6,opt,name=mindbox_id,json=mindboxId,proto3,oneof" json:"mindbox_id,omitempty"`
	AdmitadUid                             *string      `protobuf:"bytes,7,opt,name=admitad_uid,json=admitadUid,proto3,oneof" json:"admitad_uid,omitempty"`
	DolyameId                              *string      `protobuf:"bytes,8,opt,name=dolyame_id,json=dolyameId,proto3,oneof" json:"dolyame_id,omitempty"`
	DolyameVersion                         *int64       `protobuf:"varint,9,opt,name=dolyame_version,json=dolyameVersion,proto3,oneof" json:"dolyame_version,omitempty"`
	LamodaId                               *string      `protobuf:"bytes,10,opt,name=lamoda_id,json=lamodaId,proto3,oneof" json:"lamoda_id,omitempty"`
	LamodaLastStatus                       *string      `protobuf:"bytes,11,opt,name=lamoda_last_status,json=lamodaLastStatus,proto3,oneof" json:"lamoda_last_status,omitempty"`
	LamodaCancelReason                     *string      `protobuf:"bytes,12,opt,name=lamoda_cancel_reason,json=lamodaCancelReason,proto3,oneof" json:"lamoda_cancel_reason,omitempty"`
	UserGuid                               string       `protobuf:"bytes,13,opt,name=user_guid,json=userGuid,proto3" json:"user_guid,omitempty"`
	Status                                 *OrderStatus `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	StatusComment                          *string      `protobuf:"bytes,15,opt,name=status_comment,json=statusComment,proto3,oneof" json:"status_comment,omitempty"`
	StatusWms                              string       `protobuf:"bytes,16,opt,name=status_wms,json=statusWms,proto3" json:"status_wms,omitempty"`
	Sum                                    float32      `protobuf:"fixed32,17,opt,name=sum,proto3" json:"sum,omitempty"`
	SurchargeSum                           float32      `protobuf:"fixed32,18,opt,name=surcharge_sum,json=surchargeSum,proto3" json:"surcharge_sum,omitempty"`
	SurchargeComment                       *string      `protobuf:"bytes,19,opt,name=surcharge_comment,json=surchargeComment,proto3,oneof" json:"surcharge_comment,omitempty"`
	DeliveryPrice                          float32      `protobuf:"fixed32,20,opt,name=delivery_price,json=deliveryPrice,proto3" json:"delivery_price,omitempty"`
	DiscountSum                            float32      `protobuf:"fixed32,21,opt,name=discount_sum,json=discountSum,proto3" json:"discount_sum,omitempty"`
	DiscountManual                         float32      `protobuf:"fixed32,22,opt,name=discount_manual,json=discountManual,proto3" json:"discount_manual,omitempty"`
	DiscountPromo                          float32      `protobuf:"fixed32,23,opt,name=discount_promo,json=discountPromo,proto3" json:"discount_promo,omitempty"`
	DiscountBonus                          float32      `protobuf:"fixed32,24,opt,name=discount_bonus,json=discountBonus,proto3" json:"discount_bonus,omitempty"`
	SpentBonus                             float32      `protobuf:"fixed32,25,opt,name=spent_bonus,json=spentBonus,proto3" json:"spent_bonus,omitempty"`
	GivenBonus                             float32      `protobuf:"fixed32,26,opt,name=given_bonus,json=givenBonus,proto3" json:"given_bonus,omitempty"`
	SpentPromo                             float32      `protobuf:"fixed32,27,opt,name=spent_promo,json=spentPromo,proto3" json:"spent_promo,omitempty"`
	PromoCodeId                            *string      `protobuf:"bytes,28,opt,name=promo_code_id,json=promoCodeId,proto3,oneof" json:"promo_code_id,omitempty"`
	PaymentStatus                          *string      `protobuf:"bytes,29,opt,name=payment_status,json=paymentStatus,proto3,oneof" json:"payment_status,omitempty"`
	PaymentDate                            *string      `protobuf:"bytes,30,opt,name=payment_date,json=paymentDate,proto3,oneof" json:"payment_date,omitempty"`
	DeliveryTypeId                         *int64       `protobuf:"varint,31,opt,name=delivery_type_id,json=deliveryTypeId,proto3,oneof" json:"delivery_type_id,omitempty"`
	DeliveryTypeCode                       *string      `protobuf:"bytes,32,opt,name=delivery_type_code,json=deliveryTypeCode,proto3,oneof" json:"delivery_type_code,omitempty"`
	DeliveryTypeName                       *string      `protobuf:"bytes,33,opt,name=delivery_type_name,json=deliveryTypeName,proto3,oneof" json:"delivery_type_name,omitempty"`
	DeliveryTypeMode                       *string      `protobuf:"bytes,34,opt,name=delivery_type_mode,json=deliveryTypeMode,proto3,oneof" json:"delivery_type_mode,omitempty"`
	DeliveryTransportCompanyModeId         *int64       `protobuf:"varint,35,opt,name=delivery_transport_company_mode_id,json=deliveryTransportCompanyModeId,proto3,oneof" json:"delivery_transport_company_mode_id,omitempty"`
	DeliveryTransportCompanyModeCode       *string      `protobuf:"bytes,36,opt,name=delivery_transport_company_mode_code,json=deliveryTransportCompanyModeCode,proto3,oneof" json:"delivery_transport_company_mode_code,omitempty"`
	DeliveryTransportCompanyModeName       *string      `protobuf:"bytes,37,opt,name=delivery_transport_company_mode_name,json=deliveryTransportCompanyModeName,proto3,oneof" json:"delivery_transport_company_mode_name,omitempty"`
	DeliverySlug                           *string      `protobuf:"bytes,38,opt,name=delivery_slug,json=deliverySlug,proto3,oneof" json:"delivery_slug,omitempty"`
	CurrencyIso                            string       `protobuf:"bytes,39,opt,name=currency_iso,json=currencyIso,proto3" json:"currency_iso,omitempty"`
	DeliveryDateChangedCount               int64        `protobuf:"varint,40,opt,name=delivery_date_changed_count,json=deliveryDateChangedCount,proto3" json:"delivery_date_changed_count,omitempty"`
	DeliveryTrackNumber                    *string      `protobuf:"bytes,41,opt,name=delivery_track_number,json=deliveryTrackNumber,proto3,oneof" json:"delivery_track_number,omitempty"`
	DeliveryInnerTrackNumber               *string      `protobuf:"bytes,42,opt,name=delivery_inner_track_number,json=deliveryInnerTrackNumber,proto3,oneof" json:"delivery_inner_track_number,omitempty"`
	DeliveryComment                        *string      `protobuf:"bytes,43,opt,name=delivery_comment,json=deliveryComment,proto3,oneof" json:"delivery_comment,omitempty"`
	PvzProviderId                          *string      `protobuf:"bytes,44,opt,name=pvz_provider_id,json=pvzProviderId,proto3,oneof" json:"pvz_provider_id,omitempty"`
	PvzProvider                            *string      `protobuf:"bytes,45,opt,name=pvz_provider,json=pvzProvider,proto3,oneof" json:"pvz_provider,omitempty"`
	OrderCountryIsoCode                    *string      `protobuf:"bytes,46,opt,name=order_country_iso_code,json=orderCountryIsoCode,proto3,oneof" json:"order_country_iso_code,omitempty"`
	GeoIdType                              *string      `protobuf:"bytes,47,opt,name=geo_id_type,json=geoIdType,proto3,oneof" json:"geo_id_type,omitempty"`
	GeoJson                                *string      `protobuf:"bytes,48,opt,name=geo_json,json=geoJson,proto3,oneof" json:"geo_json,omitempty"`
	FullAddress                            *string      `protobuf:"bytes,49,opt,name=full_address,json=fullAddress,proto3,oneof" json:"full_address,omitempty"`
	FullAddressGeoId                       *string      `protobuf:"bytes,50,opt,name=full_address_geo_id,json=fullAddressGeoId,proto3,oneof" json:"full_address_geo_id,omitempty"`
	CountryIsoCode                         *string      `protobuf:"bytes,51,opt,name=country_iso_code,json=countryIsoCode,proto3,oneof" json:"country_iso_code,omitempty"`
	Region                                 *string      `protobuf:"bytes,52,opt,name=region,proto3,oneof" json:"region,omitempty"`
	RegionGeoId                            *string      `protobuf:"bytes,53,opt,name=region_geo_id,json=regionGeoId,proto3,oneof" json:"region_geo_id,omitempty"`
	City                                   *string      `protobuf:"bytes,54,opt,name=city,proto3,oneof" json:"city,omitempty"`
	CityGeoId                              *string      `protobuf:"bytes,55,opt,name=city_geo_id,json=cityGeoId,proto3,oneof" json:"city_geo_id,omitempty"`
	Street                                 *string      `protobuf:"bytes,56,opt,name=street,proto3,oneof" json:"street,omitempty"`
	StreetGeoId                            *string      `protobuf:"bytes,57,opt,name=street_geo_id,json=streetGeoId,proto3,oneof" json:"street_geo_id,omitempty"`
	House                                  *string      `protobuf:"bytes,58,opt,name=house,proto3,oneof" json:"house,omitempty"`
	Housing                                *string      `protobuf:"bytes,59,opt,name=housing,proto3,oneof" json:"housing,omitempty"`
	Building                               *string      `protobuf:"bytes,60,opt,name=building,proto3,oneof" json:"building,omitempty"`
	Entrance                               *string      `protobuf:"bytes,61,opt,name=entrance,proto3,oneof" json:"entrance,omitempty"`
	Floor                                  *string      `protobuf:"bytes,62,opt,name=floor,proto3,oneof" json:"floor,omitempty"`
	Flat                                   *string      `protobuf:"bytes,63,opt,name=flat,proto3,oneof" json:"flat,omitempty"`
	PostalCode                             *string      `protobuf:"bytes,64,opt,name=postal_code,json=postalCode,proto3,oneof" json:"postal_code,omitempty"`
	RecipientFirstName                     *string      `protobuf:"bytes,65,opt,name=recipient_first_name,json=recipientFirstName,proto3,oneof" json:"recipient_first_name,omitempty"`
	RecipientLastName                      *string      `protobuf:"bytes,66,opt,name=recipient_last_name,json=recipientLastName,proto3,oneof" json:"recipient_last_name,omitempty"`
	RecipientPhone                         *string      `protobuf:"bytes,67,opt,name=recipient_phone,json=recipientPhone,proto3,oneof" json:"recipient_phone,omitempty"`
	RecipientEmail                         *string      `protobuf:"bytes,68,opt,name=recipient_email,json=recipientEmail,proto3,oneof" json:"recipient_email,omitempty"`
	RecipientComment                       *string      `protobuf:"bytes,69,opt,name=recipient_comment,json=recipientComment,proto3,oneof" json:"recipient_comment,omitempty"`
	ManagerComment                         *string      `protobuf:"bytes,70,opt,name=manager_comment,json=managerComment,proto3,oneof" json:"manager_comment,omitempty"`
	ManagerGuid                            *string      `protobuf:"bytes,71,opt,name=manager_guid,json=managerGuid,proto3,oneof" json:"manager_guid,omitempty"`
	ManagerProcessingReason                *string      `protobuf:"bytes,72,opt,name=manager_processing_reason,json=managerProcessingReason,proto3,oneof" json:"manager_processing_reason,omitempty"`
	ReturnDeliveryTypeId                   *int64       `protobuf:"varint,73,opt,name=return_delivery_type_id,json=returnDeliveryTypeId,proto3,oneof" json:"return_delivery_type_id,omitempty"`
	ReturnDeliveryTypeCode                 *string      `protobuf:"bytes,74,opt,name=return_delivery_type_code,json=returnDeliveryTypeCode,proto3,oneof" json:"return_delivery_type_code,omitempty"`
	ReturnDeliveryTypeName                 *string      `protobuf:"bytes,75,opt,name=return_delivery_type_name,json=returnDeliveryTypeName,proto3,oneof" json:"return_delivery_type_name,omitempty"`
	ReturnDeliveryTypeMode                 *string      `protobuf:"bytes,76,opt,name=return_delivery_type_mode,json=returnDeliveryTypeMode,proto3,oneof" json:"return_delivery_type_mode,omitempty"`
	ReturnDeliveryTransportCompanyModeId   *int64       `protobuf:"varint,77,opt,name=return_delivery_transport_company_mode_id,json=returnDeliveryTransportCompanyModeId,proto3,oneof" json:"return_delivery_transport_company_mode_id,omitempty"`
	ReturnDeliveryTransportCompanyModeCode *string      `protobuf:"bytes,78,opt,name=return_delivery_transport_company_mode_code,json=returnDeliveryTransportCompanyModeCode,proto3,oneof" json:"return_delivery_transport_company_mode_code,omitempty"`
	ReturnDeliveryTransportCompanyModeName *string      `protobuf:"bytes,79,opt,name=return_delivery_transport_company_mode_name,json=returnDeliveryTransportCompanyModeName,proto3,oneof" json:"return_delivery_transport_company_mode_name,omitempty"`
	ReturnMoney                            *string      `protobuf:"bytes,80,opt,name=return_money,json=returnMoney,proto3,oneof" json:"return_money,omitempty"`
	ReturnStoreCode                        *int64       `protobuf:"varint,81,opt,name=return_store_code,json=returnStoreCode,proto3,oneof" json:"return_store_code,omitempty"`
	ReturnReason                           *string      `protobuf:"bytes,82,opt,name=return_reason,json=returnReason,proto3,oneof" json:"return_reason,omitempty"`
	ReturnDatetime                         *string      `protobuf:"bytes,83,opt,name=return_datetime,json=returnDatetime,proto3,oneof" json:"return_datetime,omitempty"`
	CancelReason                           *string      `protobuf:"bytes,84,opt,name=cancel_reason,json=cancelReason,proto3,oneof" json:"cancel_reason,omitempty"`
	OrderMethod                            *string      `protobuf:"bytes,85,opt,name=order_method,json=orderMethod,proto3,oneof" json:"order_method,omitempty"`
	LastChangeSource                       *string      `protobuf:"bytes,86,opt,name=last_change_source,json=lastChangeSource,proto3,oneof" json:"last_change_source,omitempty"`
	Version                                int64        `protobuf:"varint,87,opt,name=version,proto3" json:"version,omitempty"`
	Seller_1SGuid                          *string      `protobuf:"bytes,88,opt,name=seller_1s_guid,json=seller1sGuid,proto3,oneof" json:"seller_1s_guid,omitempty"`
	SellerStoreId                          *string      `protobuf:"bytes,89,opt,name=seller_store_id,json=sellerStoreId,proto3,oneof" json:"seller_store_id,omitempty"`
	SellerUserGuid                         *string      `protobuf:"bytes,90,opt,name=seller_user_guid,json=sellerUserGuid,proto3,oneof" json:"seller_user_guid,omitempty"`
	SellerName                             *string      `protobuf:"bytes,91,opt,name=seller_name,json=sellerName,proto3,oneof" json:"seller_name,omitempty"`
	Org                                    *string      `protobuf:"bytes,92,opt,name=org,proto3,oneof" json:"org,omitempty"`
	StoreCode                              *int64       `protobuf:"varint,93,opt,name=store_code,json=storeCode,proto3,oneof" json:"store_code,omitempty"`
	StorageExpiredAt                       *string      `protobuf:"bytes,94,opt,name=storage_expired_at,json=storageExpiredAt,proto3,oneof" json:"storage_expired_at,omitempty"`
	IsIncreasedStorageExpiredAt            bool         `protobuf:"varint,95,opt,name=is_increased_storage_expired_at,json=isIncreasedStorageExpiredAt,proto3" json:"is_increased_storage_expired_at,omitempty"`
	IsDismantle                            bool         `protobuf:"varint,96,opt,name=is_dismantle,json=isDismantle,proto3" json:"is_dismantle,omitempty"`
	IsOrderedByQr                          bool         `protobuf:"varint,97,opt,name=is_ordered_by_qr,json=isOrderedByQr,proto3" json:"is_ordered_by_qr,omitempty"`
	IsCallRequired                         bool         `protobuf:"varint,98,opt,name=is_call_required,json=isCallRequired,proto3" json:"is_call_required,omitempty"`
	OrderType                              string       `protobuf:"bytes,99,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	PreorderPlannedDeliveryFrom            *string      `protobuf:"bytes,100,opt,name=preorder_planned_delivery_from,json=preorderPlannedDeliveryFrom,proto3,oneof" json:"preorder_planned_delivery_from,omitempty"`
	PreorderPlannedDeliveryTo              *string      `protobuf:"bytes,101,opt,name=preorder_planned_delivery_to,json=preorderPlannedDeliveryTo,proto3,oneof" json:"preorder_planned_delivery_to,omitempty"`
	ForBlogger                             string       `protobuf:"bytes,102,opt,name=for_blogger,json=forBlogger,proto3" json:"for_blogger,omitempty"`
	PaymentUrl                             *string      `protobuf:"bytes,103,opt,name=payment_url,json=paymentUrl,proto3,oneof" json:"payment_url,omitempty"`
	PaymentConfirmationToken               *string      `protobuf:"bytes,104,opt,name=payment_confirmation_token,json=paymentConfirmationToken,proto3,oneof" json:"payment_confirmation_token,omitempty"`
	DeliveryDate                           *string      `protobuf:"bytes,105,opt,name=delivery_date,json=deliveryDate,proto3,oneof" json:"delivery_date,omitempty"`
	DeliveryTime                           *string      `protobuf:"bytes,106,opt,name=delivery_time,json=deliveryTime,proto3,oneof" json:"delivery_time,omitempty"`
	Positions                              []*Position  `protobuf:"bytes,107,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{15}
}

func (x *Order) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Order) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Order) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Order) GetRcrmId() int64 {
	if x != nil && x.RcrmId != nil {
		return *x.RcrmId
	}
	return 0
}

func (x *Order) GetRcrmSite() string {
	if x != nil && x.RcrmSite != nil {
		return *x.RcrmSite
	}
	return ""
}

func (x *Order) GetMindboxId() int64 {
	if x != nil && x.MindboxId != nil {
		return *x.MindboxId
	}
	return 0
}

func (x *Order) GetAdmitadUid() string {
	if x != nil && x.AdmitadUid != nil {
		return *x.AdmitadUid
	}
	return ""
}

func (x *Order) GetDolyameId() string {
	if x != nil && x.DolyameId != nil {
		return *x.DolyameId
	}
	return ""
}

func (x *Order) GetDolyameVersion() int64 {
	if x != nil && x.DolyameVersion != nil {
		return *x.DolyameVersion
	}
	return 0
}

func (x *Order) GetLamodaId() string {
	if x != nil && x.LamodaId != nil {
		return *x.LamodaId
	}
	return ""
}

func (x *Order) GetLamodaLastStatus() string {
	if x != nil && x.LamodaLastStatus != nil {
		return *x.LamodaLastStatus
	}
	return ""
}

func (x *Order) GetLamodaCancelReason() string {
	if x != nil && x.LamodaCancelReason != nil {
		return *x.LamodaCancelReason
	}
	return ""
}

func (x *Order) GetUserGuid() string {
	if x != nil {
		return x.UserGuid
	}
	return ""
}

func (x *Order) GetStatus() *OrderStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Order) GetStatusComment() string {
	if x != nil && x.StatusComment != nil {
		return *x.StatusComment
	}
	return ""
}

func (x *Order) GetStatusWms() string {
	if x != nil {
		return x.StatusWms
	}
	return ""
}

func (x *Order) GetSum() float32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *Order) GetSurchargeSum() float32 {
	if x != nil {
		return x.SurchargeSum
	}
	return 0
}

func (x *Order) GetSurchargeComment() string {
	if x != nil && x.SurchargeComment != nil {
		return *x.SurchargeComment
	}
	return ""
}

func (x *Order) GetDeliveryPrice() float32 {
	if x != nil {
		return x.DeliveryPrice
	}
	return 0
}

func (x *Order) GetDiscountSum() float32 {
	if x != nil {
		return x.DiscountSum
	}
	return 0
}

func (x *Order) GetDiscountManual() float32 {
	if x != nil {
		return x.DiscountManual
	}
	return 0
}

func (x *Order) GetDiscountPromo() float32 {
	if x != nil {
		return x.DiscountPromo
	}
	return 0
}

func (x *Order) GetDiscountBonus() float32 {
	if x != nil {
		return x.DiscountBonus
	}
	return 0
}

func (x *Order) GetSpentBonus() float32 {
	if x != nil {
		return x.SpentBonus
	}
	return 0
}

func (x *Order) GetGivenBonus() float32 {
	if x != nil {
		return x.GivenBonus
	}
	return 0
}

func (x *Order) GetSpentPromo() float32 {
	if x != nil {
		return x.SpentPromo
	}
	return 0
}

func (x *Order) GetPromoCodeId() string {
	if x != nil && x.PromoCodeId != nil {
		return *x.PromoCodeId
	}
	return ""
}

func (x *Order) GetPaymentStatus() string {
	if x != nil && x.PaymentStatus != nil {
		return *x.PaymentStatus
	}
	return ""
}

func (x *Order) GetPaymentDate() string {
	if x != nil && x.PaymentDate != nil {
		return *x.PaymentDate
	}
	return ""
}

func (x *Order) GetDeliveryTypeId() int64 {
	if x != nil && x.DeliveryTypeId != nil {
		return *x.DeliveryTypeId
	}
	return 0
}

func (x *Order) GetDeliveryTypeCode() string {
	if x != nil && x.DeliveryTypeCode != nil {
		return *x.DeliveryTypeCode
	}
	return ""
}

func (x *Order) GetDeliveryTypeName() string {
	if x != nil && x.DeliveryTypeName != nil {
		return *x.DeliveryTypeName
	}
	return ""
}

func (x *Order) GetDeliveryTypeMode() string {
	if x != nil && x.DeliveryTypeMode != nil {
		return *x.DeliveryTypeMode
	}
	return ""
}

func (x *Order) GetDeliveryTransportCompanyModeId() int64 {
	if x != nil && x.DeliveryTransportCompanyModeId != nil {
		return *x.DeliveryTransportCompanyModeId
	}
	return 0
}

func (x *Order) GetDeliveryTransportCompanyModeCode() string {
	if x != nil && x.DeliveryTransportCompanyModeCode != nil {
		return *x.DeliveryTransportCompanyModeCode
	}
	return ""
}

func (x *Order) GetDeliveryTransportCompanyModeName() string {
	if x != nil && x.DeliveryTransportCompanyModeName != nil {
		return *x.DeliveryTransportCompanyModeName
	}
	return ""
}

func (x *Order) GetDeliverySlug() string {
	if x != nil && x.DeliverySlug != nil {
		return *x.DeliverySlug
	}
	return ""
}

func (x *Order) GetCurrencyIso() string {
	if x != nil {
		return x.CurrencyIso
	}
	return ""
}

func (x *Order) GetDeliveryDateChangedCount() int64 {
	if x != nil {
		return x.DeliveryDateChangedCount
	}
	return 0
}

func (x *Order) GetDeliveryTrackNumber() string {
	if x != nil && x.DeliveryTrackNumber != nil {
		return *x.DeliveryTrackNumber
	}
	return ""
}

func (x *Order) GetDeliveryInnerTrackNumber() string {
	if x != nil && x.DeliveryInnerTrackNumber != nil {
		return *x.DeliveryInnerTrackNumber
	}
	return ""
}

func (x *Order) GetDeliveryComment() string {
	if x != nil && x.DeliveryComment != nil {
		return *x.DeliveryComment
	}
	return ""
}

func (x *Order) GetPvzProviderId() string {
	if x != nil && x.PvzProviderId != nil {
		return *x.PvzProviderId
	}
	return ""
}

func (x *Order) GetPvzProvider() string {
	if x != nil && x.PvzProvider != nil {
		return *x.PvzProvider
	}
	return ""
}

func (x *Order) GetOrderCountryIsoCode() string {
	if x != nil && x.OrderCountryIsoCode != nil {
		return *x.OrderCountryIsoCode
	}
	return ""
}

func (x *Order) GetGeoIdType() string {
	if x != nil && x.GeoIdType != nil {
		return *x.GeoIdType
	}
	return ""
}

func (x *Order) GetGeoJson() string {
	if x != nil && x.GeoJson != nil {
		return *x.GeoJson
	}
	return ""
}

func (x *Order) GetFullAddress() string {
	if x != nil && x.FullAddress != nil {
		return *x.FullAddress
	}
	return ""
}

func (x *Order) GetFullAddressGeoId() string {
	if x != nil && x.FullAddressGeoId != nil {
		return *x.FullAddressGeoId
	}
	return ""
}

func (x *Order) GetCountryIsoCode() string {
	if x != nil && x.CountryIsoCode != nil {
		return *x.CountryIsoCode
	}
	return ""
}

func (x *Order) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *Order) GetRegionGeoId() string {
	if x != nil && x.RegionGeoId != nil {
		return *x.RegionGeoId
	}
	return ""
}

func (x *Order) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *Order) GetCityGeoId() string {
	if x != nil && x.CityGeoId != nil {
		return *x.CityGeoId
	}
	return ""
}

func (x *Order) GetStreet() string {
	if x != nil && x.Street != nil {
		return *x.Street
	}
	return ""
}

func (x *Order) GetStreetGeoId() string {
	if x != nil && x.StreetGeoId != nil {
		return *x.StreetGeoId
	}
	return ""
}

func (x *Order) GetHouse() string {
	if x != nil && x.House != nil {
		return *x.House
	}
	return ""
}

func (x *Order) GetHousing() string {
	if x != nil && x.Housing != nil {
		return *x.Housing
	}
	return ""
}

func (x *Order) GetBuilding() string {
	if x != nil && x.Building != nil {
		return *x.Building
	}
	return ""
}

func (x *Order) GetEntrance() string {
	if x != nil && x.Entrance != nil {
		return *x.Entrance
	}
	return ""
}

func (x *Order) GetFloor() string {
	if x != nil && x.Floor != nil {
		return *x.Floor
	}
	return ""
}

func (x *Order) GetFlat() string {
	if x != nil && x.Flat != nil {
		return *x.Flat
	}
	return ""
}

func (x *Order) GetPostalCode() string {
	if x != nil && x.PostalCode != nil {
		return *x.PostalCode
	}
	return ""
}

func (x *Order) GetRecipientFirstName() string {
	if x != nil && x.RecipientFirstName != nil {
		return *x.RecipientFirstName
	}
	return ""
}

func (x *Order) GetRecipientLastName() string {
	if x != nil && x.RecipientLastName != nil {
		return *x.RecipientLastName
	}
	return ""
}

func (x *Order) GetRecipientPhone() string {
	if x != nil && x.RecipientPhone != nil {
		return *x.RecipientPhone
	}
	return ""
}

func (x *Order) GetRecipientEmail() string {
	if x != nil && x.RecipientEmail != nil {
		return *x.RecipientEmail
	}
	return ""
}

func (x *Order) GetRecipientComment() string {
	if x != nil && x.RecipientComment != nil {
		return *x.RecipientComment
	}
	return ""
}

func (x *Order) GetManagerComment() string {
	if x != nil && x.ManagerComment != nil {
		return *x.ManagerComment
	}
	return ""
}

func (x *Order) GetManagerGuid() string {
	if x != nil && x.ManagerGuid != nil {
		return *x.ManagerGuid
	}
	return ""
}

func (x *Order) GetManagerProcessingReason() string {
	if x != nil && x.ManagerProcessingReason != nil {
		return *x.ManagerProcessingReason
	}
	return ""
}

func (x *Order) GetReturnDeliveryTypeId() int64 {
	if x != nil && x.ReturnDeliveryTypeId != nil {
		return *x.ReturnDeliveryTypeId
	}
	return 0
}

func (x *Order) GetReturnDeliveryTypeCode() string {
	if x != nil && x.ReturnDeliveryTypeCode != nil {
		return *x.ReturnDeliveryTypeCode
	}
	return ""
}

func (x *Order) GetReturnDeliveryTypeName() string {
	if x != nil && x.ReturnDeliveryTypeName != nil {
		return *x.ReturnDeliveryTypeName
	}
	return ""
}

func (x *Order) GetReturnDeliveryTypeMode() string {
	if x != nil && x.ReturnDeliveryTypeMode != nil {
		return *x.ReturnDeliveryTypeMode
	}
	return ""
}

func (x *Order) GetReturnDeliveryTransportCompanyModeId() int64 {
	if x != nil && x.ReturnDeliveryTransportCompanyModeId != nil {
		return *x.ReturnDeliveryTransportCompanyModeId
	}
	return 0
}

func (x *Order) GetReturnDeliveryTransportCompanyModeCode() string {
	if x != nil && x.ReturnDeliveryTransportCompanyModeCode != nil {
		return *x.ReturnDeliveryTransportCompanyModeCode
	}
	return ""
}

func (x *Order) GetReturnDeliveryTransportCompanyModeName() string {
	if x != nil && x.ReturnDeliveryTransportCompanyModeName != nil {
		return *x.ReturnDeliveryTransportCompanyModeName
	}
	return ""
}

func (x *Order) GetReturnMoney() string {
	if x != nil && x.ReturnMoney != nil {
		return *x.ReturnMoney
	}
	return ""
}

func (x *Order) GetReturnStoreCode() int64 {
	if x != nil && x.ReturnStoreCode != nil {
		return *x.ReturnStoreCode
	}
	return 0
}

func (x *Order) GetReturnReason() string {
	if x != nil && x.ReturnReason != nil {
		return *x.ReturnReason
	}
	return ""
}

func (x *Order) GetReturnDatetime() string {
	if x != nil && x.ReturnDatetime != nil {
		return *x.ReturnDatetime
	}
	return ""
}

func (x *Order) GetCancelReason() string {
	if x != nil && x.CancelReason != nil {
		return *x.CancelReason
	}
	return ""
}

func (x *Order) GetOrderMethod() string {
	if x != nil && x.OrderMethod != nil {
		return *x.OrderMethod
	}
	return ""
}

func (x *Order) GetLastChangeSource() string {
	if x != nil && x.LastChangeSource != nil {
		return *x.LastChangeSource
	}
	return ""
}

func (x *Order) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Order) GetSeller_1SGuid() string {
	if x != nil && x.Seller_1SGuid != nil {
		return *x.Seller_1SGuid
	}
	return ""
}

func (x *Order) GetSellerStoreId() string {
	if x != nil && x.SellerStoreId != nil {
		return *x.SellerStoreId
	}
	return ""
}

func (x *Order) GetSellerUserGuid() string {
	if x != nil && x.SellerUserGuid != nil {
		return *x.SellerUserGuid
	}
	return ""
}

func (x *Order) GetSellerName() string {
	if x != nil && x.SellerName != nil {
		return *x.SellerName
	}
	return ""
}

func (x *Order) GetOrg() string {
	if x != nil && x.Org != nil {
		return *x.Org
	}
	return ""
}

func (x *Order) GetStoreCode() int64 {
	if x != nil && x.StoreCode != nil {
		return *x.StoreCode
	}
	return 0
}

func (x *Order) GetStorageExpiredAt() string {
	if x != nil && x.StorageExpiredAt != nil {
		return *x.StorageExpiredAt
	}
	return ""
}

func (x *Order) GetIsIncreasedStorageExpiredAt() bool {
	if x != nil {
		return x.IsIncreasedStorageExpiredAt
	}
	return false
}

func (x *Order) GetIsDismantle() bool {
	if x != nil {
		return x.IsDismantle
	}
	return false
}

func (x *Order) GetIsOrderedByQr() bool {
	if x != nil {
		return x.IsOrderedByQr
	}
	return false
}

func (x *Order) GetIsCallRequired() bool {
	if x != nil {
		return x.IsCallRequired
	}
	return false
}

func (x *Order) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *Order) GetPreorderPlannedDeliveryFrom() string {
	if x != nil && x.PreorderPlannedDeliveryFrom != nil {
		return *x.PreorderPlannedDeliveryFrom
	}
	return ""
}

func (x *Order) GetPreorderPlannedDeliveryTo() string {
	if x != nil && x.PreorderPlannedDeliveryTo != nil {
		return *x.PreorderPlannedDeliveryTo
	}
	return ""
}

func (x *Order) GetForBlogger() string {
	if x != nil {
		return x.ForBlogger
	}
	return ""
}

func (x *Order) GetPaymentUrl() string {
	if x != nil && x.PaymentUrl != nil {
		return *x.PaymentUrl
	}
	return ""
}

func (x *Order) GetPaymentConfirmationToken() string {
	if x != nil && x.PaymentConfirmationToken != nil {
		return *x.PaymentConfirmationToken
	}
	return ""
}

func (x *Order) GetDeliveryDate() string {
	if x != nil && x.DeliveryDate != nil {
		return *x.DeliveryDate
	}
	return ""
}

func (x *Order) GetDeliveryTime() string {
	if x != nil && x.DeliveryTime != nil {
		return *x.DeliveryTime
	}
	return ""
}

func (x *Order) GetPositions() []*Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

type OrderHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoryId int64 `protobuf:"varint,1,opt,name=history_id,json=historyId,proto3" json:"history_id,omitempty"`
	// Types that are assignable to Result:
	//	*OrderHistory_Order
	//	*OrderHistory_EntityId
	Result    isOrderHistory_Result `protobuf_oneof:"result"`
	Source    *string               `protobuf:"bytes,4,opt,name=source,proto3,oneof" json:"source,omitempty"`
	UserGuid  *string               `protobuf:"bytes,5,opt,name=user_guid,json=userGuid,proto3,oneof" json:"user_guid,omitempty"`
	FieldName string                `protobuf:"bytes,6,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	OldValue  *string               `protobuf:"bytes,7,opt,name=old_value,json=oldValue,proto3,oneof" json:"old_value,omitempty"`
	NewValue  string                `protobuf:"bytes,8,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	CreatedAt string                `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Ip        *string               `protobuf:"bytes,10,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
}

func (x *OrderHistory) Reset() {
	*x = OrderHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderHistory) ProtoMessage() {}

func (x *OrderHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderHistory.ProtoReflect.Descriptor instead.
func (*OrderHistory) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{16}
}

func (x *OrderHistory) GetHistoryId() int64 {
	if x != nil {
		return x.HistoryId
	}
	return 0
}

func (m *OrderHistory) GetResult() isOrderHistory_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *OrderHistory) GetOrder() *Order {
	if x, ok := x.GetResult().(*OrderHistory_Order); ok {
		return x.Order
	}
	return nil
}

func (x *OrderHistory) GetEntityId() int64 {
	if x, ok := x.GetResult().(*OrderHistory_EntityId); ok {
		return x.EntityId
	}
	return 0
}

func (x *OrderHistory) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *OrderHistory) GetUserGuid() string {
	if x != nil && x.UserGuid != nil {
		return *x.UserGuid
	}
	return ""
}

func (x *OrderHistory) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *OrderHistory) GetOldValue() string {
	if x != nil && x.OldValue != nil {
		return *x.OldValue
	}
	return ""
}

func (x *OrderHistory) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

func (x *OrderHistory) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *OrderHistory) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

type isOrderHistory_Result interface {
	isOrderHistory_Result()
}

type OrderHistory_Order struct {
	Order *Order `protobuf:"bytes,2,opt,name=order,proto3,oneof"`
}

type OrderHistory_EntityId struct {
	EntityId int64 `protobuf:"varint,3,opt,name=entity_id,json=entityId,proto3,oneof"`
}

func (*OrderHistory_Order) isOrderHistory_Result() {}

func (*OrderHistory_EntityId) isOrderHistory_Result() {}

type ExchangeLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Result:
	//	*ExchangeLog_EntityId
	//	*ExchangeLog_Order
	Result     isExchangeLog_Result `protobuf_oneof:"result"`
	EntityName string               `protobuf:"bytes,4,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	Body       string               `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	Version    int64                `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	CreatedAt  string               `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ExchangeLog) Reset() {
	*x = ExchangeLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeLog) ProtoMessage() {}

func (x *ExchangeLog) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeLog.ProtoReflect.Descriptor instead.
func (*ExchangeLog) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{17}
}

func (x *ExchangeLog) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *ExchangeLog) GetResult() isExchangeLog_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *ExchangeLog) GetEntityId() int64 {
	if x, ok := x.GetResult().(*ExchangeLog_EntityId); ok {
		return x.EntityId
	}
	return 0
}

func (x *ExchangeLog) GetOrder() *Order {
	if x, ok := x.GetResult().(*ExchangeLog_Order); ok {
		return x.Order
	}
	return nil
}

func (x *ExchangeLog) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

func (x *ExchangeLog) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *ExchangeLog) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ExchangeLog) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type isExchangeLog_Result interface {
	isExchangeLog_Result()
}

type ExchangeLog_EntityId struct {
	EntityId int64 `protobuf:"varint,2,opt,name=entity_id,json=entityId,proto3,oneof"`
}

type ExchangeLog_Order struct {
	Order *Order `protobuf:"bytes,3,opt,name=order,proto3,oneof"`
}

func (*ExchangeLog_EntityId) isExchangeLog_Result() {}

func (*ExchangeLog_Order) isExchangeLog_Result() {}

type Outbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Result:
	//	*Outbox_EntityId
	//	*Outbox_Order
	Result       isOutbox_Result `protobuf_oneof:"result"`
	EntityName   string          `protobuf:"bytes,4,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	EventType    string          `protobuf:"bytes,5,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	LastMessage  *string         `protobuf:"bytes,6,opt,name=last_message,json=lastMessage,proto3,oneof" json:"last_message,omitempty"`
	Status       string          `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Destination  string          `protobuf:"bytes,8,opt,name=destination,proto3" json:"destination,omitempty"`
	Body         string          `protobuf:"bytes,9,opt,name=body,proto3" json:"body,omitempty"`
	RetryCounter int32           `protobuf:"varint,10,opt,name=retry_counter,json=retryCounter,proto3" json:"retry_counter,omitempty"`
	Version      int64           `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
	CreatedAt    string          `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    string          `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Outbox) Reset() {
	*x = Outbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Outbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outbox) ProtoMessage() {}

func (x *Outbox) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outbox.ProtoReflect.Descriptor instead.
func (*Outbox) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{18}
}

func (x *Outbox) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *Outbox) GetResult() isOutbox_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *Outbox) GetEntityId() int64 {
	if x, ok := x.GetResult().(*Outbox_EntityId); ok {
		return x.EntityId
	}
	return 0
}

func (x *Outbox) GetOrder() *Order {
	if x, ok := x.GetResult().(*Outbox_Order); ok {
		return x.Order
	}
	return nil
}

func (x *Outbox) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

func (x *Outbox) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *Outbox) GetLastMessage() string {
	if x != nil && x.LastMessage != nil {
		return *x.LastMessage
	}
	return ""
}

func (x *Outbox) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Outbox) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *Outbox) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Outbox) GetRetryCounter() int32 {
	if x != nil {
		return x.RetryCounter
	}
	return 0
}

func (x *Outbox) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Outbox) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Outbox) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type isOutbox_Result interface {
	isOutbox_Result()
}

type Outbox_EntityId struct {
	EntityId int64 `protobuf:"varint,2,opt,name=entity_id,json=entityId,proto3,oneof"`
}

type Outbox_Order struct {
	Order *Order `protobuf:"bytes,3,opt,name=order,proto3,oneof"`
}

func (*Outbox_EntityId) isOutbox_Result() {}

func (*Outbox_Order) isOutbox_Result() {}

type GetListOutBoxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*Outbox           `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetListOutBoxResponse) Reset() {
	*x = GetListOutBoxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListOutBoxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListOutBoxResponse) ProtoMessage() {}

func (x *GetListOutBoxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListOutBoxResponse.ProtoReflect.Descriptor instead.
func (*GetListOutBoxResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{19}
}

func (x *GetListOutBoxResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListOutBoxResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetListOutBoxResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListOutBoxResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetListOutBoxResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetListOutBoxResponse) GetData() []*Outbox {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetByIDOutBoxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Outbox  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetByIDOutBoxResponse) Reset() {
	*x = GetByIDOutBoxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDOutBoxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDOutBoxResponse) ProtoMessage() {}

func (x *GetByIDOutBoxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDOutBoxResponse.ProtoReflect.Descriptor instead.
func (*GetByIDOutBoxResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{20}
}

func (x *GetByIDOutBoxResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetByIDOutBoxResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetByIDOutBoxResponse) GetData() *Outbox {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetByIDOutBoxResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetByIDOutBoxResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type SetByIDOutboxBodyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NewBody string `protobuf:"bytes,2,opt,name=new_body,json=newBody,proto3" json:"new_body,omitempty"`
}

func (x *SetByIDOutboxBodyRequest) Reset() {
	*x = SetByIDOutboxBodyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetByIDOutboxBodyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetByIDOutboxBodyRequest) ProtoMessage() {}

func (x *SetByIDOutboxBodyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetByIDOutboxBodyRequest.ProtoReflect.Descriptor instead.
func (*SetByIDOutboxBodyRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{21}
}

func (x *SetByIDOutboxBodyRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetByIDOutboxBodyRequest) GetNewBody() string {
	if x != nil {
		return x.NewBody
	}
	return ""
}

type SetByIDOutboxBodyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Code    int64    `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *SetByIDOutboxBodyResponse) Reset() {
	*x = SetByIDOutboxBodyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetByIDOutboxBodyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetByIDOutboxBodyResponse) ProtoMessage() {}

func (x *SetByIDOutboxBodyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetByIDOutboxBodyResponse.ProtoReflect.Descriptor instead.
func (*SetByIDOutboxBodyResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{22}
}

func (x *SetByIDOutboxBodyResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SetByIDOutboxBodyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SetByIDOutboxBodyResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SetByIDOutboxBodyResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type DeleteByIDOutboxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteByIDOutboxRequest) Reset() {
	*x = DeleteByIDOutboxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteByIDOutboxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteByIDOutboxRequest) ProtoMessage() {}

func (x *DeleteByIDOutboxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteByIDOutboxRequest.ProtoReflect.Descriptor instead.
func (*DeleteByIDOutboxRequest) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteByIDOutboxRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteByIDOutboxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Code    int64    `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *DeleteByIDOutboxResponse) Reset() {
	*x = DeleteByIDOutboxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteByIDOutboxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteByIDOutboxResponse) ProtoMessage() {}

func (x *DeleteByIDOutboxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteByIDOutboxResponse.ProtoReflect.Descriptor instead.
func (*DeleteByIDOutboxResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteByIDOutboxResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeleteByIDOutboxResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteByIDOutboxResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteByIDOutboxResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetListOrderHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*OrderHistory     `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetListOrderHistoryResponse) Reset() {
	*x = GetListOrderHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListOrderHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListOrderHistoryResponse) ProtoMessage() {}

func (x *GetListOrderHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListOrderHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetListOrderHistoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{25}
}

func (x *GetListOrderHistoryResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListOrderHistoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetListOrderHistoryResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListOrderHistoryResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetListOrderHistoryResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetListOrderHistoryResponse) GetData() []*OrderHistory {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetByIDOrderHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *OrderHistory `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64         `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error      `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetByIDOrderHistoryResponse) Reset() {
	*x = GetByIDOrderHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDOrderHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDOrderHistoryResponse) ProtoMessage() {}

func (x *GetByIDOrderHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDOrderHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetByIDOrderHistoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{26}
}

func (x *GetByIDOrderHistoryResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetByIDOrderHistoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetByIDOrderHistoryResponse) GetData() *OrderHistory {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetByIDOrderHistoryResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetByIDOrderHistoryResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetListPositionHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*PositionHistory  `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetListPositionHistoryResponse) Reset() {
	*x = GetListPositionHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListPositionHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListPositionHistoryResponse) ProtoMessage() {}

func (x *GetListPositionHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListPositionHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetListPositionHistoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{27}
}

func (x *GetListPositionHistoryResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListPositionHistoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetListPositionHistoryResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListPositionHistoryResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetListPositionHistoryResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetListPositionHistoryResponse) GetData() []*PositionHistory {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetByIDPositionHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string           `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *PositionHistory `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64            `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error         `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetByIDPositionHistoryResponse) Reset() {
	*x = GetByIDPositionHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDPositionHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDPositionHistoryResponse) ProtoMessage() {}

func (x *GetByIDPositionHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDPositionHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetByIDPositionHistoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{28}
}

func (x *GetByIDPositionHistoryResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetByIDPositionHistoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetByIDPositionHistoryResponse) GetData() *PositionHistory {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetByIDPositionHistoryResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetByIDPositionHistoryResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetListOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*Order            `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetListOrderResponse) Reset() {
	*x = GetListOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListOrderResponse) ProtoMessage() {}

func (x *GetListOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListOrderResponse.ProtoReflect.Descriptor instead.
func (*GetListOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{29}
}

func (x *GetListOrderResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetListOrderResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListOrderResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetListOrderResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetListOrderResponse) GetData() []*Order {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetByIDOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Order   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64    `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetByIDOrderResponse) Reset() {
	*x = GetByIDOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDOrderResponse) ProtoMessage() {}

func (x *GetByIDOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDOrderResponse.ProtoReflect.Descriptor instead.
func (*GetByIDOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{30}
}

func (x *GetByIDOrderResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetByIDOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetByIDOrderResponse) GetData() *Order {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetByIDOrderResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetByIDOrderResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type City struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoId *string `protobuf:"bytes,1,opt,name=geo_id,json=geoId,proto3,oneof" json:"geo_id,omitempty"`
	Name  *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *City) Reset() {
	*x = City{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *City) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*City) ProtoMessage() {}

func (x *City) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use City.ProtoReflect.Descriptor instead.
func (*City) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{31}
}

func (x *City) GetGeoId() string {
	if x != nil && x.GeoId != nil {
		return *x.GeoId
	}
	return ""
}

func (x *City) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type Delivery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModeId      *int64  `protobuf:"varint,1,opt,name=mode_id,json=modeId,proto3,oneof" json:"mode_id,omitempty"`
	ModeName    *string `protobuf:"bytes,2,opt,name=mode_name,json=modeName,proto3,oneof" json:"mode_name,omitempty"`
	TrackNumber *string `protobuf:"bytes,3,opt,name=track_number,json=trackNumber,proto3,oneof" json:"track_number,omitempty"`
}

func (x *Delivery) Reset() {
	*x = Delivery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delivery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delivery) ProtoMessage() {}

func (x *Delivery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delivery.ProtoReflect.Descriptor instead.
func (*Delivery) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{32}
}

func (x *Delivery) GetModeId() int64 {
	if x != nil && x.ModeId != nil {
		return *x.ModeId
	}
	return 0
}

func (x *Delivery) GetModeName() string {
	if x != nil && x.ModeName != nil {
		return *x.ModeName
	}
	return ""
}

func (x *Delivery) GetTrackNumber() string {
	if x != nil && x.TrackNumber != nil {
		return *x.TrackNumber
	}
	return ""
}

type OrderStatusGroupForAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BgColor   string `protobuf:"bytes,2,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	TextColor string `protobuf:"bytes,3,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	Icon      string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *OrderStatusGroupForAdmin) Reset() {
	*x = OrderStatusGroupForAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatusGroupForAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusGroupForAdmin) ProtoMessage() {}

func (x *OrderStatusGroupForAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusGroupForAdmin.ProtoReflect.Descriptor instead.
func (*OrderStatusGroupForAdmin) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{33}
}

func (x *OrderStatusGroupForAdmin) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderStatusGroupForAdmin) GetBgColor() string {
	if x != nil {
		return x.BgColor
	}
	return ""
}

func (x *OrderStatusGroupForAdmin) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *OrderStatusGroupForAdmin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type OrderStatusForAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleInternal string                    `protobuf:"bytes,2,opt,name=title_internal,json=titleInternal,proto3" json:"title_internal,omitempty"`
	TitleRu       *string                   `protobuf:"bytes,3,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	Group         *OrderStatusGroupForAdmin `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *OrderStatusForAdmin) Reset() {
	*x = OrderStatusForAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatusForAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusForAdmin) ProtoMessage() {}

func (x *OrderStatusForAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusForAdmin.ProtoReflect.Descriptor instead.
func (*OrderStatusForAdmin) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{34}
}

func (x *OrderStatusForAdmin) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderStatusForAdmin) GetTitleInternal() string {
	if x != nil {
		return x.TitleInternal
	}
	return ""
}

func (x *OrderStatusForAdmin) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *OrderStatusForAdmin) GetGroup() *OrderStatusGroupForAdmin {
	if x != nil {
		return x.Group
	}
	return nil
}

// Retrun this is a keyword in programming languages
type ReturnTK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datetime *string `protobuf:"bytes,1,opt,name=datetime,proto3,oneof" json:"datetime,omitempty"`
	ModeId   *int64  `protobuf:"varint,2,opt,name=mode_id,json=modeId,proto3,oneof" json:"mode_id,omitempty"`
	ModeName *string `protobuf:"bytes,3,opt,name=mode_name,json=modeName,proto3,oneof" json:"mode_name,omitempty"`
}

func (x *ReturnTK) Reset() {
	*x = ReturnTK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnTK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnTK) ProtoMessage() {}

func (x *ReturnTK) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnTK.ProtoReflect.Descriptor instead.
func (*ReturnTK) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{35}
}

func (x *ReturnTK) GetDatetime() string {
	if x != nil && x.Datetime != nil {
		return *x.Datetime
	}
	return ""
}

func (x *ReturnTK) GetModeId() int64 {
	if x != nil && x.ModeId != nil {
		return *x.ModeId
	}
	return 0
}

func (x *ReturnTK) GetModeName() string {
	if x != nil && x.ModeName != nil {
		return *x.ModeName
	}
	return ""
}

type Sum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	CurrencyIso string  `protobuf:"bytes,2,opt,name=currency_iso,json=currencyIso,proto3" json:"currency_iso,omitempty"`
}

func (x *Sum) Reset() {
	*x = Sum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sum) ProtoMessage() {}

func (x *Sum) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sum.ProtoReflect.Descriptor instead.
func (*Sum) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{36}
}

func (x *Sum) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Sum) GetCurrencyIso() string {
	if x != nil {
		return x.CurrencyIso
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName  *string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3,oneof" json:"first_name,omitempty"`
	MiddleName *string `protobuf:"bytes,3,opt,name=middle_name,json=middleName,proto3,oneof" json:"middle_name,omitempty"`
	LastName   *string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3,oneof" json:"last_name,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{37}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *User) GetMiddleName() string {
	if x != nil && x.MiddleName != nil {
		return *x.MiddleName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

type OrderForAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	City           *City                `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	CreatedAt      string               `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Delivery       *Delivery            `protobuf:"bytes,4,opt,name=delivery,proto3" json:"delivery,omitempty"`
	ManagerComment *string              `protobuf:"bytes,5,opt,name=manager_comment,json=managerComment,proto3,oneof" json:"manager_comment,omitempty"`
	OrderStatus    *OrderStatusForAdmin `protobuf:"bytes,6,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	PaymentStatus  *string              `protobuf:"bytes,7,opt,name=payment_status,json=paymentStatus,proto3,oneof" json:"payment_status,omitempty"`
	ReturnTk       *ReturnTK            `protobuf:"bytes,8,opt,name=return_tk,json=returnTk,proto3" json:"return_tk,omitempty"`
	Sum            *Sum                 `protobuf:"bytes,9,opt,name=sum,proto3" json:"sum,omitempty"`
	User           *User                `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *OrderForAdmin) Reset() {
	*x = OrderForAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderForAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderForAdmin) ProtoMessage() {}

func (x *OrderForAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderForAdmin.ProtoReflect.Descriptor instead.
func (*OrderForAdmin) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{38}
}

func (x *OrderForAdmin) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderForAdmin) GetCity() *City {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *OrderForAdmin) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *OrderForAdmin) GetDelivery() *Delivery {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *OrderForAdmin) GetManagerComment() string {
	if x != nil && x.ManagerComment != nil {
		return *x.ManagerComment
	}
	return ""
}

func (x *OrderForAdmin) GetOrderStatus() *OrderStatusForAdmin {
	if x != nil {
		return x.OrderStatus
	}
	return nil
}

func (x *OrderForAdmin) GetPaymentStatus() string {
	if x != nil && x.PaymentStatus != nil {
		return *x.PaymentStatus
	}
	return ""
}

func (x *OrderForAdmin) GetReturnTk() *ReturnTK {
	if x != nil {
		return x.ReturnTk
	}
	return nil
}

func (x *OrderForAdmin) GetSum() *Sum {
	if x != nil {
		return x.Sum
	}
	return nil
}

func (x *OrderForAdmin) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type GetListForAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Data       []*OrderForAdmin    `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Code       int64               `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetListForAdminResponse) Reset() {
	*x = GetListForAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListForAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListForAdminResponse) ProtoMessage() {}

func (x *GetListForAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListForAdminResponse.ProtoReflect.Descriptor instead.
func (*GetListForAdminResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{39}
}

func (x *GetListForAdminResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListForAdminResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetListForAdminResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListForAdminResponse) GetData() []*OrderForAdmin {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetListForAdminResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetListForAdminResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoIdType        *string `protobuf:"bytes,1,opt,name=geo_id_type,json=geoIdType,proto3,oneof" json:"geo_id_type,omitempty"`
	FullAddressGeoId *string `protobuf:"bytes,2,opt,name=full_address_geo_id,json=fullAddressGeoId,proto3,oneof" json:"full_address_geo_id,omitempty"`
	FullAddress      *string `protobuf:"bytes,3,opt,name=full_address,json=fullAddress,proto3,oneof" json:"full_address,omitempty"`
	CountryIsoCode   *string `protobuf:"bytes,4,opt,name=country_iso_code,json=countryIsoCode,proto3,oneof" json:"country_iso_code,omitempty"`
	CityGeoId        *string `protobuf:"bytes,5,opt,name=city_geo_id,json=cityGeoId,proto3,oneof" json:"city_geo_id,omitempty"`
	City             *string `protobuf:"bytes,6,opt,name=city,proto3,oneof" json:"city,omitempty"`
	StreetGeoId      *string `protobuf:"bytes,7,opt,name=street_geo_id,json=streetGeoId,proto3,oneof" json:"street_geo_id,omitempty"`
	Street           *string `protobuf:"bytes,8,opt,name=street,proto3,oneof" json:"street,omitempty"`
	House            *string `protobuf:"bytes,9,opt,name=house,proto3,oneof" json:"house,omitempty"`
	Housing          *string `protobuf:"bytes,10,opt,name=housing,proto3,oneof" json:"housing,omitempty"`
	Building         *string `protobuf:"bytes,11,opt,name=building,proto3,oneof" json:"building,omitempty"`
	Entrance         *string `protobuf:"bytes,12,opt,name=entrance,proto3,oneof" json:"entrance,omitempty"`
	Floor            *string `protobuf:"bytes,13,opt,name=floor,proto3,oneof" json:"floor,omitempty"`
	Flat             *string `protobuf:"bytes,14,opt,name=flat,proto3,oneof" json:"flat,omitempty"`
	PostalCode       *string `protobuf:"bytes,15,opt,name=postal_code,json=postalCode,proto3,oneof" json:"postal_code,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{40}
}

func (x *Address) GetGeoIdType() string {
	if x != nil && x.GeoIdType != nil {
		return *x.GeoIdType
	}
	return ""
}

func (x *Address) GetFullAddressGeoId() string {
	if x != nil && x.FullAddressGeoId != nil {
		return *x.FullAddressGeoId
	}
	return ""
}

func (x *Address) GetFullAddress() string {
	if x != nil && x.FullAddress != nil {
		return *x.FullAddress
	}
	return ""
}

func (x *Address) GetCountryIsoCode() string {
	if x != nil && x.CountryIsoCode != nil {
		return *x.CountryIsoCode
	}
	return ""
}

func (x *Address) GetCityGeoId() string {
	if x != nil && x.CityGeoId != nil {
		return *x.CityGeoId
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *Address) GetStreetGeoId() string {
	if x != nil && x.StreetGeoId != nil {
		return *x.StreetGeoId
	}
	return ""
}

func (x *Address) GetStreet() string {
	if x != nil && x.Street != nil {
		return *x.Street
	}
	return ""
}

func (x *Address) GetHouse() string {
	if x != nil && x.House != nil {
		return *x.House
	}
	return ""
}

func (x *Address) GetHousing() string {
	if x != nil && x.Housing != nil {
		return *x.Housing
	}
	return ""
}

func (x *Address) GetBuilding() string {
	if x != nil && x.Building != nil {
		return *x.Building
	}
	return ""
}

func (x *Address) GetEntrance() string {
	if x != nil && x.Entrance != nil {
		return *x.Entrance
	}
	return ""
}

func (x *Address) GetFloor() string {
	if x != nil && x.Floor != nil {
		return *x.Floor
	}
	return ""
}

func (x *Address) GetFlat() string {
	if x != nil && x.Flat != nil {
		return *x.Flat
	}
	return ""
}

func (x *Address) GetPostalCode() string {
	if x != nil && x.PostalCode != nil {
		return *x.PostalCode
	}
	return ""
}

type Recipient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName *string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3,oneof" json:"first_name,omitempty"`
	LastName  *string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3,oneof" json:"last_name,omitempty"`
	Email     *string `protobuf:"bytes,4,opt,name=email,proto3,oneof" json:"email,omitempty"`
	Phone     *string `protobuf:"bytes,5,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
}

func (x *Recipient) Reset() {
	*x = Recipient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipient) ProtoMessage() {}

func (x *Recipient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipient.ProtoReflect.Descriptor instead.
func (*Recipient) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{41}
}

func (x *Recipient) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *Recipient) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *Recipient) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *Recipient) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

type FullDelivery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment          *string    `protobuf:"bytes,1,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
	Date             *string    `protobuf:"bytes,2,opt,name=date,proto3,oneof" json:"date,omitempty"`
	Time             *string    `protobuf:"bytes,3,opt,name=time,proto3,oneof" json:"time,omitempty"`
	TrackNumber      *string    `protobuf:"bytes,4,opt,name=track_number,json=trackNumber,proto3,oneof" json:"track_number,omitempty"`
	InnerTrackNumber *string    `protobuf:"bytes,5,opt,name=inner_track_number,json=innerTrackNumber,proto3,oneof" json:"inner_track_number,omitempty"`
	TypeId           *int32     `protobuf:"varint,6,opt,name=type_id,json=typeId,proto3,oneof" json:"type_id,omitempty"`
	TypeCode         *string    `protobuf:"bytes,7,opt,name=type_code,json=typeCode,proto3,oneof" json:"type_code,omitempty"`
	TypeMode         *string    `protobuf:"bytes,8,opt,name=type_mode,json=typeMode,proto3,oneof" json:"type_mode,omitempty"`
	TypeName         *string    `protobuf:"bytes,9,opt,name=type_name,json=typeName,proto3,oneof" json:"type_name,omitempty"`
	IsDismantle      bool       `protobuf:"varint,10,opt,name=is_dismantle,json=isDismantle,proto3" json:"is_dismantle,omitempty"`
	PvzProviderId    *string    `protobuf:"bytes,11,opt,name=pvz_provider_id,json=pvzProviderId,proto3,oneof" json:"pvz_provider_id,omitempty"`
	PvzProvider      string     `protobuf:"bytes,12,opt,name=pvz_provider,json=pvzProvider,proto3" json:"pvz_provider,omitempty"`
	StorageExpiredAt *string    `protobuf:"bytes,13,opt,name=storage_expired_at,json=storageExpiredAt,proto3,oneof" json:"storage_expired_at,omitempty"`
	Address          *Address   `protobuf:"bytes,14,opt,name=address,proto3" json:"address,omitempty"`
	Recipient        *Recipient `protobuf:"bytes,15,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (x *FullDelivery) Reset() {
	*x = FullDelivery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullDelivery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullDelivery) ProtoMessage() {}

func (x *FullDelivery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullDelivery.ProtoReflect.Descriptor instead.
func (*FullDelivery) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{42}
}

func (x *FullDelivery) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *FullDelivery) GetDate() string {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return ""
}

func (x *FullDelivery) GetTime() string {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return ""
}

func (x *FullDelivery) GetTrackNumber() string {
	if x != nil && x.TrackNumber != nil {
		return *x.TrackNumber
	}
	return ""
}

func (x *FullDelivery) GetInnerTrackNumber() string {
	if x != nil && x.InnerTrackNumber != nil {
		return *x.InnerTrackNumber
	}
	return ""
}

func (x *FullDelivery) GetTypeId() int32 {
	if x != nil && x.TypeId != nil {
		return *x.TypeId
	}
	return 0
}

func (x *FullDelivery) GetTypeCode() string {
	if x != nil && x.TypeCode != nil {
		return *x.TypeCode
	}
	return ""
}

func (x *FullDelivery) GetTypeMode() string {
	if x != nil && x.TypeMode != nil {
		return *x.TypeMode
	}
	return ""
}

func (x *FullDelivery) GetTypeName() string {
	if x != nil && x.TypeName != nil {
		return *x.TypeName
	}
	return ""
}

func (x *FullDelivery) GetIsDismantle() bool {
	if x != nil {
		return x.IsDismantle
	}
	return false
}

func (x *FullDelivery) GetPvzProviderId() string {
	if x != nil && x.PvzProviderId != nil {
		return *x.PvzProviderId
	}
	return ""
}

func (x *FullDelivery) GetPvzProvider() string {
	if x != nil {
		return x.PvzProvider
	}
	return ""
}

func (x *FullDelivery) GetStorageExpiredAt() string {
	if x != nil && x.StorageExpiredAt != nil {
		return *x.StorageExpiredAt
	}
	return ""
}

func (x *FullDelivery) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *FullDelivery) GetRecipient() *Recipient {
	if x != nil {
		return x.Recipient
	}
	return nil
}

type OrderStatusGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BgColor   string `protobuf:"bytes,2,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	TextColor string `protobuf:"bytes,3,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	Icon      string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *OrderStatusGroup) Reset() {
	*x = OrderStatusGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatusGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusGroup) ProtoMessage() {}

func (x *OrderStatusGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusGroup.ProtoReflect.Descriptor instead.
func (*OrderStatusGroup) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{43}
}

func (x *OrderStatusGroup) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderStatusGroup) GetBgColor() string {
	if x != nil {
		return x.BgColor
	}
	return ""
}

func (x *OrderStatusGroup) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *OrderStatusGroup) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type OrderStatusForAdminFull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleInternal string            `protobuf:"bytes,2,opt,name=title_internal,json=titleInternal,proto3" json:"title_internal,omitempty"`
	TitleRu       *string           `protobuf:"bytes,3,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	Group         *OrderStatusGroup `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *OrderStatusForAdminFull) Reset() {
	*x = OrderStatusForAdminFull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatusForAdminFull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusForAdminFull) ProtoMessage() {}

func (x *OrderStatusForAdminFull) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusForAdminFull.ProtoReflect.Descriptor instead.
func (*OrderStatusForAdminFull) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{44}
}

func (x *OrderStatusForAdminFull) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderStatusForAdminFull) GetTitleInternal() string {
	if x != nil {
		return x.TitleInternal
	}
	return ""
}

func (x *OrderStatusForAdminFull) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *OrderStatusForAdminFull) GetGroup() *OrderStatusGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type UserMSFullUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName  *string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3,oneof" json:"first_name,omitempty"`
	MiddleName *string `protobuf:"bytes,3,opt,name=middle_name,json=middleName,proto3,oneof" json:"middle_name,omitempty"`
	LastName   *string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3,oneof" json:"last_name,omitempty"`
	Email      *string `protobuf:"bytes,5,opt,name=email,proto3,oneof" json:"email,omitempty"`
	IsBad      *bool   `protobuf:"varint,6,opt,name=is_bad,json=isBad,proto3,oneof" json:"is_bad,omitempty"`
	IsFnf      *bool   `protobuf:"varint,7,opt,name=is_fnf,json=isFnf,proto3,oneof" json:"is_fnf,omitempty"`
	Phone      *string `protobuf:"bytes,8,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
}

func (x *UserMSFullUser) Reset() {
	*x = UserMSFullUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMSFullUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMSFullUser) ProtoMessage() {}

func (x *UserMSFullUser) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMSFullUser.ProtoReflect.Descriptor instead.
func (*UserMSFullUser) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{45}
}

func (x *UserMSFullUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserMSFullUser) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *UserMSFullUser) GetMiddleName() string {
	if x != nil && x.MiddleName != nil {
		return *x.MiddleName
	}
	return ""
}

func (x *UserMSFullUser) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *UserMSFullUser) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *UserMSFullUser) GetIsBad() bool {
	if x != nil && x.IsBad != nil {
		return *x.IsBad
	}
	return false
}

func (x *UserMSFullUser) GetIsFnf() bool {
	if x != nil && x.IsFnf != nil {
		return *x.IsFnf
	}
	return false
}

func (x *UserMSFullUser) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

type PositionForAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt               *string `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	Barcode                 int64   `protobuf:"varint,3,opt,name=barcode,proto3" json:"barcode,omitempty"`
	ColorTitleRu            *string `protobuf:"bytes,4,opt,name=color_title_ru,json=colorTitleRu,proto3,oneof" json:"color_title_ru,omitempty"`
	DiscountManual          float32 `protobuf:"fixed32,5,opt,name=discount_manual,json=discountManual,proto3" json:"discount_manual,omitempty"`
	DiscountManualPercent   float32 `protobuf:"fixed32,6,opt,name=discount_manual_percent,json=discountManualPercent,proto3" json:"discount_manual_percent,omitempty"`
	DiscountManualFromOrder float32 `protobuf:"fixed32,7,opt,name=discount_manual_from_order,json=discountManualFromOrder,proto3" json:"discount_manual_from_order,omitempty"`
	DiscountSum             float32 `protobuf:"fixed32,8,opt,name=discount_sum,json=discountSum,proto3" json:"discount_sum,omitempty"`
	Price                   float32 `protobuf:"fixed32,9,opt,name=price,proto3" json:"price,omitempty"`
	PriceBeforeDiscount     float32 `protobuf:"fixed32,10,opt,name=price_before_discount,json=priceBeforeDiscount,proto3" json:"price_before_discount,omitempty"`
	Sum                     float32 `protobuf:"fixed32,11,opt,name=sum,proto3" json:"sum,omitempty"`
	ProductGuid             string  `protobuf:"bytes,12,opt,name=product_guid,json=productGuid,proto3" json:"product_guid,omitempty"`
	ProductArticle          string  `protobuf:"bytes,13,opt,name=product_article,json=productArticle,proto3" json:"product_article,omitempty"`
	ProductImage            *string `protobuf:"bytes,14,opt,name=product_image,json=productImage,proto3,oneof" json:"product_image,omitempty"`
	ProductTitleRu          *string `protobuf:"bytes,15,opt,name=product_title_ru,json=productTitleRu,proto3,oneof" json:"product_title_ru,omitempty"`
	SizeTitleRu             string  `protobuf:"bytes,16,opt,name=size_title_ru,json=sizeTitleRu,proto3" json:"size_title_ru,omitempty"`
	SpentPromo              float32 `protobuf:"fixed32,17,opt,name=spent_promo,json=spentPromo,proto3" json:"spent_promo,omitempty"`
	SpentBonus              float32 `protobuf:"fixed32,18,opt,name=spent_bonus,json=spentBonus,proto3" json:"spent_bonus,omitempty"`
	StatusInternalTitle     string  `protobuf:"bytes,19,opt,name=status_internal_title,json=statusInternalTitle,proto3" json:"status_internal_title,omitempty"`
	StoreCode               *int32  `protobuf:"varint,20,opt,name=store_code,json=storeCode,proto3,oneof" json:"store_code,omitempty"`
}

func (x *PositionForAdmin) Reset() {
	*x = PositionForAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionForAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionForAdmin) ProtoMessage() {}

func (x *PositionForAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionForAdmin.ProtoReflect.Descriptor instead.
func (*PositionForAdmin) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{46}
}

func (x *PositionForAdmin) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PositionForAdmin) GetCreatedAt() string {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return ""
}

func (x *PositionForAdmin) GetBarcode() int64 {
	if x != nil {
		return x.Barcode
	}
	return 0
}

func (x *PositionForAdmin) GetColorTitleRu() string {
	if x != nil && x.ColorTitleRu != nil {
		return *x.ColorTitleRu
	}
	return ""
}

func (x *PositionForAdmin) GetDiscountManual() float32 {
	if x != nil {
		return x.DiscountManual
	}
	return 0
}

func (x *PositionForAdmin) GetDiscountManualPercent() float32 {
	if x != nil {
		return x.DiscountManualPercent
	}
	return 0
}

func (x *PositionForAdmin) GetDiscountManualFromOrder() float32 {
	if x != nil {
		return x.DiscountManualFromOrder
	}
	return 0
}

func (x *PositionForAdmin) GetDiscountSum() float32 {
	if x != nil {
		return x.DiscountSum
	}
	return 0
}

func (x *PositionForAdmin) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PositionForAdmin) GetPriceBeforeDiscount() float32 {
	if x != nil {
		return x.PriceBeforeDiscount
	}
	return 0
}

func (x *PositionForAdmin) GetSum() float32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *PositionForAdmin) GetProductGuid() string {
	if x != nil {
		return x.ProductGuid
	}
	return ""
}

func (x *PositionForAdmin) GetProductArticle() string {
	if x != nil {
		return x.ProductArticle
	}
	return ""
}

func (x *PositionForAdmin) GetProductImage() string {
	if x != nil && x.ProductImage != nil {
		return *x.ProductImage
	}
	return ""
}

func (x *PositionForAdmin) GetProductTitleRu() string {
	if x != nil && x.ProductTitleRu != nil {
		return *x.ProductTitleRu
	}
	return ""
}

func (x *PositionForAdmin) GetSizeTitleRu() string {
	if x != nil {
		return x.SizeTitleRu
	}
	return ""
}

func (x *PositionForAdmin) GetSpentPromo() float32 {
	if x != nil {
		return x.SpentPromo
	}
	return 0
}

func (x *PositionForAdmin) GetSpentBonus() float32 {
	if x != nil {
		return x.SpentBonus
	}
	return 0
}

func (x *PositionForAdmin) GetStatusInternalTitle() string {
	if x != nil {
		return x.StatusInternalTitle
	}
	return ""
}

func (x *PositionForAdmin) GetStoreCode() int32 {
	if x != nil && x.StoreCode != nil {
		return *x.StoreCode
	}
	return 0
}

type OrderForAdminFull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt                   string                   `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CancelReason                string                   `protobuf:"bytes,3,opt,name=cancel_reason,json=cancelReason,proto3" json:"cancel_reason,omitempty"`
	CurrencyIso                 string                   `protobuf:"bytes,4,opt,name=currency_iso,json=currencyIso,proto3" json:"currency_iso,omitempty"`
	DeliveryPrice               float32                  `protobuf:"fixed32,5,opt,name=delivery_price,json=deliveryPrice,proto3" json:"delivery_price,omitempty"`
	DiscountManual              float32                  `protobuf:"fixed32,6,opt,name=discount_manual,json=discountManual,proto3" json:"discount_manual,omitempty"`
	DiscountManualPercent       float32                  `protobuf:"fixed32,7,opt,name=discount_manual_percent,json=discountManualPercent,proto3" json:"discount_manual_percent,omitempty"`
	DiscountSum                 float32                  `protobuf:"fixed32,8,opt,name=discount_sum,json=discountSum,proto3" json:"discount_sum,omitempty"`
	DiscountSumPercent          float32                  `protobuf:"fixed32,9,opt,name=discount_sum_percent,json=discountSumPercent,proto3" json:"discount_sum_percent,omitempty"`
	ForBlogger                  string                   `protobuf:"bytes,10,opt,name=for_blogger,json=forBlogger,proto3" json:"for_blogger,omitempty"`
	GivenBonus                  float32                  `protobuf:"fixed32,11,opt,name=given_bonus,json=givenBonus,proto3" json:"given_bonus,omitempty"`
	IsCallRequired              bool                     `protobuf:"varint,12,opt,name=is_call_required,json=isCallRequired,proto3" json:"is_call_required,omitempty"`
	ManagerComment              *string                  `protobuf:"bytes,13,opt,name=manager_comment,json=managerComment,proto3,oneof" json:"manager_comment,omitempty"`
	OrderCountryIsoCode         string                   `protobuf:"bytes,14,opt,name=order_country_iso_code,json=orderCountryIsoCode,proto3" json:"order_country_iso_code,omitempty"`
	OrderMethod                 *string                  `protobuf:"bytes,15,opt,name=order_method,json=orderMethod,proto3,oneof" json:"order_method,omitempty"`
	OrderType                   string                   `protobuf:"bytes,16,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	PaymentDate                 *string                  `protobuf:"bytes,17,opt,name=payment_date,json=paymentDate,proto3,oneof" json:"payment_date,omitempty"`
	PaymentStatus               *string                  `protobuf:"bytes,18,opt,name=payment_status,json=paymentStatus,proto3,oneof" json:"payment_status,omitempty"`
	PaymentUrl                  *string                  `protobuf:"bytes,19,opt,name=payment_url,json=paymentUrl,proto3,oneof" json:"payment_url,omitempty"`
	PreorderPlannedDeliveryFrom *string                  `protobuf:"bytes,20,opt,name=preorder_planned_delivery_from,json=preorderPlannedDeliveryFrom,proto3,oneof" json:"preorder_planned_delivery_from,omitempty"`
	PreorderPlannedDeliveryTo   *string                  `protobuf:"bytes,21,opt,name=preorder_planned_delivery_to,json=preorderPlannedDeliveryTo,proto3,oneof" json:"preorder_planned_delivery_to,omitempty"`
	PromoCodeId                 *string                  `protobuf:"bytes,22,opt,name=promo_code_id,json=promoCodeId,proto3,oneof" json:"promo_code_id,omitempty"`
	RecipientComment            *string                  `protobuf:"bytes,23,opt,name=recipient_comment,json=recipientComment,proto3,oneof" json:"recipient_comment,omitempty"`
	SpentBonus                  float32                  `protobuf:"fixed32,24,opt,name=spent_bonus,json=spentBonus,proto3" json:"spent_bonus,omitempty"`
	SpentPromo                  float32                  `protobuf:"fixed32,25,opt,name=spent_promo,json=spentPromo,proto3" json:"spent_promo,omitempty"`
	StatusWms                   string                   `protobuf:"bytes,26,opt,name=status_wms,json=statusWms,proto3" json:"status_wms,omitempty"`
	StoreCode                   *int32                   `protobuf:"varint,27,opt,name=store_code,json=storeCode,proto3,oneof" json:"store_code,omitempty"`
	Sum                         float32                  `protobuf:"fixed32,28,opt,name=sum,proto3" json:"sum,omitempty"`
	SumToPay                    float32                  `protobuf:"fixed32,29,opt,name=sum_to_pay,json=sumToPay,proto3" json:"sum_to_pay,omitempty"`
	SurchargeComment            *string                  `protobuf:"bytes,30,opt,name=surcharge_comment,json=surchargeComment,proto3,oneof" json:"surcharge_comment,omitempty"`
	SurchargeSum                float32                  `protobuf:"fixed32,31,opt,name=surcharge_sum,json=surchargeSum,proto3" json:"surcharge_sum,omitempty"`
	TotalPositionsPrices        float32                  `protobuf:"fixed32,32,opt,name=total_positions_prices,json=totalPositionsPrices,proto3" json:"total_positions_prices,omitempty"`
	Delivery                    *FullDelivery            `protobuf:"bytes,33,opt,name=delivery,proto3" json:"delivery,omitempty"`
	Manager                     *User                    `protobuf:"bytes,34,opt,name=manager,proto3" json:"manager,omitempty"`
	OrderStatus                 *OrderStatusForAdminFull `protobuf:"bytes,35,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	Positions                   []*PositionForAdmin      `protobuf:"bytes,36,rep,name=positions,proto3" json:"positions,omitempty"`
	Seller                      *User                    `protobuf:"bytes,37,opt,name=seller,proto3" json:"seller,omitempty"`
	User                        *UserMSFullUser          `protobuf:"bytes,39,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *OrderForAdminFull) Reset() {
	*x = OrderForAdminFull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderForAdminFull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderForAdminFull) ProtoMessage() {}

func (x *OrderForAdminFull) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderForAdminFull.ProtoReflect.Descriptor instead.
func (*OrderForAdminFull) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{47}
}

func (x *OrderForAdminFull) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderForAdminFull) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *OrderForAdminFull) GetCancelReason() string {
	if x != nil {
		return x.CancelReason
	}
	return ""
}

func (x *OrderForAdminFull) GetCurrencyIso() string {
	if x != nil {
		return x.CurrencyIso
	}
	return ""
}

func (x *OrderForAdminFull) GetDeliveryPrice() float32 {
	if x != nil {
		return x.DeliveryPrice
	}
	return 0
}

func (x *OrderForAdminFull) GetDiscountManual() float32 {
	if x != nil {
		return x.DiscountManual
	}
	return 0
}

func (x *OrderForAdminFull) GetDiscountManualPercent() float32 {
	if x != nil {
		return x.DiscountManualPercent
	}
	return 0
}

func (x *OrderForAdminFull) GetDiscountSum() float32 {
	if x != nil {
		return x.DiscountSum
	}
	return 0
}

func (x *OrderForAdminFull) GetDiscountSumPercent() float32 {
	if x != nil {
		return x.DiscountSumPercent
	}
	return 0
}

func (x *OrderForAdminFull) GetForBlogger() string {
	if x != nil {
		return x.ForBlogger
	}
	return ""
}

func (x *OrderForAdminFull) GetGivenBonus() float32 {
	if x != nil {
		return x.GivenBonus
	}
	return 0
}

func (x *OrderForAdminFull) GetIsCallRequired() bool {
	if x != nil {
		return x.IsCallRequired
	}
	return false
}

func (x *OrderForAdminFull) GetManagerComment() string {
	if x != nil && x.ManagerComment != nil {
		return *x.ManagerComment
	}
	return ""
}

func (x *OrderForAdminFull) GetOrderCountryIsoCode() string {
	if x != nil {
		return x.OrderCountryIsoCode
	}
	return ""
}

func (x *OrderForAdminFull) GetOrderMethod() string {
	if x != nil && x.OrderMethod != nil {
		return *x.OrderMethod
	}
	return ""
}

func (x *OrderForAdminFull) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *OrderForAdminFull) GetPaymentDate() string {
	if x != nil && x.PaymentDate != nil {
		return *x.PaymentDate
	}
	return ""
}

func (x *OrderForAdminFull) GetPaymentStatus() string {
	if x != nil && x.PaymentStatus != nil {
		return *x.PaymentStatus
	}
	return ""
}

func (x *OrderForAdminFull) GetPaymentUrl() string {
	if x != nil && x.PaymentUrl != nil {
		return *x.PaymentUrl
	}
	return ""
}

func (x *OrderForAdminFull) GetPreorderPlannedDeliveryFrom() string {
	if x != nil && x.PreorderPlannedDeliveryFrom != nil {
		return *x.PreorderPlannedDeliveryFrom
	}
	return ""
}

func (x *OrderForAdminFull) GetPreorderPlannedDeliveryTo() string {
	if x != nil && x.PreorderPlannedDeliveryTo != nil {
		return *x.PreorderPlannedDeliveryTo
	}
	return ""
}

func (x *OrderForAdminFull) GetPromoCodeId() string {
	if x != nil && x.PromoCodeId != nil {
		return *x.PromoCodeId
	}
	return ""
}

func (x *OrderForAdminFull) GetRecipientComment() string {
	if x != nil && x.RecipientComment != nil {
		return *x.RecipientComment
	}
	return ""
}

func (x *OrderForAdminFull) GetSpentBonus() float32 {
	if x != nil {
		return x.SpentBonus
	}
	return 0
}

func (x *OrderForAdminFull) GetSpentPromo() float32 {
	if x != nil {
		return x.SpentPromo
	}
	return 0
}

func (x *OrderForAdminFull) GetStatusWms() string {
	if x != nil {
		return x.StatusWms
	}
	return ""
}

func (x *OrderForAdminFull) GetStoreCode() int32 {
	if x != nil && x.StoreCode != nil {
		return *x.StoreCode
	}
	return 0
}

func (x *OrderForAdminFull) GetSum() float32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *OrderForAdminFull) GetSumToPay() float32 {
	if x != nil {
		return x.SumToPay
	}
	return 0
}

func (x *OrderForAdminFull) GetSurchargeComment() string {
	if x != nil && x.SurchargeComment != nil {
		return *x.SurchargeComment
	}
	return ""
}

func (x *OrderForAdminFull) GetSurchargeSum() float32 {
	if x != nil {
		return x.SurchargeSum
	}
	return 0
}

func (x *OrderForAdminFull) GetTotalPositionsPrices() float32 {
	if x != nil {
		return x.TotalPositionsPrices
	}
	return 0
}

func (x *OrderForAdminFull) GetDelivery() *FullDelivery {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *OrderForAdminFull) GetManager() *User {
	if x != nil {
		return x.Manager
	}
	return nil
}

func (x *OrderForAdminFull) GetOrderStatus() *OrderStatusForAdminFull {
	if x != nil {
		return x.OrderStatus
	}
	return nil
}

func (x *OrderForAdminFull) GetPositions() []*PositionForAdmin {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *OrderForAdminFull) GetSeller() *User {
	if x != nil {
		return x.Seller
	}
	return nil
}

func (x *OrderForAdminFull) GetUser() *UserMSFullUser {
	if x != nil {
		return x.User
	}
	return nil
}

type GetByIDForAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *OrderForAdminFull `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64              `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error           `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetByIDForAdminResponse) Reset() {
	*x = GetByIDForAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_order_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDForAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDForAdminResponse) ProtoMessage() {}

func (x *GetByIDForAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_order_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDForAdminResponse.ProtoReflect.Descriptor instead.
func (*GetByIDForAdminResponse) Descriptor() ([]byte, []int) {
	return file_proto_order_proto_rawDescGZIP(), []int{48}
}

func (x *GetByIDForAdminResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetByIDForAdminResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetByIDForAdminResponse) GetData() *OrderForAdminFull {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetByIDForAdminResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetByIDForAdminResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_proto_order_proto protoreflect.FileDescriptor

var file_proto_order_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x41, 0x0a, 0x11, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x58,
	0x0a, 0x12, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4d, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6e, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfa, 0x0d, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x6d, 0x6f,
	0x64, 0x61, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x61, 0x6d, 0x6f, 0x64,
	0x61, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x4c, 0x61, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x50, 0x61, 0x79, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x14, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x12, 0x69, 0x73, 0x5f, 0x67, 0x61, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x47, 0x61,
	0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x02, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x67, 0x73, 0x31, 0x6d, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x67, 0x73, 0x31, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x12, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x75,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x65, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x34, 0x0a, 0x14, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x72, 0x75, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72,
	0x75, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x52, 0x75, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x7a,
	0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x68, 0x65, 0x78, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x48, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x68,
	0x61, 0x73, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x61, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x73, 0x31, 0x6d, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x68, 0x65, 0x78, 0x22, 0x88, 0x03, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x47,
	0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x02, 0x69, 0x70, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x70,
	0x22, 0xf7, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x82, 0x04, 0x0a, 0x0b, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01,
	0x01, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x42,
	0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61,
	0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x69, 0x73, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x22,
	0xbe, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x81, 0x01, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x64, 0x22, 0xa6, 0x33, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x07,
	0x72, 0x63, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x06, 0x72, 0x63, 0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x63,
	0x72, 0x6d, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x08, 0x72, 0x63, 0x72, 0x6d, 0x53, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x6d, 0x69, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x02, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x61, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x61, 0x64,
	0x55, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x6f, 0x6c, 0x79, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x64, 0x6f,
	0x6c, 0x79, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x6f,
	0x6c, 0x79, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0e, 0x64, 0x6f, 0x6c, 0x79, 0x61, 0x6d, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61, 0x6d, 0x6f,
	0x64, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x6c,
	0x61, 0x6d, 0x6f, 0x64, 0x61, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x61,
	0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x10, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x14, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x12, 0x6c,
	0x61, 0x6d, 0x6f, 0x64, 0x61, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x77, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x75, 0x6d,
	0x12, 0x30, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x10, 0x73,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x12, 0x27, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0e, 0x52,
	0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x10, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x22, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x48, 0x12, 0x52, 0x1e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x24,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x20, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x53, 0x0a, 0x24, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x14, 0x52, 0x20, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52,
	0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x73, 0x6f,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x73, 0x6f, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x37, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x16, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1b, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x17, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x70, 0x76, 0x7a, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0d, 0x70, 0x76, 0x7a, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x70, 0x76, 0x7a, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1a, 0x52, 0x0b, 0x70, 0x76, 0x7a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x07, 0x67, 0x65, 0x6f, 0x4a, 0x73, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0b, 0x66, 0x75, 0x6c,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x65, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x65, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x22, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6f, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x23, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0b, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x24, 0x52, 0x09, 0x63, 0x69, 0x74, 0x79, 0x47, 0x65, 0x6f, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x25, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x47, 0x65, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x07, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52,
	0x04, 0x66, 0x6c, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2d, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x14, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x12,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x2f, 0x52, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x31, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x32, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x33, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x48, 0x34, 0x52, 0x0b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x19, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x35, 0x52, 0x17, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x17, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x36, 0x52, 0x14, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x37,
	0x52, 0x16, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x38,
	0x52, 0x16, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x39,
	0x52, 0x16, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x29, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x3a,
	0x52, 0x24, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x2b, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3b,
	0x52, 0x26, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x2b, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x3c, 0x52, 0x26, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x3d, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x3e, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x48, 0x3f, 0x52,
	0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x48, 0x40, 0x52, 0x0e, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x54, 0x20, 0x01, 0x28, 0x09, 0x48, 0x41, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x48, 0x42,
	0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x48, 0x43, 0x52, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x57,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x31, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x58, 0x20, 0x01, 0x28, 0x09, 0x48, 0x44, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x31,
	0x73, 0x47, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x59, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x45, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x46, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x47, 0x52, 0x0a, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6f, 0x72,
	0x67, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x48, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x5d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x49, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x5e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x4a, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1b, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x61, 0x6e, 0x74, 0x6c, 0x65, 0x18, 0x60,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x73, 0x6d, 0x61, 0x6e, 0x74, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x71, 0x72, 0x18, 0x61, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x51, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x62,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x1e, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4b, 0x52, 0x1b, 0x70,
	0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x1c, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x4c, 0x52, 0x19, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x42, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4d, 0x52, 0x0a, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1a, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x48, 0x4e,
	0x52, 0x18, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x4f, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x50,
	0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x6b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x63, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x63, 0x72, 0x6d, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x6d, 0x69, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x74, 0x61, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64,
	0x6f, 0x6c, 0x79, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x6f,
	0x6c, 0x79, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x61, 0x6d, 0x6f, 0x64, 0x61, 0x5f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x27, 0x0a, 0x25, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x70, 0x76, 0x7a, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x76, 0x7a, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x65,
	0x6f, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x1c, 0x0a,
	0x1a, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x2c, 0x0a, 0x2a, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x2e, 0x0a, 0x2c, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x2e, 0x0a, 0x2c, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x31, 0x73, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x72, 0x67,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x70, 0x72, 0x65, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x70, 0x72,
	0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xfc, 0x02,
	0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x02, 0x69,
	0x70, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6c, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x70, 0x22, 0xdb, 0x01, 0x0a,
	0x0b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x09,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xac, 0x03, 0x0a, 0x06, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xa8, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x75, 0x74, 0x42,
	0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x45, 0x0a, 0x18, 0x53,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x42, 0x6f,
	0x64, 0x79, 0x22, 0x88, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x29, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xf6, 0x01, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xba, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x49, 0x44, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x22, 0x4f, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x06, 0x67, 0x65, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x67, 0x65, 0x6f, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x9d, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x78, 0x0a, 0x18, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xb1, 0x01, 0x0a, 0x13,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x22,
	0x92, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x4b, 0x12, 0x1f, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x03, 0x53, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x73,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x73, 0x6f, 0x22, 0xaf, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbf, 0x03, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x08, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x6b, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x4b, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x6b,
	0x12, 0x1d, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x75, 0x6d, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12,
	0x20, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xea, 0x05, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x67, 0x65, 0x6f,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x65, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x65, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x63, 0x69, 0x74,
	0x79, 0x47, 0x65, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x67, 0x65, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x04, 0x66, 0x6c, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x66, 0x6c, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x22, 0xe7, 0x05, 0x0a, 0x0c, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05,
	0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x61, 0x6e, 0x74, 0x6c,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x73, 0x6d, 0x61,
	0x6e, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x76, 0x7a, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x0d, 0x70, 0x76, 0x7a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x76, 0x7a, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x76, 0x7a, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0a, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x70, 0x76, 0x7a, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x70, 0x0a, 0x10, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xad, 0x01, 0x0a,
	0x17, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6f, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12,
	0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x22, 0xd1, 0x02, 0x0a,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x53, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x05, 0x69, 0x73, 0x42, 0x61, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x66, 0x6e, 0x66, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x05, 0x52, 0x05, 0x69, 0x73, 0x46, 0x6e, 0x66, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x69, 0x73, 0x5f, 0x66, 0x6e, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x22, 0xe3, 0x06, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x17, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72,
	0x75, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x52, 0x75, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x6e,
	0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb6, 0x0e, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x73, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x73, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x30,
	0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x0f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x26, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x1e, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x70, 0x72,
	0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x19, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x70, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x77, 0x6d, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73,
	0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x79,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x75, 0x6d, 0x54, 0x6f, 0x50, 0x61, 0x79,
	0x12, 0x30, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x10, 0x73,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x73, 0x75, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12,
	0x26, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x53, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x21,
	0x0a, 0x1f, 0x5f, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xb5, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x46, 0x6f, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x32, 0xc0, 0x02, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x16,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x20, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb8, 0x01, 0x0a, 0x13, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x59, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb9, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x54, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x26,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xb8, 0x02, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x12, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x46, 0x6f, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x46, 0x6f, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a, 0x08,
	0x67, 0x6f, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_order_proto_rawDescOnce sync.Once
	file_proto_order_proto_rawDescData = file_proto_order_proto_rawDesc
)

func file_proto_order_proto_rawDescGZIP() []byte {
	file_proto_order_proto_rawDescOnce.Do(func() {
		file_proto_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_order_proto_rawDescData)
	})
	return file_proto_order_proto_rawDescData
}

var file_proto_order_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_proto_order_proto_goTypes = []interface{}{
	(*PaginationRequest)(nil),                 // 0: orders.PaginationRequest
	(*PaginationResponse)(nil),                // 1: orders.PaginationResponse
	(*Error)(nil),                             // 2: orders.Error
	(*GetListRequest)(nil),                    // 3: orders.GetListRequest
	(*GetListRequestForOrder)(nil),            // 4: orders.GetListRequestForOrder
	(*GetListRequestForPosition)(nil),         // 5: orders.GetListRequestForPosition
	(*GetListRequestForOrderAndPosition)(nil), // 6: orders.GetListRequestForOrderAndPosition
	(*GetByIDRequest)(nil),                    // 7: orders.GetByIDRequest
	(*PositionStatus)(nil),                    // 8: orders.PositionStatus
	(*Position)(nil),                          // 9: orders.Position
	(*PositionHistory)(nil),                   // 10: orders.PositionHistory
	(*StatusGroup)(nil),                       // 11: orders.StatusGroup
	(*OrderStatus)(nil),                       // 12: orders.OrderStatus
	(*StatusTimer)(nil),                       // 13: orders.StatusTimer
	(*Flow)(nil),                              // 14: orders.Flow
	(*Order)(nil),                             // 15: orders.Order
	(*OrderHistory)(nil),                      // 16: orders.OrderHistory
	(*ExchangeLog)(nil),                       // 17: orders.ExchangeLog
	(*Outbox)(nil),                            // 18: orders.Outbox
	(*GetListOutBoxResponse)(nil),             // 19: orders.GetListOutBoxResponse
	(*GetByIDOutBoxResponse)(nil),             // 20: orders.GetByIDOutBoxResponse
	(*SetByIDOutboxBodyRequest)(nil),          // 21: orders.SetByIDOutboxBodyRequest
	(*SetByIDOutboxBodyResponse)(nil),         // 22: orders.SetByIDOutboxBodyResponse
	(*DeleteByIDOutboxRequest)(nil),           // 23: orders.DeleteByIDOutboxRequest
	(*DeleteByIDOutboxResponse)(nil),          // 24: orders.DeleteByIDOutboxResponse
	(*GetListOrderHistoryResponse)(nil),       // 25: orders.GetListOrderHistoryResponse
	(*GetByIDOrderHistoryResponse)(nil),       // 26: orders.GetByIDOrderHistoryResponse
	(*GetListPositionHistoryResponse)(nil),    // 27: orders.GetListPositionHistoryResponse
	(*GetByIDPositionHistoryResponse)(nil),    // 28: orders.GetByIDPositionHistoryResponse
	(*GetListOrderResponse)(nil),              // 29: orders.GetListOrderResponse
	(*GetByIDOrderResponse)(nil),              // 30: orders.GetByIDOrderResponse
	(*City)(nil),                              // 31: orders.City
	(*Delivery)(nil),                          // 32: orders.Delivery
	(*OrderStatusGroupForAdmin)(nil),          // 33: orders.OrderStatusGroupForAdmin
	(*OrderStatusForAdmin)(nil),               // 34: orders.OrderStatusForAdmin
	(*ReturnTK)(nil),                          // 35: orders.ReturnTK
	(*Sum)(nil),                               // 36: orders.Sum
	(*User)(nil),                              // 37: orders.User
	(*OrderForAdmin)(nil),                     // 38: orders.OrderForAdmin
	(*GetListForAdminResponse)(nil),           // 39: orders.GetListForAdminResponse
	(*Address)(nil),                           // 40: orders.Address
	(*Recipient)(nil),                         // 41: orders.Recipient
	(*FullDelivery)(nil),                      // 42: orders.FullDelivery
	(*OrderStatusGroup)(nil),                  // 43: orders.OrderStatusGroup
	(*OrderStatusForAdminFull)(nil),           // 44: orders.OrderStatusForAdminFull
	(*UserMSFullUser)(nil),                    // 45: orders.UserMSFullUser
	(*PositionForAdmin)(nil),                  // 46: orders.PositionForAdmin
	(*OrderForAdminFull)(nil),                 // 47: orders.OrderForAdminFull
	(*GetByIDForAdminResponse)(nil),           // 48: orders.GetByIDForAdminResponse
}
var file_proto_order_proto_depIdxs = []int32{
	0,  // 0: orders.GetListRequest.pagination:type_name -> orders.PaginationRequest
	0,  // 1: orders.GetListRequestForOrder.pagination:type_name -> orders.PaginationRequest
	0,  // 2: orders.GetListRequestForPosition.pagination:type_name -> orders.PaginationRequest
	0,  // 3: orders.GetListRequestForOrderAndPosition.pagination:type_name -> orders.PaginationRequest
	8,  // 4: orders.Position.status:type_name -> orders.PositionStatus
	9,  // 5: orders.PositionHistory.position:type_name -> orders.Position
	11, // 6: orders.OrderStatus.group:type_name -> orders.StatusGroup
	12, // 7: orders.StatusTimer.status:type_name -> orders.OrderStatus
	12, // 8: orders.Order.status:type_name -> orders.OrderStatus
	9,  // 9: orders.Order.positions:type_name -> orders.Position
	15, // 10: orders.OrderHistory.order:type_name -> orders.Order
	15, // 11: orders.ExchangeLog.order:type_name -> orders.Order
	15, // 12: orders.Outbox.order:type_name -> orders.Order
	1,  // 13: orders.GetListOutBoxResponse.pagination:type_name -> orders.PaginationResponse
	2,  // 14: orders.GetListOutBoxResponse.errors:type_name -> orders.Error
	18, // 15: orders.GetListOutBoxResponse.data:type_name -> orders.Outbox
	18, // 16: orders.GetByIDOutBoxResponse.data:type_name -> orders.Outbox
	2,  // 17: orders.GetByIDOutBoxResponse.errors:type_name -> orders.Error
	2,  // 18: orders.SetByIDOutboxBodyResponse.errors:type_name -> orders.Error
	2,  // 19: orders.DeleteByIDOutboxResponse.errors:type_name -> orders.Error
	1,  // 20: orders.GetListOrderHistoryResponse.pagination:type_name -> orders.PaginationResponse
	2,  // 21: orders.GetListOrderHistoryResponse.errors:type_name -> orders.Error
	16, // 22: orders.GetListOrderHistoryResponse.data:type_name -> orders.OrderHistory
	16, // 23: orders.GetByIDOrderHistoryResponse.data:type_name -> orders.OrderHistory
	2,  // 24: orders.GetByIDOrderHistoryResponse.errors:type_name -> orders.Error
	1,  // 25: orders.GetListPositionHistoryResponse.pagination:type_name -> orders.PaginationResponse
	2,  // 26: orders.GetListPositionHistoryResponse.errors:type_name -> orders.Error
	10, // 27: orders.GetListPositionHistoryResponse.data:type_name -> orders.PositionHistory
	10, // 28: orders.GetByIDPositionHistoryResponse.data:type_name -> orders.PositionHistory
	2,  // 29: orders.GetByIDPositionHistoryResponse.errors:type_name -> orders.Error
	1,  // 30: orders.GetListOrderResponse.pagination:type_name -> orders.PaginationResponse
	2,  // 31: orders.GetListOrderResponse.errors:type_name -> orders.Error
	15, // 32: orders.GetListOrderResponse.data:type_name -> orders.Order
	15, // 33: orders.GetByIDOrderResponse.data:type_name -> orders.Order
	2,  // 34: orders.GetByIDOrderResponse.errors:type_name -> orders.Error
	33, // 35: orders.OrderStatusForAdmin.group:type_name -> orders.OrderStatusGroupForAdmin
	31, // 36: orders.OrderForAdmin.city:type_name -> orders.City
	32, // 37: orders.OrderForAdmin.delivery:type_name -> orders.Delivery
	34, // 38: orders.OrderForAdmin.order_status:type_name -> orders.OrderStatusForAdmin
	35, // 39: orders.OrderForAdmin.return_tk:type_name -> orders.ReturnTK
	36, // 40: orders.OrderForAdmin.sum:type_name -> orders.Sum
	37, // 41: orders.OrderForAdmin.user:type_name -> orders.User
	1,  // 42: orders.GetListForAdminResponse.pagination:type_name -> orders.PaginationResponse
	38, // 43: orders.GetListForAdminResponse.data:type_name -> orders.OrderForAdmin
	2,  // 44: orders.GetListForAdminResponse.errors:type_name -> orders.Error
	40, // 45: orders.FullDelivery.address:type_name -> orders.Address
	41, // 46: orders.FullDelivery.recipient:type_name -> orders.Recipient
	43, // 47: orders.OrderStatusForAdminFull.group:type_name -> orders.OrderStatusGroup
	42, // 48: orders.OrderForAdminFull.delivery:type_name -> orders.FullDelivery
	37, // 49: orders.OrderForAdminFull.manager:type_name -> orders.User
	44, // 50: orders.OrderForAdminFull.order_status:type_name -> orders.OrderStatusForAdminFull
	46, // 51: orders.OrderForAdminFull.positions:type_name -> orders.PositionForAdmin
	37, // 52: orders.OrderForAdminFull.seller:type_name -> orders.User
	45, // 53: orders.OrderForAdminFull.user:type_name -> orders.UserMSFullUser
	47, // 54: orders.GetByIDForAdminResponse.data:type_name -> orders.OrderForAdminFull
	2,  // 55: orders.GetByIDForAdminResponse.errors:type_name -> orders.Error
	4,  // 56: orders.OutboxService.GetList:input_type -> orders.GetListRequestForOrder
	7,  // 57: orders.OutboxService.GetByID:input_type -> orders.GetByIDRequest
	21, // 58: orders.OutboxService.SetBodyByID:input_type -> orders.SetByIDOutboxBodyRequest
	23, // 59: orders.OutboxService.DeleteByID:input_type -> orders.DeleteByIDOutboxRequest
	6,  // 60: orders.OrderHistoryService.GetList:input_type -> orders.GetListRequestForOrderAndPosition
	7,  // 61: orders.OrderHistoryService.GetByID:input_type -> orders.GetByIDRequest
	5,  // 62: orders.PositionHistoryService.GetList:input_type -> orders.GetListRequestForPosition
	7,  // 63: orders.PositionHistoryService.GetByID:input_type -> orders.GetByIDRequest
	5,  // 64: orders.OrderService.GetList:input_type -> orders.GetListRequestForPosition
	7,  // 65: orders.OrderService.GetByID:input_type -> orders.GetByIDRequest
	3,  // 66: orders.OrderService.GetListForAdmin:input_type -> orders.GetListRequest
	7,  // 67: orders.OrderService.GetOrderByIDForAdmin:input_type -> orders.GetByIDRequest
	19, // 68: orders.OutboxService.GetList:output_type -> orders.GetListOutBoxResponse
	20, // 69: orders.OutboxService.GetByID:output_type -> orders.GetByIDOutBoxResponse
	22, // 70: orders.OutboxService.SetBodyByID:output_type -> orders.SetByIDOutboxBodyResponse
	24, // 71: orders.OutboxService.DeleteByID:output_type -> orders.DeleteByIDOutboxResponse
	25, // 72: orders.OrderHistoryService.GetList:output_type -> orders.GetListOrderHistoryResponse
	26, // 73: orders.OrderHistoryService.GetByID:output_type -> orders.GetByIDOrderHistoryResponse
	27, // 74: orders.PositionHistoryService.GetList:output_type -> orders.GetListPositionHistoryResponse
	28, // 75: orders.PositionHistoryService.GetByID:output_type -> orders.GetByIDPositionHistoryResponse
	29, // 76: orders.OrderService.GetList:output_type -> orders.GetListOrderResponse
	30, // 77: orders.OrderService.GetByID:output_type -> orders.GetByIDOrderResponse
	39, // 78: orders.OrderService.GetListForAdmin:output_type -> orders.GetListForAdminResponse
	48, // 79: orders.OrderService.GetOrderByIDForAdmin:output_type -> orders.GetByIDForAdminResponse
	68, // [68:80] is the sub-list for method output_type
	56, // [56:68] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_proto_order_proto_init() }
func file_proto_order_proto_init() {
	if File_proto_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequestForOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequestForPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequestForOrderAndPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Outbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListOutBoxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDOutBoxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetByIDOutboxBodyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetByIDOutboxBodyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteByIDOutboxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteByIDOutboxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListOrderHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDOrderHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListPositionHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDPositionHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*City); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Delivery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatusGroupForAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatusForAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnTK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderForAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListForAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recipient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullDelivery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatusGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatusForAdminFull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMSFullUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionForAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderForAdminFull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_order_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDForAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_order_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*PositionHistory_EntityId)(nil),
		(*PositionHistory_Position)(nil),
	}
	file_proto_order_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*OrderHistory_Order)(nil),
		(*OrderHistory_EntityId)(nil),
	}
	file_proto_order_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ExchangeLog_EntityId)(nil),
		(*ExchangeLog_Order)(nil),
	}
	file_proto_order_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Outbox_EntityId)(nil),
		(*Outbox_Order)(nil),
	}
	file_proto_order_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_proto_order_proto_msgTypes[47].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_order_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_proto_order_proto_goTypes,
		DependencyIndexes: file_proto_order_proto_depIdxs,
		MessageInfos:      file_proto_order_proto_msgTypes,
	}.Build()
	File_proto_order_proto = out.File
	file_proto_order_proto_rawDesc = nil
	file_proto_order_proto_goTypes = nil
	file_proto_order_proto_depIdxs = nil
}
