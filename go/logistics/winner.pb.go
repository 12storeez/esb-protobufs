// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.9
// source: winner.proto

package logistics

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Payment_Type int32

const (
	Payment_CASH Payment_Type = 0
	Payment_CARD Payment_Type = 1
)

// Enum value maps for Payment_Type.
var (
	Payment_Type_name = map[int32]string{
		0: "CASH",
		1: "CARD",
	}
	Payment_Type_value = map[string]int32{
		"CASH": 0,
		"CARD": 1,
	}
)

func (x Payment_Type) Enum() *Payment_Type {
	p := new(Payment_Type)
	*p = x
	return p
}

func (x Payment_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Payment_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_winner_proto_enumTypes[0].Descriptor()
}

func (Payment_Type) Type() protoreflect.EnumType {
	return &file_winner_proto_enumTypes[0]
}

func (x Payment_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Payment_Type.Descriptor instead.
func (Payment_Type) EnumDescriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{5, 0}
}

type AddressDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Point    string `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *AddressDetailsRequest) Reset() {
	*x = AddressDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressDetailsRequest) ProtoMessage() {}

func (x *AddressDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressDetailsRequest.ProtoReflect.Descriptor instead.
func (*AddressDetailsRequest) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{0}
}

func (x *AddressDetailsRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *AddressDetailsRequest) GetPoint() string {
	if x != nil {
		return x.Point
	}
	return ""
}

type AddressDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvzId       string `protobuf:"bytes,1,opt,name=pvz_id,json=pvzId,proto3" json:"pvz_id,omitempty"`
	FullAddress string `protobuf:"bytes,2,opt,name=full_address,json=fullAddress,proto3" json:"full_address,omitempty"`
	CountryIso  string `protobuf:"bytes,3,opt,name=country_iso,json=countryIso,proto3" json:"country_iso,omitempty"`
	Region      string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	City        string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	Street      string `protobuf:"bytes,6,opt,name=street,proto3" json:"street,omitempty"`
	House       string `protobuf:"bytes,7,opt,name=house,proto3" json:"house,omitempty"`
	Postal      string `protobuf:"bytes,8,opt,name=postal,proto3" json:"postal,omitempty"`
	CityFias    string `protobuf:"bytes,9,opt,name=city_fias,json=cityFias,proto3" json:"city_fias,omitempty"`
}

func (x *AddressDetailsResponse) Reset() {
	*x = AddressDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressDetailsResponse) ProtoMessage() {}

func (x *AddressDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressDetailsResponse.ProtoReflect.Descriptor instead.
func (*AddressDetailsResponse) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{1}
}

func (x *AddressDetailsResponse) GetPvzId() string {
	if x != nil {
		return x.PvzId
	}
	return ""
}

func (x *AddressDetailsResponse) GetFullAddress() string {
	if x != nil {
		return x.FullAddress
	}
	return ""
}

func (x *AddressDetailsResponse) GetCountryIso() string {
	if x != nil {
		return x.CountryIso
	}
	return ""
}

func (x *AddressDetailsResponse) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AddressDetailsResponse) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *AddressDetailsResponse) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *AddressDetailsResponse) GetHouse() string {
	if x != nil {
		return x.House
	}
	return ""
}

func (x *AddressDetailsResponse) GetPostal() string {
	if x != nil {
		return x.Postal
	}
	return ""
}

func (x *AddressDetailsResponse) GetCityFias() string {
	if x != nil {
		return x.CityFias
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{2}
}

func (x *Pagination) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Pagination) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type PickUpPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter     *Filter     `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *PickUpPointsRequest) Reset() {
	*x = PickUpPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickUpPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickUpPointsRequest) ProtoMessage() {}

func (x *PickUpPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickUpPointsRequest.ProtoReflect.Descriptor instead.
func (*PickUpPointsRequest) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{3}
}

func (x *PickUpPointsRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *PickUpPointsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider         string                `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	CityId           string                `protobuf:"bytes,2,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	CityName         string                `protobuf:"bytes,3,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	Search           string                `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	HasPartialRefuse *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=has_partial_refuse,json=hasPartialRefuse,proto3" json:"has_partial_refuse,omitempty"`
	HasFittingRoom   *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=has_fitting_room,json=hasFittingRoom,proto3" json:"has_fitting_room,omitempty"`
	HasCod           *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=has_cod,json=hasCod,proto3" json:"has_cod,omitempty"`
	CodPayment       []Payment_Type        `protobuf:"varint,8,rep,packed,name=cod_payment,json=codPayment,proto3,enum=logistics.Payment_Type" json:"cod_payment,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{4}
}

func (x *Filter) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Filter) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *Filter) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *Filter) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *Filter) GetHasPartialRefuse() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasPartialRefuse
	}
	return nil
}

func (x *Filter) GetHasFittingRoom() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasFittingRoom
	}
	return nil
}

func (x *Filter) GetHasCod() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasCod
	}
	return nil
}

func (x *Filter) GetCodPayment() []Payment_Type {
	if x != nil {
		return x.CodPayment
	}
	return nil
}

type Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Payment) Reset() {
	*x = Payment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{5}
}

type PickUpPointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*PickupPoint `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *PickUpPointsResponse) Reset() {
	*x = PickUpPointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickUpPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickUpPointsResponse) ProtoMessage() {}

func (x *PickUpPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickUpPointsResponse.ProtoReflect.Descriptor instead.
func (*PickUpPointsResponse) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{6}
}

func (x *PickUpPointsResponse) GetResults() []*PickupPoint {
	if x != nil {
		return x.Results
	}
	return nil
}

type PickupPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address          string                `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Title            string                `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Lat              float64               `protobuf:"fixed64,4,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng              float64               `protobuf:"fixed64,5,opt,name=lng,proto3" json:"lng,omitempty"`
	HasPartialRefuse *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=has_partial_refuse,json=hasPartialRefuse,proto3" json:"has_partial_refuse,omitempty"`
	HasFittingRoom   *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=has_fitting_room,json=hasFittingRoom,proto3" json:"has_fitting_room,omitempty"`
	HasCod           *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=has_cod,json=hasCod,proto3" json:"has_cod,omitempty"`
	HasPaymentCash   *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=has_payment_cash,json=hasPaymentCash,proto3" json:"has_payment_cash,omitempty"`
	HasPaymentCard   *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=has_payment_card,json=hasPaymentCard,proto3" json:"has_payment_card,omitempty"`
}

func (x *PickupPoint) Reset() {
	*x = PickupPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickupPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickupPoint) ProtoMessage() {}

func (x *PickupPoint) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickupPoint.ProtoReflect.Descriptor instead.
func (*PickupPoint) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{7}
}

func (x *PickupPoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PickupPoint) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PickupPoint) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PickupPoint) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *PickupPoint) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *PickupPoint) GetHasPartialRefuse() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasPartialRefuse
	}
	return nil
}

func (x *PickupPoint) GetHasFittingRoom() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasFittingRoom
	}
	return nil
}

func (x *PickupPoint) GetHasCod() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasCod
	}
	return nil
}

func (x *PickupPoint) GetHasPaymentCash() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasPaymentCash
	}
	return nil
}

func (x *PickupPoint) GetHasPaymentCard() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasPaymentCard
	}
	return nil
}

type PickUpPointsDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Point    string `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *PickUpPointsDetailRequest) Reset() {
	*x = PickUpPointsDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickUpPointsDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickUpPointsDetailRequest) ProtoMessage() {}

func (x *PickUpPointsDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickUpPointsDetailRequest.ProtoReflect.Descriptor instead.
func (*PickUpPointsDetailRequest) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{8}
}

func (x *PickUpPointsDetailRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *PickUpPointsDetailRequest) GetPoint() string {
	if x != nil {
		return x.Point
	}
	return ""
}

type PickUpPointsDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address          string                `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Title            string                `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	DeliveryPeriod   string                `protobuf:"bytes,4,opt,name=delivery_period,json=deliveryPeriod,proto3" json:"delivery_period,omitempty"`
	WorkTime         string                `protobuf:"bytes,5,opt,name=work_time,json=workTime,proto3" json:"work_time,omitempty"`
	Phone            string                `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	TripDescription  string                `protobuf:"bytes,7,opt,name=trip_description,json=tripDescription,proto3" json:"trip_description,omitempty"`
	ZipCode          *string               `protobuf:"bytes,8,opt,name=zip_code,json=zipCode,proto3,oneof" json:"zip_code,omitempty"`
	CityGeoId        string                `protobuf:"bytes,9,opt,name=city_geo_id,json=cityGeoId,proto3" json:"city_geo_id,omitempty"`
	HasPartialRefuse *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=has_partial_refuse,json=hasPartialRefuse,proto3" json:"has_partial_refuse,omitempty"`
	HasFittingRoom   *wrapperspb.BoolValue `protobuf:"bytes,11,opt,name=has_fitting_room,json=hasFittingRoom,proto3" json:"has_fitting_room,omitempty"`
	HasCod           *wrapperspb.BoolValue `protobuf:"bytes,12,opt,name=has_cod,json=hasCod,proto3" json:"has_cod,omitempty"`
	HasPaymentCash   *wrapperspb.BoolValue `protobuf:"bytes,13,opt,name=has_payment_cash,json=hasPaymentCash,proto3" json:"has_payment_cash,omitempty"`
	HasPaymentCard   *wrapperspb.BoolValue `protobuf:"bytes,14,opt,name=has_payment_card,json=hasPaymentCard,proto3" json:"has_payment_card,omitempty"`
}

func (x *PickUpPointsDetailResponse) Reset() {
	*x = PickUpPointsDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickUpPointsDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickUpPointsDetailResponse) ProtoMessage() {}

func (x *PickUpPointsDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickUpPointsDetailResponse.ProtoReflect.Descriptor instead.
func (*PickUpPointsDetailResponse) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{9}
}

func (x *PickUpPointsDetailResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PickUpPointsDetailResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PickUpPointsDetailResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PickUpPointsDetailResponse) GetDeliveryPeriod() string {
	if x != nil {
		return x.DeliveryPeriod
	}
	return ""
}

func (x *PickUpPointsDetailResponse) GetWorkTime() string {
	if x != nil {
		return x.WorkTime
	}
	return ""
}

func (x *PickUpPointsDetailResponse) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PickUpPointsDetailResponse) GetTripDescription() string {
	if x != nil {
		return x.TripDescription
	}
	return ""
}

func (x *PickUpPointsDetailResponse) GetZipCode() string {
	if x != nil && x.ZipCode != nil {
		return *x.ZipCode
	}
	return ""
}

func (x *PickUpPointsDetailResponse) GetCityGeoId() string {
	if x != nil {
		return x.CityGeoId
	}
	return ""
}

func (x *PickUpPointsDetailResponse) GetHasPartialRefuse() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasPartialRefuse
	}
	return nil
}

func (x *PickUpPointsDetailResponse) GetHasFittingRoom() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasFittingRoom
	}
	return nil
}

func (x *PickUpPointsDetailResponse) GetHasCod() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasCod
	}
	return nil
}

func (x *PickUpPointsDetailResponse) GetHasPaymentCash() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasPaymentCash
	}
	return nil
}

func (x *PickUpPointsDetailResponse) GetHasPaymentCard() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasPaymentCard
	}
	return nil
}

type CalculateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryIsoCode   string           `protobuf:"bytes,1,opt,name=country_iso_code,json=countryIsoCode,proto3" json:"country_iso_code,omitempty"`
	RegionGeoId      string           `protobuf:"bytes,2,opt,name=region_geo_id,json=regionGeoId,proto3" json:"region_geo_id,omitempty"`
	CityGeoId        string           `protobuf:"bytes,3,opt,name=city_geo_id,json=cityGeoId,proto3" json:"city_geo_id,omitempty"`
	SettlementGeoId  string           `protobuf:"bytes,4,opt,name=settlement_geo_id,json=settlementGeoId,proto3" json:"settlement_geo_id,omitempty"`
	StreetGeoId      string           `protobuf:"bytes,5,opt,name=street_geo_id,json=streetGeoId,proto3" json:"street_geo_id,omitempty"`
	HouseGeoId       string           `protobuf:"bytes,6,opt,name=house_geo_id,json=houseGeoId,proto3" json:"house_geo_id,omitempty"`
	GeoId            string           `protobuf:"bytes,7,opt,name=geo_id,json=geoId,proto3" json:"geo_id,omitempty"`
	CartId           int32            `protobuf:"varint,8,opt,name=cart_id,json=cartId,proto3" json:"cart_id,omitempty"`
	CartsCategory    []*CartsCategory `protobuf:"bytes,9,rep,name=carts_category,json=cartsCategory,proto3" json:"carts_category,omitempty"`
	OrderDatetime    string           `protobuf:"bytes,10,opt,name=order_datetime,json=orderDatetime,proto3" json:"order_datetime,omitempty"`
	IsCartForClients bool             `protobuf:"varint,11,opt,name=is_cart_for_clients,json=isCartForClients,proto3" json:"is_cart_for_clients,omitempty"`
}

func (x *CalculateRequest) Reset() {
	*x = CalculateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateRequest) ProtoMessage() {}

func (x *CalculateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateRequest.ProtoReflect.Descriptor instead.
func (*CalculateRequest) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{10}
}

func (x *CalculateRequest) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *CalculateRequest) GetRegionGeoId() string {
	if x != nil {
		return x.RegionGeoId
	}
	return ""
}

func (x *CalculateRequest) GetCityGeoId() string {
	if x != nil {
		return x.CityGeoId
	}
	return ""
}

func (x *CalculateRequest) GetSettlementGeoId() string {
	if x != nil {
		return x.SettlementGeoId
	}
	return ""
}

func (x *CalculateRequest) GetStreetGeoId() string {
	if x != nil {
		return x.StreetGeoId
	}
	return ""
}

func (x *CalculateRequest) GetHouseGeoId() string {
	if x != nil {
		return x.HouseGeoId
	}
	return ""
}

func (x *CalculateRequest) GetGeoId() string {
	if x != nil {
		return x.GeoId
	}
	return ""
}

func (x *CalculateRequest) GetCartId() int32 {
	if x != nil {
		return x.CartId
	}
	return 0
}

func (x *CalculateRequest) GetCartsCategory() []*CartsCategory {
	if x != nil {
		return x.CartsCategory
	}
	return nil
}

func (x *CalculateRequest) GetOrderDatetime() string {
	if x != nil {
		return x.OrderDatetime
	}
	return ""
}

func (x *CalculateRequest) GetIsCartForClients() bool {
	if x != nil {
		return x.IsCartForClients
	}
	return false
}

type CartsCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId   int32           `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	CartPosition []*CartPosition `protobuf:"bytes,2,rep,name=cart_position,json=cartPosition,proto3" json:"cart_position,omitempty"`
}

func (x *CartsCategory) Reset() {
	*x = CartsCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CartsCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CartsCategory) ProtoMessage() {}

func (x *CartsCategory) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CartsCategory.ProtoReflect.Descriptor instead.
func (*CartsCategory) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{11}
}

func (x *CartsCategory) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *CartsCategory) GetCartPosition() []*CartPosition {
	if x != nil {
		return x.CartPosition
	}
	return nil
}

type CartPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Barcode   int32   `protobuf:"varint,1,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Quantity  int32   `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price     float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	IsPresent bool    `protobuf:"varint,4,opt,name=is_present,json=isPresent,proto3" json:"is_present,omitempty"`
	Weight    int32   `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *CartPosition) Reset() {
	*x = CartPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CartPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CartPosition) ProtoMessage() {}

func (x *CartPosition) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CartPosition.ProtoReflect.Descriptor instead.
func (*CartPosition) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{12}
}

func (x *CartPosition) GetBarcode() int32 {
	if x != nil {
		return x.Barcode
	}
	return 0
}

func (x *CartPosition) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CartPosition) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CartPosition) GetIsPresent() bool {
	if x != nil {
		return x.IsPresent
	}
	return false
}

func (x *CartPosition) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type CalculateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Restrictions  []*WinnerRestriction  `protobuf:"bytes,1,rep,name=restrictions,proto3" json:"restrictions,omitempty"`
	DeliveryModes []*WinnerDeliveryMode `protobuf:"bytes,2,rep,name=delivery_modes,json=deliveryModes,proto3" json:"delivery_modes,omitempty"`
}

func (x *CalculateResponse) Reset() {
	*x = CalculateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateResponse) ProtoMessage() {}

func (x *CalculateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateResponse.ProtoReflect.Descriptor instead.
func (*CalculateResponse) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{13}
}

func (x *CalculateResponse) GetRestrictions() []*WinnerRestriction {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

func (x *CalculateResponse) GetDeliveryModes() []*WinnerDeliveryMode {
	if x != nil {
		return x.DeliveryModes
	}
	return nil
}

type WinnerDeliveryMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         string                `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Code          string                `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	DeliveryTypes []*WinnerDeliveryType `protobuf:"bytes,3,rep,name=delivery_types,json=deliveryTypes,proto3" json:"delivery_types,omitempty"`
}

func (x *WinnerDeliveryMode) Reset() {
	*x = WinnerDeliveryMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinnerDeliveryMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinnerDeliveryMode) ProtoMessage() {}

func (x *WinnerDeliveryMode) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinnerDeliveryMode.ProtoReflect.Descriptor instead.
func (*WinnerDeliveryMode) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{14}
}

func (x *WinnerDeliveryMode) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WinnerDeliveryMode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WinnerDeliveryMode) GetDeliveryTypes() []*WinnerDeliveryType {
	if x != nil {
		return x.DeliveryTypes
	}
	return nil
}

type WinnerRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Popup   *WinnerPopup `protobuf:"bytes,2,opt,name=popup,proto3" json:"popup,omitempty"`
}

func (x *WinnerRestriction) Reset() {
	*x = WinnerRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinnerRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinnerRestriction) ProtoMessage() {}

func (x *WinnerRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinnerRestriction.ProtoReflect.Descriptor instead.
func (*WinnerRestriction) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{15}
}

func (x *WinnerRestriction) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *WinnerRestriction) GetPopup() *WinnerPopup {
	if x != nil {
		return x.Popup
	}
	return nil
}

type WinnerPopup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Text   string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Button string `protobuf:"bytes,3,opt,name=button,proto3" json:"button,omitempty"`
}

func (x *WinnerPopup) Reset() {
	*x = WinnerPopup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinnerPopup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinnerPopup) ProtoMessage() {}

func (x *WinnerPopup) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinnerPopup.ProtoReflect.Descriptor instead.
func (*WinnerPopup) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{16}
}

func (x *WinnerPopup) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WinnerPopup) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *WinnerPopup) GetButton() string {
	if x != nil {
		return x.Button
	}
	return ""
}

type WinnerDeliveryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliveryTypeName             string                 `protobuf:"bytes,1,opt,name=delivery_type_name,json=deliveryTypeName,proto3" json:"delivery_type_name,omitempty"`
	TransportCompanyName         string                 `protobuf:"bytes,2,opt,name=transport_company_name,json=transportCompanyName,proto3" json:"transport_company_name,omitempty"`
	CodeType                     string                 `protobuf:"bytes,3,opt,name=code_type,json=codeType,proto3" json:"code_type,omitempty"`
	CodeTk                       string                 `protobuf:"bytes,4,opt,name=code_tk,json=codeTk,proto3" json:"code_tk,omitempty"`
	Message                      string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	DeliveryPrice                float32                `protobuf:"fixed32,6,opt,name=delivery_price,json=deliveryPrice,proto3" json:"delivery_price,omitempty"`
	Popup                        *WinnerPopup           `protobuf:"bytes,7,opt,name=popup,proto3" json:"popup,omitempty"`
	PaymentMethods               []*WinnerPaymentMethod `protobuf:"bytes,8,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty"`
	DeliveryDates                []*WinnerDeliveryDates `protobuf:"bytes,9,rep,name=delivery_dates,json=deliveryDates,proto3" json:"delivery_dates,omitempty"`
	IsRestricted                 bool                   `protobuf:"varint,10,opt,name=is_restricted,json=isRestricted,proto3" json:"is_restricted,omitempty"`
	Restrictions                 []*WinnerRestriction   `protobuf:"bytes,11,rep,name=restrictions,proto3" json:"restrictions,omitempty"`
	FromDays                     int32                  `protobuf:"varint,12,opt,name=from_days,json=fromDays,proto3" json:"from_days,omitempty"`
	ToDays                       int32                  `protobuf:"varint,13,opt,name=to_days,json=toDays,proto3" json:"to_days,omitempty"`
	IsDeliveryUseOnlyWorkingDays bool                   `protobuf:"varint,14,opt,name=is_delivery_use_only_working_days,json=isDeliveryUseOnlyWorkingDays,proto3" json:"is_delivery_use_only_working_days,omitempty"`
	StorePickup                  *WinnerStorePickup     `protobuf:"bytes,15,opt,name=store_pickup,json=storePickup,proto3" json:"store_pickup,omitempty"`
	StoreShipment                *WinnerStoreShipment   `protobuf:"bytes,16,opt,name=store_shipment,json=storeShipment,proto3" json:"store_shipment,omitempty"`
}

func (x *WinnerDeliveryType) Reset() {
	*x = WinnerDeliveryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinnerDeliveryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinnerDeliveryType) ProtoMessage() {}

func (x *WinnerDeliveryType) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinnerDeliveryType.ProtoReflect.Descriptor instead.
func (*WinnerDeliveryType) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{17}
}

func (x *WinnerDeliveryType) GetDeliveryTypeName() string {
	if x != nil {
		return x.DeliveryTypeName
	}
	return ""
}

func (x *WinnerDeliveryType) GetTransportCompanyName() string {
	if x != nil {
		return x.TransportCompanyName
	}
	return ""
}

func (x *WinnerDeliveryType) GetCodeType() string {
	if x != nil {
		return x.CodeType
	}
	return ""
}

func (x *WinnerDeliveryType) GetCodeTk() string {
	if x != nil {
		return x.CodeTk
	}
	return ""
}

func (x *WinnerDeliveryType) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *WinnerDeliveryType) GetDeliveryPrice() float32 {
	if x != nil {
		return x.DeliveryPrice
	}
	return 0
}

func (x *WinnerDeliveryType) GetPopup() *WinnerPopup {
	if x != nil {
		return x.Popup
	}
	return nil
}

func (x *WinnerDeliveryType) GetPaymentMethods() []*WinnerPaymentMethod {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

func (x *WinnerDeliveryType) GetDeliveryDates() []*WinnerDeliveryDates {
	if x != nil {
		return x.DeliveryDates
	}
	return nil
}

func (x *WinnerDeliveryType) GetIsRestricted() bool {
	if x != nil {
		return x.IsRestricted
	}
	return false
}

func (x *WinnerDeliveryType) GetRestrictions() []*WinnerRestriction {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

func (x *WinnerDeliveryType) GetFromDays() int32 {
	if x != nil {
		return x.FromDays
	}
	return 0
}

func (x *WinnerDeliveryType) GetToDays() int32 {
	if x != nil {
		return x.ToDays
	}
	return 0
}

func (x *WinnerDeliveryType) GetIsDeliveryUseOnlyWorkingDays() bool {
	if x != nil {
		return x.IsDeliveryUseOnlyWorkingDays
	}
	return false
}

func (x *WinnerDeliveryType) GetStorePickup() *WinnerStorePickup {
	if x != nil {
		return x.StorePickup
	}
	return nil
}

func (x *WinnerDeliveryType) GetStoreShipment() *WinnerStoreShipment {
	if x != nil {
		return x.StoreShipment
	}
	return nil
}

type WinnerPaymentMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleRu      string `protobuf:"bytes,1,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
	Code         string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	IsRestricted bool   `protobuf:"varint,3,opt,name=is_restricted,json=isRestricted,proto3" json:"is_restricted,omitempty"`
	Message      string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *WinnerPaymentMethod) Reset() {
	*x = WinnerPaymentMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinnerPaymentMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinnerPaymentMethod) ProtoMessage() {}

func (x *WinnerPaymentMethod) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinnerPaymentMethod.ProtoReflect.Descriptor instead.
func (*WinnerPaymentMethod) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{18}
}

func (x *WinnerPaymentMethod) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

func (x *WinnerPaymentMethod) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WinnerPaymentMethod) GetIsRestricted() bool {
	if x != nil {
		return x.IsRestricted
	}
	return false
}

func (x *WinnerPaymentMethod) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type WinnerDeliveryDates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date      string            `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Title     string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Intervals []*WinnerInterval `protobuf:"bytes,3,rep,name=intervals,proto3" json:"intervals,omitempty"`
}

func (x *WinnerDeliveryDates) Reset() {
	*x = WinnerDeliveryDates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinnerDeliveryDates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinnerDeliveryDates) ProtoMessage() {}

func (x *WinnerDeliveryDates) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinnerDeliveryDates.ProtoReflect.Descriptor instead.
func (*WinnerDeliveryDates) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{19}
}

func (x *WinnerDeliveryDates) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *WinnerDeliveryDates) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WinnerDeliveryDates) GetIntervals() []*WinnerInterval {
	if x != nil {
		return x.Intervals
	}
	return nil
}

type WinnerInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	TimeFrom         string `protobuf:"bytes,2,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	TimeTo           string `protobuf:"bytes,3,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
	Code             string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	InternalTimeFrom string `protobuf:"bytes,5,opt,name=internal_time_from,json=internalTimeFrom,proto3" json:"internal_time_from,omitempty"`
	InternalTimeTo   string `protobuf:"bytes,6,opt,name=internal_time_to,json=internalTimeTo,proto3" json:"internal_time_to,omitempty"`
}

func (x *WinnerInterval) Reset() {
	*x = WinnerInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinnerInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinnerInterval) ProtoMessage() {}

func (x *WinnerInterval) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinnerInterval.ProtoReflect.Descriptor instead.
func (*WinnerInterval) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{20}
}

func (x *WinnerInterval) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WinnerInterval) GetTimeFrom() string {
	if x != nil {
		return x.TimeFrom
	}
	return ""
}

func (x *WinnerInterval) GetTimeTo() string {
	if x != nil {
		return x.TimeTo
	}
	return ""
}

func (x *WinnerInterval) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WinnerInterval) GetInternalTimeFrom() string {
	if x != nil {
		return x.InternalTimeFrom
	}
	return ""
}

func (x *WinnerInterval) GetInternalTimeTo() string {
	if x != nil {
		return x.InternalTimeTo
	}
	return ""
}

type IntervalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliveryTypeCode string `protobuf:"bytes,1,opt,name=delivery_type_code,json=deliveryTypeCode,proto3" json:"delivery_type_code,omitempty"`
	Date             string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *IntervalsRequest) Reset() {
	*x = IntervalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalsRequest) ProtoMessage() {}

func (x *IntervalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalsRequest.ProtoReflect.Descriptor instead.
func (*IntervalsRequest) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{21}
}

func (x *IntervalsRequest) GetDeliveryTypeCode() string {
	if x != nil {
		return x.DeliveryTypeCode
	}
	return ""
}

func (x *IntervalsRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type Intervals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FromDays      int32                  `protobuf:"varint,2,opt,name=from_days,json=fromDays,proto3" json:"from_days,omitempty"`
	ToDays        int32                  `protobuf:"varint,3,opt,name=to_days,json=toDays,proto3" json:"to_days,omitempty"`
	DeliveryDates []*WinnerDeliveryDates `protobuf:"bytes,4,rep,name=delivery_dates,json=deliveryDates,proto3" json:"delivery_dates,omitempty"`
}

func (x *Intervals) Reset() {
	*x = Intervals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Intervals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Intervals) ProtoMessage() {}

func (x *Intervals) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Intervals.ProtoReflect.Descriptor instead.
func (*Intervals) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{22}
}

func (x *Intervals) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Intervals) GetFromDays() int32 {
	if x != nil {
		return x.FromDays
	}
	return 0
}

func (x *Intervals) GetToDays() int32 {
	if x != nil {
		return x.ToDays
	}
	return 0
}

func (x *Intervals) GetDeliveryDates() []*WinnerDeliveryDates {
	if x != nil {
		return x.DeliveryDates
	}
	return nil
}

type IntervalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Intervals `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *IntervalsResponse) Reset() {
	*x = IntervalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalsResponse) ProtoMessage() {}

func (x *IntervalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalsResponse.ProtoReflect.Descriptor instead.
func (*IntervalsResponse) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{23}
}

func (x *IntervalsResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IntervalsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *IntervalsResponse) GetData() *Intervals {
	if x != nil {
		return x.Data
	}
	return nil
}

type WinnerStorePickup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreCode  string `protobuf:"bytes,1,opt,name=store_code,json=storeCode,proto3" json:"store_code,omitempty"`
	StoreTitle string `protobuf:"bytes,2,opt,name=store_title,json=storeTitle,proto3" json:"store_title,omitempty"`
	Postal     string `protobuf:"bytes,3,opt,name=postal,proto3" json:"postal,omitempty"`
	Country    string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	City       string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	Street     string `protobuf:"bytes,6,opt,name=street,proto3" json:"street,omitempty"`
	House      string `protobuf:"bytes,7,opt,name=house,proto3" json:"house,omitempty"`
	Housing    string `protobuf:"bytes,8,opt,name=housing,proto3" json:"housing,omitempty"`
	Floor      string `protobuf:"bytes,9,opt,name=floor,proto3" json:"floor,omitempty"`
	Address    string `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	Schedule   string `protobuf:"bytes,11,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *WinnerStorePickup) Reset() {
	*x = WinnerStorePickup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinnerStorePickup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinnerStorePickup) ProtoMessage() {}

func (x *WinnerStorePickup) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinnerStorePickup.ProtoReflect.Descriptor instead.
func (*WinnerStorePickup) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{24}
}

func (x *WinnerStorePickup) GetStoreCode() string {
	if x != nil {
		return x.StoreCode
	}
	return ""
}

func (x *WinnerStorePickup) GetStoreTitle() string {
	if x != nil {
		return x.StoreTitle
	}
	return ""
}

func (x *WinnerStorePickup) GetPostal() string {
	if x != nil {
		return x.Postal
	}
	return ""
}

func (x *WinnerStorePickup) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *WinnerStorePickup) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *WinnerStorePickup) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *WinnerStorePickup) GetHouse() string {
	if x != nil {
		return x.House
	}
	return ""
}

func (x *WinnerStorePickup) GetHousing() string {
	if x != nil {
		return x.Housing
	}
	return ""
}

func (x *WinnerStorePickup) GetFloor() string {
	if x != nil {
		return x.Floor
	}
	return ""
}

func (x *WinnerStorePickup) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WinnerStorePickup) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

type WinnerStoreShipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreCode  string `protobuf:"bytes,1,opt,name=store_code,json=storeCode,proto3" json:"store_code,omitempty"`
	StoreTitle string `protobuf:"bytes,2,opt,name=store_title,json=storeTitle,proto3" json:"store_title,omitempty"`
}

func (x *WinnerStoreShipment) Reset() {
	*x = WinnerStoreShipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winner_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinnerStoreShipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinnerStoreShipment) ProtoMessage() {}

func (x *WinnerStoreShipment) ProtoReflect() protoreflect.Message {
	mi := &file_winner_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinnerStoreShipment.ProtoReflect.Descriptor instead.
func (*WinnerStoreShipment) Descriptor() ([]byte, []int) {
	return file_winner_proto_rawDescGZIP(), []int{25}
}

func (x *WinnerStoreShipment) GetStoreCode() string {
	if x != nil {
		return x.StoreCode
	}
	return ""
}

func (x *WinnerStoreShipment) GetStoreTitle() string {
	if x != nil {
		return x.StoreTitle
	}
	return ""
}

var File_winner_proto protoreflect.FileDescriptor

var file_winner_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0x82, 0x02, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x70,
	0x76, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x76, 0x7a,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x69, 0x73, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x66, 0x69, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74,
	0x79, 0x46, 0x69, 0x61, 0x73, 0x22, 0x3a, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x77, 0x0a, 0x13, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf1, 0x02, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x48, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x68, 0x61, 0x73, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x68, 0x61, 0x73,
	0x5f, 0x66, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x68, 0x61, 0x73, 0x46, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x33, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x68, 0x61,
	0x73, 0x43, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x25,
	0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x1a, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x53, 0x48, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43,
	0x41, 0x52, 0x44, 0x10, 0x01, 0x22, 0x48, 0x0a, 0x14, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0xc2, 0x03, 0x0a, 0x0b, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6c, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x68, 0x61, 0x73,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x10, 0x68, 0x61, 0x73, 0x5f, 0x66, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x46, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x6f, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x68, 0x61, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x73, 0x68, 0x12, 0x44,
	0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x22, 0x4d, 0x0a, 0x19, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x81, 0x05, 0x0a, 0x1a, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x70, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x7a, 0x69, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x7a,
	0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x69, 0x74, 0x79, 0x47, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x68, 0x61, 0x73,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x68, 0x61, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x66,
	0x75, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x66, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x46, 0x69,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x68, 0x61, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x64, 0x12, 0x44,
	0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61,
	0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x7a,
	0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb9, 0x03, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x69, 0x74, 0x79, 0x47, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x47, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x67, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65,
	0x6f, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0e,
	0x63, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x43, 0x61, 0x72, 0x74, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0d,
	0x63, 0x61, 0x72, 0x74, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x43, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x6e, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x74, 0x73, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x44, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x11,
	0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x70,
	0x6f, 0x70, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x70,
	0x75, 0x70, 0x52, 0x05, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x22, 0x4f, 0x0a, 0x0b, 0x57, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x9b, 0x06, 0x0a, 0x12, 0x57,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x05,
	0x70, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x6f,
	0x70, 0x75, 0x70, 0x52, 0x05, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x47, 0x0a, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0d, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x79, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x74, 0x6f, 0x44, 0x61, 0x79, 0x73, 0x12, 0x47, 0x0a, 0x21, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1c, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x55, 0x73,
	0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x57, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x78,
	0x0a, 0x13, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x37, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x57,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x57, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x22, 0x54, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x09, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x79, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x45, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xad, 0x02, 0x0a, 0x11, 0x57, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x55, 0x0a, 0x13, 0x57, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x32, 0x95, 0x05, 0x0a, 0x0d, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x6b, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x66, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x1b, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x7d, 0x0a, 0x0a, 0x50, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x2f, 0x7b, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x7d, 0x2f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x0c, 0x50, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x70,
	0x69, 0x63, 0x6b, 0x75, 0x70, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x7d,
	0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x7d, 0x12,
	0xa6, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x20, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x12,
	0x47, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f,
	0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x7d, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x7b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x7d, 0x42, 0x0e, 0x5a, 0x0c, 0x67, 0x6f, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_winner_proto_rawDescOnce sync.Once
	file_winner_proto_rawDescData = file_winner_proto_rawDesc
)

func file_winner_proto_rawDescGZIP() []byte {
	file_winner_proto_rawDescOnce.Do(func() {
		file_winner_proto_rawDescData = protoimpl.X.CompressGZIP(file_winner_proto_rawDescData)
	})
	return file_winner_proto_rawDescData
}

var file_winner_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_winner_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_winner_proto_goTypes = []interface{}{
	(Payment_Type)(0),                  // 0: logistics.Payment.Type
	(*AddressDetailsRequest)(nil),      // 1: logistics.AddressDetailsRequest
	(*AddressDetailsResponse)(nil),     // 2: logistics.AddressDetailsResponse
	(*Pagination)(nil),                 // 3: logistics.Pagination
	(*PickUpPointsRequest)(nil),        // 4: logistics.PickUpPointsRequest
	(*Filter)(nil),                     // 5: logistics.Filter
	(*Payment)(nil),                    // 6: logistics.Payment
	(*PickUpPointsResponse)(nil),       // 7: logistics.PickUpPointsResponse
	(*PickupPoint)(nil),                // 8: logistics.PickupPoint
	(*PickUpPointsDetailRequest)(nil),  // 9: logistics.PickUpPointsDetailRequest
	(*PickUpPointsDetailResponse)(nil), // 10: logistics.PickUpPointsDetailResponse
	(*CalculateRequest)(nil),           // 11: logistics.CalculateRequest
	(*CartsCategory)(nil),              // 12: logistics.CartsCategory
	(*CartPosition)(nil),               // 13: logistics.CartPosition
	(*CalculateResponse)(nil),          // 14: logistics.CalculateResponse
	(*WinnerDeliveryMode)(nil),         // 15: logistics.WinnerDeliveryMode
	(*WinnerRestriction)(nil),          // 16: logistics.WinnerRestriction
	(*WinnerPopup)(nil),                // 17: logistics.WinnerPopup
	(*WinnerDeliveryType)(nil),         // 18: logistics.WinnerDeliveryType
	(*WinnerPaymentMethod)(nil),        // 19: logistics.WinnerPaymentMethod
	(*WinnerDeliveryDates)(nil),        // 20: logistics.WinnerDeliveryDates
	(*WinnerInterval)(nil),             // 21: logistics.WinnerInterval
	(*IntervalsRequest)(nil),           // 22: logistics.IntervalsRequest
	(*Intervals)(nil),                  // 23: logistics.Intervals
	(*IntervalsResponse)(nil),          // 24: logistics.IntervalsResponse
	(*WinnerStorePickup)(nil),          // 25: logistics.WinnerStorePickup
	(*WinnerStoreShipment)(nil),        // 26: logistics.WinnerStoreShipment
	(*wrapperspb.BoolValue)(nil),       // 27: google.protobuf.BoolValue
	(*UnifiedResponse)(nil),            // 28: common.UnifiedResponse
}
var file_winner_proto_depIdxs = []int32{
	5,  // 0: logistics.PickUpPointsRequest.filter:type_name -> logistics.Filter
	3,  // 1: logistics.PickUpPointsRequest.pagination:type_name -> logistics.Pagination
	27, // 2: logistics.Filter.has_partial_refuse:type_name -> google.protobuf.BoolValue
	27, // 3: logistics.Filter.has_fitting_room:type_name -> google.protobuf.BoolValue
	27, // 4: logistics.Filter.has_cod:type_name -> google.protobuf.BoolValue
	0,  // 5: logistics.Filter.cod_payment:type_name -> logistics.Payment.Type
	8,  // 6: logistics.PickUpPointsResponse.results:type_name -> logistics.PickupPoint
	27, // 7: logistics.PickupPoint.has_partial_refuse:type_name -> google.protobuf.BoolValue
	27, // 8: logistics.PickupPoint.has_fitting_room:type_name -> google.protobuf.BoolValue
	27, // 9: logistics.PickupPoint.has_cod:type_name -> google.protobuf.BoolValue
	27, // 10: logistics.PickupPoint.has_payment_cash:type_name -> google.protobuf.BoolValue
	27, // 11: logistics.PickupPoint.has_payment_card:type_name -> google.protobuf.BoolValue
	27, // 12: logistics.PickUpPointsDetailResponse.has_partial_refuse:type_name -> google.protobuf.BoolValue
	27, // 13: logistics.PickUpPointsDetailResponse.has_fitting_room:type_name -> google.protobuf.BoolValue
	27, // 14: logistics.PickUpPointsDetailResponse.has_cod:type_name -> google.protobuf.BoolValue
	27, // 15: logistics.PickUpPointsDetailResponse.has_payment_cash:type_name -> google.protobuf.BoolValue
	27, // 16: logistics.PickUpPointsDetailResponse.has_payment_card:type_name -> google.protobuf.BoolValue
	12, // 17: logistics.CalculateRequest.carts_category:type_name -> logistics.CartsCategory
	13, // 18: logistics.CartsCategory.cart_position:type_name -> logistics.CartPosition
	16, // 19: logistics.CalculateResponse.restrictions:type_name -> logistics.WinnerRestriction
	15, // 20: logistics.CalculateResponse.delivery_modes:type_name -> logistics.WinnerDeliveryMode
	18, // 21: logistics.WinnerDeliveryMode.delivery_types:type_name -> logistics.WinnerDeliveryType
	17, // 22: logistics.WinnerRestriction.popup:type_name -> logistics.WinnerPopup
	17, // 23: logistics.WinnerDeliveryType.popup:type_name -> logistics.WinnerPopup
	19, // 24: logistics.WinnerDeliveryType.payment_methods:type_name -> logistics.WinnerPaymentMethod
	20, // 25: logistics.WinnerDeliveryType.delivery_dates:type_name -> logistics.WinnerDeliveryDates
	16, // 26: logistics.WinnerDeliveryType.restrictions:type_name -> logistics.WinnerRestriction
	25, // 27: logistics.WinnerDeliveryType.store_pickup:type_name -> logistics.WinnerStorePickup
	26, // 28: logistics.WinnerDeliveryType.store_shipment:type_name -> logistics.WinnerStoreShipment
	21, // 29: logistics.WinnerDeliveryDates.intervals:type_name -> logistics.WinnerInterval
	20, // 30: logistics.Intervals.delivery_dates:type_name -> logistics.WinnerDeliveryDates
	23, // 31: logistics.IntervalsResponse.data:type_name -> logistics.Intervals
	11, // 32: logistics.WinnerService.Calculate:input_type -> logistics.CalculateRequest
	22, // 33: logistics.WinnerService.Intervals:input_type -> logistics.IntervalsRequest
	4,  // 34: logistics.WinnerService.PickupList:input_type -> logistics.PickUpPointsRequest
	9,  // 35: logistics.WinnerService.PickupDetail:input_type -> logistics.PickUpPointsDetailRequest
	1,  // 36: logistics.WinnerService.AddressDetails:input_type -> logistics.AddressDetailsRequest
	14, // 37: logistics.WinnerService.Calculate:output_type -> logistics.CalculateResponse
	28, // 38: logistics.WinnerService.Intervals:output_type -> common.UnifiedResponse
	28, // 39: logistics.WinnerService.PickupList:output_type -> common.UnifiedResponse
	28, // 40: logistics.WinnerService.PickupDetail:output_type -> common.UnifiedResponse
	2,  // 41: logistics.WinnerService.AddressDetails:output_type -> logistics.AddressDetailsResponse
	37, // [37:42] is the sub-list for method output_type
	32, // [32:37] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_winner_proto_init() }
func file_winner_proto_init() {
	if File_winner_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_winner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickUpPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickUpPointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickupPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickUpPointsDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickUpPointsDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CartsCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CartPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinnerDeliveryMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinnerRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinnerPopup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinnerDeliveryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinnerPaymentMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinnerDeliveryDates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinnerInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Intervals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinnerStorePickup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winner_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinnerStoreShipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_winner_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_winner_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_winner_proto_goTypes,
		DependencyIndexes: file_winner_proto_depIdxs,
		EnumInfos:         file_winner_proto_enumTypes,
		MessageInfos:      file_winner_proto_msgTypes,
	}.Build()
	File_winner_proto = out.File
	file_winner_proto_rawDesc = nil
	file_winner_proto_goTypes = nil
	file_winner_proto_depIdxs = nil
}
