// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: proto/order.proto

// import "common/request.proto";
// import "common/response.proto";

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderService_GetOutboxList_FullMethodName          = "/orders.OrderService/GetOutboxList"
	OrderService_GetOutboxByID_FullMethodName          = "/orders.OrderService/GetOutboxByID"
	OrderService_SetOutboxBodyByID_FullMethodName      = "/orders.OrderService/SetOutboxBodyByID"
	OrderService_DeleteOutboxByID_FullMethodName       = "/orders.OrderService/DeleteOutboxByID"
	OrderService_GetOrderHistoryList_FullMethodName    = "/orders.OrderService/GetOrderHistoryList"
	OrderService_GetOrderHistoryByID_FullMethodName    = "/orders.OrderService/GetOrderHistoryByID"
	OrderService_GetPositionHistoryList_FullMethodName = "/orders.OrderService/GetPositionHistoryList"
	OrderService_GetPositionHistoryByID_FullMethodName = "/orders.OrderService/GetPositionHistoryByID"
	OrderService_GetOrderList_FullMethodName           = "/orders.OrderService/GetOrderList"
	OrderService_GetOrderByID_FullMethodName           = "/orders.OrderService/GetOrderByID"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	GetOutboxList(ctx context.Context, in *GetListOutBoxRequest, opts ...grpc.CallOption) (*GetListOutBoxResponse, error)
	GetOutboxByID(ctx context.Context, in *GetByIDOutBoxRequest, opts ...grpc.CallOption) (*GetByIDOutBoxResponse, error)
	SetOutboxBodyByID(ctx context.Context, in *SetByIDOutboxBodyRequest, opts ...grpc.CallOption) (*SetByIDOutboxBodyResponse, error)
	DeleteOutboxByID(ctx context.Context, in *DeleteByIDOutboxRequest, opts ...grpc.CallOption) (*DeleteByIDOutboxResponse, error)
	GetOrderHistoryList(ctx context.Context, in *GetListOrderHistoryRequest, opts ...grpc.CallOption) (*GetListOrderHistoryResponse, error)
	GetOrderHistoryByID(ctx context.Context, in *GetByIDOrderHistoryRequest, opts ...grpc.CallOption) (*GetByIDOrderHistoryResponse, error)
	GetPositionHistoryList(ctx context.Context, in *GetListPositionHistoryRequest, opts ...grpc.CallOption) (*GetListPositionHistoryResponse, error)
	GetPositionHistoryByID(ctx context.Context, in *GetByIDPositionHistoryRequest, opts ...grpc.CallOption) (*GetByIDPositionHistoryResponse, error)
	GetOrderList(ctx context.Context, in *GetListOrderRequest, opts ...grpc.CallOption) (*GetListOrderResponse, error)
	GetOrderByID(ctx context.Context, in *GetByIDOrderRequest, opts ...grpc.CallOption) (*GetByIDOrderResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) GetOutboxList(ctx context.Context, in *GetListOutBoxRequest, opts ...grpc.CallOption) (*GetListOutBoxResponse, error) {
	out := new(GetListOutBoxResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOutboxList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOutboxByID(ctx context.Context, in *GetByIDOutBoxRequest, opts ...grpc.CallOption) (*GetByIDOutBoxResponse, error) {
	out := new(GetByIDOutBoxResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOutboxByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) SetOutboxBodyByID(ctx context.Context, in *SetByIDOutboxBodyRequest, opts ...grpc.CallOption) (*SetByIDOutboxBodyResponse, error) {
	out := new(SetByIDOutboxBodyResponse)
	err := c.cc.Invoke(ctx, OrderService_SetOutboxBodyByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) DeleteOutboxByID(ctx context.Context, in *DeleteByIDOutboxRequest, opts ...grpc.CallOption) (*DeleteByIDOutboxResponse, error) {
	out := new(DeleteByIDOutboxResponse)
	err := c.cc.Invoke(ctx, OrderService_DeleteOutboxByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderHistoryList(ctx context.Context, in *GetListOrderHistoryRequest, opts ...grpc.CallOption) (*GetListOrderHistoryResponse, error) {
	out := new(GetListOrderHistoryResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderHistoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderHistoryByID(ctx context.Context, in *GetByIDOrderHistoryRequest, opts ...grpc.CallOption) (*GetByIDOrderHistoryResponse, error) {
	out := new(GetByIDOrderHistoryResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderHistoryByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetPositionHistoryList(ctx context.Context, in *GetListPositionHistoryRequest, opts ...grpc.CallOption) (*GetListPositionHistoryResponse, error) {
	out := new(GetListPositionHistoryResponse)
	err := c.cc.Invoke(ctx, OrderService_GetPositionHistoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetPositionHistoryByID(ctx context.Context, in *GetByIDPositionHistoryRequest, opts ...grpc.CallOption) (*GetByIDPositionHistoryResponse, error) {
	out := new(GetByIDPositionHistoryResponse)
	err := c.cc.Invoke(ctx, OrderService_GetPositionHistoryByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderList(ctx context.Context, in *GetListOrderRequest, opts ...grpc.CallOption) (*GetListOrderResponse, error) {
	out := new(GetListOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderByID(ctx context.Context, in *GetByIDOrderRequest, opts ...grpc.CallOption) (*GetByIDOrderResponse, error) {
	out := new(GetByIDOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations should embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	GetOutboxList(context.Context, *GetListOutBoxRequest) (*GetListOutBoxResponse, error)
	GetOutboxByID(context.Context, *GetByIDOutBoxRequest) (*GetByIDOutBoxResponse, error)
	SetOutboxBodyByID(context.Context, *SetByIDOutboxBodyRequest) (*SetByIDOutboxBodyResponse, error)
	DeleteOutboxByID(context.Context, *DeleteByIDOutboxRequest) (*DeleteByIDOutboxResponse, error)
	GetOrderHistoryList(context.Context, *GetListOrderHistoryRequest) (*GetListOrderHistoryResponse, error)
	GetOrderHistoryByID(context.Context, *GetByIDOrderHistoryRequest) (*GetByIDOrderHistoryResponse, error)
	GetPositionHistoryList(context.Context, *GetListPositionHistoryRequest) (*GetListPositionHistoryResponse, error)
	GetPositionHistoryByID(context.Context, *GetByIDPositionHistoryRequest) (*GetByIDPositionHistoryResponse, error)
	GetOrderList(context.Context, *GetListOrderRequest) (*GetListOrderResponse, error)
	GetOrderByID(context.Context, *GetByIDOrderRequest) (*GetByIDOrderResponse, error)
}

// UnimplementedOrderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) GetOutboxList(context.Context, *GetListOutBoxRequest) (*GetListOutBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutboxList not implemented")
}
func (UnimplementedOrderServiceServer) GetOutboxByID(context.Context, *GetByIDOutBoxRequest) (*GetByIDOutBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutboxByID not implemented")
}
func (UnimplementedOrderServiceServer) SetOutboxBodyByID(context.Context, *SetByIDOutboxBodyRequest) (*SetByIDOutboxBodyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOutboxBodyByID not implemented")
}
func (UnimplementedOrderServiceServer) DeleteOutboxByID(context.Context, *DeleteByIDOutboxRequest) (*DeleteByIDOutboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOutboxByID not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderHistoryList(context.Context, *GetListOrderHistoryRequest) (*GetListOrderHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderHistoryList not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderHistoryByID(context.Context, *GetByIDOrderHistoryRequest) (*GetByIDOrderHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderHistoryByID not implemented")
}
func (UnimplementedOrderServiceServer) GetPositionHistoryList(context.Context, *GetListPositionHistoryRequest) (*GetListPositionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionHistoryList not implemented")
}
func (UnimplementedOrderServiceServer) GetPositionHistoryByID(context.Context, *GetByIDPositionHistoryRequest) (*GetByIDPositionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionHistoryByID not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderList(context.Context, *GetListOrderRequest) (*GetListOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderList not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderByID(context.Context, *GetByIDOrderRequest) (*GetByIDOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByID not implemented")
}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_GetOutboxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListOutBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOutboxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOutboxList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOutboxList(ctx, req.(*GetListOutBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOutboxByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDOutBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOutboxByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOutboxByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOutboxByID(ctx, req.(*GetByIDOutBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_SetOutboxBodyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetByIDOutboxBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).SetOutboxBodyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_SetOutboxBodyByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).SetOutboxBodyByID(ctx, req.(*SetByIDOutboxBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_DeleteOutboxByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIDOutboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).DeleteOutboxByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_DeleteOutboxByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).DeleteOutboxByID(ctx, req.(*DeleteByIDOutboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListOrderHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderHistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderHistoryList(ctx, req.(*GetListOrderHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderHistoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDOrderHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderHistoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderHistoryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderHistoryByID(ctx, req.(*GetByIDOrderHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetPositionHistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListPositionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetPositionHistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetPositionHistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetPositionHistoryList(ctx, req.(*GetListPositionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetPositionHistoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDPositionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetPositionHistoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetPositionHistoryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetPositionHistoryByID(ctx, req.(*GetByIDPositionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderList(ctx, req.(*GetListOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderByID(ctx, req.(*GetByIDOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orders.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOutboxList",
			Handler:    _OrderService_GetOutboxList_Handler,
		},
		{
			MethodName: "GetOutboxByID",
			Handler:    _OrderService_GetOutboxByID_Handler,
		},
		{
			MethodName: "SetOutboxBodyByID",
			Handler:    _OrderService_SetOutboxBodyByID_Handler,
		},
		{
			MethodName: "DeleteOutboxByID",
			Handler:    _OrderService_DeleteOutboxByID_Handler,
		},
		{
			MethodName: "GetOrderHistoryList",
			Handler:    _OrderService_GetOrderHistoryList_Handler,
		},
		{
			MethodName: "GetOrderHistoryByID",
			Handler:    _OrderService_GetOrderHistoryByID_Handler,
		},
		{
			MethodName: "GetPositionHistoryList",
			Handler:    _OrderService_GetPositionHistoryList_Handler,
		},
		{
			MethodName: "GetPositionHistoryByID",
			Handler:    _OrderService_GetPositionHistoryByID_Handler,
		},
		{
			MethodName: "GetOrderList",
			Handler:    _OrderService_GetOrderList_Handler,
		},
		{
			MethodName: "GetOrderByID",
			Handler:    _OrderService_GetOrderByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/order.proto",
}
