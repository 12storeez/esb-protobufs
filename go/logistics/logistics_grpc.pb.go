// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogisticsClient is the client API for Logistics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogisticsClient interface {
	CalculateWinners(ctx context.Context, in *WinnersParams, opts ...grpc.CallOption) (*WinnersResponse, error)
}

type logisticsClient struct {
	cc grpc.ClientConnInterface
}

func NewLogisticsClient(cc grpc.ClientConnInterface) LogisticsClient {
	return &logisticsClient{cc}
}

func (c *logisticsClient) CalculateWinners(ctx context.Context, in *WinnersParams, opts ...grpc.CallOption) (*WinnersResponse, error) {
	out := new(WinnersResponse)
	err := c.cc.Invoke(ctx, "/logistics.Logistics/CalculateWinners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogisticsServer is the server API for Logistics service.
// All implementations must embed UnimplementedLogisticsServer
// for forward compatibility
type LogisticsServer interface {
	CalculateWinners(context.Context, *WinnersParams) (*WinnersResponse, error)
	mustEmbedUnimplementedLogisticsServer()
}

// UnimplementedLogisticsServer must be embedded to have forward compatible implementations.
type UnimplementedLogisticsServer struct {
}

func (UnimplementedLogisticsServer) CalculateWinners(context.Context, *WinnersParams) (*WinnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateWinners not implemented")
}
func (UnimplementedLogisticsServer) mustEmbedUnimplementedLogisticsServer() {}

// UnsafeLogisticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogisticsServer will
// result in compilation errors.
type UnsafeLogisticsServer interface {
	mustEmbedUnimplementedLogisticsServer()
}

func RegisterLogisticsServer(s grpc.ServiceRegistrar, srv LogisticsServer) {
	s.RegisterService(&Logistics_ServiceDesc, srv)
}

func _Logistics_CalculateWinners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WinnersParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServer).CalculateWinners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Logistics/CalculateWinners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServer).CalculateWinners(ctx, req.(*WinnersParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Logistics_ServiceDesc is the grpc.ServiceDesc for Logistics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logistics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.Logistics",
	HandlerType: (*LogisticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateWinners",
			Handler:    _Logistics_CalculateWinners_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logistics/logistics.proto",
}
