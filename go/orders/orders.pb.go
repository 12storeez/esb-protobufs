// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/orders.proto

package orders

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ParamsOfflineByClient struct {
	ClientId             int32    `protobuf:"varint,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int32    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParamsOfflineByClient) Reset()         { *m = ParamsOfflineByClient{} }
func (m *ParamsOfflineByClient) String() string { return proto.CompactTextString(m) }
func (*ParamsOfflineByClient) ProtoMessage()    {}
func (*ParamsOfflineByClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db5eaa0f165ca68, []int{0}
}
func (m *ParamsOfflineByClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsOfflineByClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsOfflineByClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsOfflineByClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsOfflineByClient.Merge(m, src)
}
func (m *ParamsOfflineByClient) XXX_Size() int {
	return m.Size()
}
func (m *ParamsOfflineByClient) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsOfflineByClient.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsOfflineByClient proto.InternalMessageInfo

func (m *ParamsOfflineByClient) GetClientId() int32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *ParamsOfflineByClient) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ParamsOfflineByClient) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ResponseOfflineByClient struct {
	Orders               []*OfflineOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	Total                int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResponseOfflineByClient) Reset()         { *m = ResponseOfflineByClient{} }
func (m *ResponseOfflineByClient) String() string { return proto.CompactTextString(m) }
func (*ResponseOfflineByClient) ProtoMessage()    {}
func (*ResponseOfflineByClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db5eaa0f165ca68, []int{1}
}
func (m *ResponseOfflineByClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseOfflineByClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseOfflineByClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseOfflineByClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseOfflineByClient.Merge(m, src)
}
func (m *ResponseOfflineByClient) XXX_Size() int {
	return m.Size()
}
func (m *ResponseOfflineByClient) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseOfflineByClient.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseOfflineByClient proto.InternalMessageInfo

func (m *ResponseOfflineByClient) GetOrders() []*OfflineOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *ResponseOfflineByClient) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ParamsOnlineByClient struct {
	ClientId             int32    `protobuf:"varint,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParamsOnlineByClient) Reset()         { *m = ParamsOnlineByClient{} }
func (m *ParamsOnlineByClient) String() string { return proto.CompactTextString(m) }
func (*ParamsOnlineByClient) ProtoMessage()    {}
func (*ParamsOnlineByClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db5eaa0f165ca68, []int{2}
}
func (m *ParamsOnlineByClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsOnlineByClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsOnlineByClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsOnlineByClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsOnlineByClient.Merge(m, src)
}
func (m *ParamsOnlineByClient) XXX_Size() int {
	return m.Size()
}
func (m *ParamsOnlineByClient) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsOnlineByClient.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsOnlineByClient proto.InternalMessageInfo

func (m *ParamsOnlineByClient) GetClientId() int32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

type ResponseOnlineByClient struct {
	Order                []int32  `protobuf:"varint,1,rep,packed,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseOnlineByClient) Reset()         { *m = ResponseOnlineByClient{} }
func (m *ResponseOnlineByClient) String() string { return proto.CompactTextString(m) }
func (*ResponseOnlineByClient) ProtoMessage()    {}
func (*ResponseOnlineByClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db5eaa0f165ca68, []int{3}
}
func (m *ResponseOnlineByClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseOnlineByClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseOnlineByClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseOnlineByClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseOnlineByClient.Merge(m, src)
}
func (m *ResponseOnlineByClient) XXX_Size() int {
	return m.Size()
}
func (m *ResponseOnlineByClient) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseOnlineByClient.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseOnlineByClient proto.InternalMessageInfo

func (m *ResponseOnlineByClient) GetOrder() []int32 {
	if m != nil {
		return m.Order
	}
	return nil
}

type OfflineOrder struct {
	StoreName            string   `protobuf:"bytes,1,opt,name=store_name,json=storeName,proto3" json:"store_name,omitempty"`
	StoreId              int32    `protobuf:"varint,2,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	CashboxId            int32    `protobuf:"varint,3,opt,name=cashbox_id,json=cashboxId,proto3" json:"cashbox_id,omitempty"`
	OrderId              string   `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	RowReceipt           int32    `protobuf:"varint,5,opt,name=row_receipt,json=rowReceipt,proto3" json:"row_receipt,omitempty"`
	Date                 string   `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	Time                 string   `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
	Article              string   `protobuf:"bytes,8,opt,name=article,proto3" json:"article,omitempty"`
	Title                string   `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	Color                string   `protobuf:"bytes,10,opt,name=color,proto3" json:"color,omitempty"`
	Size_                string   `protobuf:"bytes,11,opt,name=size,proto3" json:"size,omitempty"`
	Barcode              string   `protobuf:"bytes,12,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Qty                  int32    `protobuf:"varint,13,opt,name=qty,proto3" json:"qty,omitempty"`
	TotalGross           int32    `protobuf:"varint,14,opt,name=total_gross,json=totalGross,proto3" json:"total_gross,omitempty"`
	Discount             int32    `protobuf:"varint,15,opt,name=discount,proto3" json:"discount,omitempty"`
	Total                int32    `protobuf:"varint,16,opt,name=total,proto3" json:"total,omitempty"`
	ClientId             int32    `protobuf:"varint,17,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Seller               string   `protobuf:"bytes,18,opt,name=seller,proto3" json:"seller,omitempty"`
	Family               string   `protobuf:"bytes,19,opt,name=family,proto3" json:"family,omitempty"`
	Operation            int32    `protobuf:"varint,20,opt,name=operation,proto3" json:"operation,omitempty"`
	Source               string   `protobuf:"bytes,21,opt,name=source,proto3" json:"source,omitempty"`
	BonusesWasted        int32    `protobuf:"varint,22,opt,name=bonuses_wasted,json=bonusesWasted,proto3" json:"bonuses_wasted,omitempty"`
	BonusesAccrued       int32    `protobuf:"varint,23,opt,name=bonuses_accrued,json=bonusesAccrued,proto3" json:"bonuses_accrued,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OfflineOrder) Reset()         { *m = OfflineOrder{} }
func (m *OfflineOrder) String() string { return proto.CompactTextString(m) }
func (*OfflineOrder) ProtoMessage()    {}
func (*OfflineOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db5eaa0f165ca68, []int{4}
}
func (m *OfflineOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfflineOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfflineOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OfflineOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfflineOrder.Merge(m, src)
}
func (m *OfflineOrder) XXX_Size() int {
	return m.Size()
}
func (m *OfflineOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_OfflineOrder.DiscardUnknown(m)
}

var xxx_messageInfo_OfflineOrder proto.InternalMessageInfo

func (m *OfflineOrder) GetStoreName() string {
	if m != nil {
		return m.StoreName
	}
	return ""
}

func (m *OfflineOrder) GetStoreId() int32 {
	if m != nil {
		return m.StoreId
	}
	return 0
}

func (m *OfflineOrder) GetCashboxId() int32 {
	if m != nil {
		return m.CashboxId
	}
	return 0
}

func (m *OfflineOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OfflineOrder) GetRowReceipt() int32 {
	if m != nil {
		return m.RowReceipt
	}
	return 0
}

func (m *OfflineOrder) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *OfflineOrder) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *OfflineOrder) GetArticle() string {
	if m != nil {
		return m.Article
	}
	return ""
}

func (m *OfflineOrder) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *OfflineOrder) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *OfflineOrder) GetSize_() string {
	if m != nil {
		return m.Size_
	}
	return ""
}

func (m *OfflineOrder) GetBarcode() string {
	if m != nil {
		return m.Barcode
	}
	return ""
}

func (m *OfflineOrder) GetQty() int32 {
	if m != nil {
		return m.Qty
	}
	return 0
}

func (m *OfflineOrder) GetTotalGross() int32 {
	if m != nil {
		return m.TotalGross
	}
	return 0
}

func (m *OfflineOrder) GetDiscount() int32 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *OfflineOrder) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *OfflineOrder) GetClientId() int32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OfflineOrder) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *OfflineOrder) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *OfflineOrder) GetOperation() int32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

func (m *OfflineOrder) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *OfflineOrder) GetBonusesWasted() int32 {
	if m != nil {
		return m.BonusesWasted
	}
	return 0
}

func (m *OfflineOrder) GetBonusesAccrued() int32 {
	if m != nil {
		return m.BonusesAccrued
	}
	return 0
}

func init() {
	proto.RegisterType((*ParamsOfflineByClient)(nil), "orders.ParamsOfflineByClient")
	proto.RegisterType((*ResponseOfflineByClient)(nil), "orders.ResponseOfflineByClient")
	proto.RegisterType((*ParamsOnlineByClient)(nil), "orders.ParamsOnlineByClient")
	proto.RegisterType((*ResponseOnlineByClient)(nil), "orders.ResponseOnlineByClient")
	proto.RegisterType((*OfflineOrder)(nil), "orders.OfflineOrder")
}

func init() { proto.RegisterFile("proto/orders.proto", fileDescriptor_2db5eaa0f165ca68) }

var fileDescriptor_2db5eaa0f165ca68 = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6e, 0x13, 0x3d,
	0x10, 0xed, 0x7e, 0x6d, 0x36, 0xd9, 0xe9, 0xef, 0x67, 0xd2, 0xd4, 0xf4, 0x27, 0xad, 0x56, 0x42,
	0xf4, 0x02, 0x15, 0x29, 0x3c, 0x01, 0xe5, 0x02, 0x05, 0x21, 0x8a, 0x56, 0x48, 0x95, 0x90, 0x50,
	0xe4, 0xec, 0x4e, 0x8a, 0xa5, 0xdd, 0x75, 0xb0, 0x1d, 0x95, 0xf2, 0x24, 0x3c, 0x12, 0x97, 0x3c,
	0x02, 0x2a, 0x0f, 0xc1, 0x2d, 0xf2, 0xd8, 0x1b, 0x9a, 0x00, 0x12, 0x77, 0x73, 0xce, 0x78, 0xce,
	0x8c, 0x3d, 0x33, 0x06, 0x36, 0xd5, 0xca, 0xaa, 0xc7, 0x4a, 0x17, 0xa8, 0xcd, 0x19, 0x01, 0x16,
	0x7b, 0x94, 0x0a, 0xd8, 0x7d, 0x2d, 0xb4, 0xa8, 0xcc, 0xc5, 0x64, 0x52, 0xca, 0x1a, 0xcf, 0x6f,
	0x9e, 0x95, 0x12, 0x6b, 0xcb, 0xf6, 0xa1, 0x93, 0x93, 0x35, 0x2c, 0x78, 0x74, 0x12, 0x9d, 0xb6,
	0xb2, 0x39, 0x66, 0x5d, 0x68, 0x95, 0xb2, 0x92, 0x96, 0xff, 0x47, 0x0e, 0x0f, 0x58, 0x0f, 0x62,
	0x35, 0x99, 0x18, 0xb4, 0x7c, 0x95, 0xe8, 0x80, 0xd2, 0x77, 0xb0, 0x97, 0xa1, 0x99, 0xaa, 0xda,
	0xe0, 0x72, 0x92, 0x47, 0x10, 0xea, 0xe0, 0xd1, 0xc9, 0xea, 0xe9, 0xfa, 0xa0, 0x7b, 0x16, 0x8a,
	0x0c, 0x07, 0x2f, 0x1c, 0xca, 0xc2, 0x19, 0x97, 0xd6, 0x2a, 0x2b, 0xca, 0x26, 0x2d, 0x81, 0x74,
	0x00, 0xdd, 0x70, 0x83, 0xfa, 0x5f, 0x2f, 0x90, 0x9e, 0x41, 0x6f, 0x5e, 0xd2, 0x62, 0x54, 0x17,
	0x5a, 0x94, 0x8d, 0x0a, 0x6a, 0x65, 0x1e, 0xa4, 0x3f, 0xd6, 0x60, 0xe3, 0x6e, 0x49, 0xec, 0x08,
	0xc0, 0x58, 0xa5, 0x71, 0x54, 0x8b, 0x0a, 0x49, 0x3e, 0xc9, 0x12, 0x62, 0x5e, 0x89, 0x0a, 0xd9,
	0x7d, 0xe8, 0x78, 0xb7, 0x2c, 0x42, 0xb1, 0x6d, 0xc2, 0xc3, 0xc2, 0x45, 0xe6, 0xc2, 0xbc, 0x1f,
	0xab, 0x8f, 0xce, 0xe9, 0x5f, 0x2a, 0x09, 0xcc, 0xb0, 0x70, 0x91, 0x94, 0xd2, 0x39, 0xd7, 0x48,
	0xb6, 0x4d, 0x78, 0x58, 0xb0, 0x63, 0x58, 0xd7, 0xea, 0x7a, 0xa4, 0x31, 0x47, 0x39, 0xb5, 0xbc,
	0x45, 0xa1, 0xa0, 0xd5, 0x75, 0xe6, 0x19, 0xc6, 0x60, 0xad, 0x10, 0x16, 0x79, 0x4c, 0x71, 0x64,
	0x3b, 0xce, 0xca, 0x0a, 0x79, 0xdb, 0x73, 0xce, 0x66, 0x1c, 0xda, 0x42, 0x5b, 0x99, 0x97, 0xc8,
	0x3b, 0x3e, 0x45, 0x80, 0xf4, 0xc2, 0xd2, 0x96, 0xc8, 0x13, 0xe2, 0x3d, 0x70, 0x6c, 0xae, 0x4a,
	0xa5, 0x39, 0x78, 0x96, 0x80, 0x53, 0x36, 0xf2, 0x13, 0xf2, 0x75, 0xaf, 0xec, 0x6c, 0xa7, 0x3c,
	0x16, 0x3a, 0x57, 0x05, 0xf2, 0x0d, 0xaf, 0x1c, 0x20, 0xdb, 0x81, 0xd5, 0x0f, 0xf6, 0x86, 0x6f,
	0x52, 0xd1, 0xce, 0x74, 0xd7, 0xa1, 0x06, 0x8e, 0xae, 0xb4, 0x32, 0x86, 0x6f, 0xf9, 0xeb, 0x10,
	0xf5, 0xdc, 0x31, 0xae, 0x81, 0x85, 0x34, 0xb9, 0x9a, 0xd5, 0x96, 0x6f, 0xfb, 0x06, 0x36, 0xf8,
	0xd7, 0x28, 0xec, 0xdc, 0x19, 0x05, 0x76, 0x00, 0x89, 0x6f, 0xb1, 0x7b, 0xbd, 0xff, 0x97, 0x86,
	0xb6, 0x07, 0xb1, 0xc1, 0xb2, 0x44, 0xcd, 0x19, 0x95, 0x16, 0x90, 0xe3, 0x27, 0xa2, 0x92, 0xe5,
	0x0d, 0xbf, 0xe7, 0x79, 0x8f, 0xd8, 0x21, 0x24, 0x6a, 0x8a, 0x5a, 0x58, 0xa9, 0x6a, 0xde, 0xf5,
	0x7d, 0x9a, 0x13, 0xa4, 0xa6, 0x66, 0x3a, 0x47, 0xbe, 0x1b, 0xd4, 0x08, 0xb1, 0x07, 0xb0, 0x35,
	0x56, 0xf5, 0xcc, 0xa0, 0x19, 0x5d, 0x0b, 0x63, 0xb1, 0xe0, 0x3d, 0x0a, 0xdd, 0x0c, 0xec, 0x25,
	0x91, 0xec, 0x21, 0x6c, 0x37, 0xc7, 0x44, 0x9e, 0xeb, 0x19, 0x16, 0x7c, 0x8f, 0xce, 0x35, 0xd1,
	0x4f, 0x3d, 0x3b, 0xb8, 0x84, 0x76, 0x18, 0x3c, 0xf6, 0x12, 0x3a, 0xf3, 0x31, 0x3d, 0x6a, 0x16,
	0xe5, 0x8f, 0xcb, 0xbb, 0x7f, 0xdc, 0xb8, 0xff, 0xb2, 0x78, 0xe9, 0xca, 0xe0, 0x0d, 0xc4, 0x7e,
	0xf4, 0xd9, 0x8b, 0x3b, 0xba, 0x87, 0x4b, 0xba, 0x0b, 0xcb, 0xb1, 0xdf, 0xff, 0x4d, 0xb6, 0x5e,
	0x54, 0x3d, 0x3f, 0xf8, 0x72, 0xdb, 0x8f, 0xbe, 0xde, 0xf6, 0xa3, 0x6f, 0xb7, 0xfd, 0xe8, 0xf3,
	0xf7, 0xfe, 0xca, 0xdb, 0xe4, 0xaa, 0xf9, 0x79, 0xc6, 0x31, 0x7d, 0x3d, 0x4f, 0x7e, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x4d, 0xa8, 0x0f, 0x7c, 0x90, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OfflineClient is the client API for Offline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OfflineClient interface {
	ByClient(ctx context.Context, in *ParamsOfflineByClient, opts ...grpc.CallOption) (*ResponseOfflineByClient, error)
}

type offlineClient struct {
	cc *grpc.ClientConn
}

func NewOfflineClient(cc *grpc.ClientConn) OfflineClient {
	return &offlineClient{cc}
}

func (c *offlineClient) ByClient(ctx context.Context, in *ParamsOfflineByClient, opts ...grpc.CallOption) (*ResponseOfflineByClient, error) {
	out := new(ResponseOfflineByClient)
	err := c.cc.Invoke(ctx, "/orders.Offline/ByClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfflineServer is the server API for Offline service.
type OfflineServer interface {
	ByClient(context.Context, *ParamsOfflineByClient) (*ResponseOfflineByClient, error)
}

// UnimplementedOfflineServer can be embedded to have forward compatible implementations.
type UnimplementedOfflineServer struct {
}

func (*UnimplementedOfflineServer) ByClient(ctx context.Context, req *ParamsOfflineByClient) (*ResponseOfflineByClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByClient not implemented")
}

func RegisterOfflineServer(s *grpc.Server, srv OfflineServer) {
	s.RegisterService(&_Offline_serviceDesc, srv)
}

func _Offline_ByClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsOfflineByClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineServer).ByClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.Offline/ByClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineServer).ByClient(ctx, req.(*ParamsOfflineByClient))
	}
	return interceptor(ctx, in, info, handler)
}

var _Offline_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orders.Offline",
	HandlerType: (*OfflineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ByClient",
			Handler:    _Offline_ByClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/orders.proto",
}

// OnlineClient is the client API for Online service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnlineClient interface {
	ByClient(ctx context.Context, in *ParamsOnlineByClient, opts ...grpc.CallOption) (*ResponseOnlineByClient, error)
}

type onlineClient struct {
	cc *grpc.ClientConn
}

func NewOnlineClient(cc *grpc.ClientConn) OnlineClient {
	return &onlineClient{cc}
}

func (c *onlineClient) ByClient(ctx context.Context, in *ParamsOnlineByClient, opts ...grpc.CallOption) (*ResponseOnlineByClient, error) {
	out := new(ResponseOnlineByClient)
	err := c.cc.Invoke(ctx, "/orders.Online/ByClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnlineServer is the server API for Online service.
type OnlineServer interface {
	ByClient(context.Context, *ParamsOnlineByClient) (*ResponseOnlineByClient, error)
}

// UnimplementedOnlineServer can be embedded to have forward compatible implementations.
type UnimplementedOnlineServer struct {
}

func (*UnimplementedOnlineServer) ByClient(ctx context.Context, req *ParamsOnlineByClient) (*ResponseOnlineByClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByClient not implemented")
}

func RegisterOnlineServer(s *grpc.Server, srv OnlineServer) {
	s.RegisterService(&_Online_serviceDesc, srv)
}

func _Online_ByClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsOnlineByClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServer).ByClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.Online/ByClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServer).ByClient(ctx, req.(*ParamsOnlineByClient))
	}
	return interceptor(ctx, in, info, handler)
}

var _Online_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orders.Online",
	HandlerType: (*OnlineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ByClient",
			Handler:    _Online_ByClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/orders.proto",
}

func (m *ParamsOfflineByClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsOfflineByClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsOfflineByClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.ClientId != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.ClientId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseOfflineByClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseOfflineByClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseOfflineByClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrders(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ParamsOnlineByClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsOnlineByClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsOnlineByClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ClientId != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.ClientId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseOnlineByClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseOnlineByClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseOnlineByClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Order) > 0 {
		dAtA2 := make([]byte, len(m.Order)*10)
		var j1 int
		for _, num1 := range m.Order {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintOrders(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OfflineOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfflineOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OfflineOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BonusesAccrued != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.BonusesAccrued))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.BonusesWasted != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.BonusesWasted))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.Operation != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.Operation))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Family) > 0 {
		i -= len(m.Family)
		copy(dAtA[i:], m.Family)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.Family)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.ClientId != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.ClientId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Total != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Discount != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.Discount))
		i--
		dAtA[i] = 0x78
	}
	if m.TotalGross != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.TotalGross))
		i--
		dAtA[i] = 0x70
	}
	if m.Qty != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.Qty))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Barcode) > 0 {
		i -= len(m.Barcode)
		copy(dAtA[i:], m.Barcode)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.Barcode)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Size_) > 0 {
		i -= len(m.Size_)
		copy(dAtA[i:], m.Size_)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.Size_)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Article) > 0 {
		i -= len(m.Article)
		copy(dAtA[i:], m.Article)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.Article)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Time) > 0 {
		i -= len(m.Time)
		copy(dAtA[i:], m.Time)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.Time)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Date) > 0 {
		i -= len(m.Date)
		copy(dAtA[i:], m.Date)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.Date)))
		i--
		dAtA[i] = 0x32
	}
	if m.RowReceipt != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.RowReceipt))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x22
	}
	if m.CashboxId != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.CashboxId))
		i--
		dAtA[i] = 0x18
	}
	if m.StoreId != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.StoreId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StoreName) > 0 {
		i -= len(m.StoreName)
		copy(dAtA[i:], m.StoreName)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.StoreName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrders(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrders(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ParamsOfflineByClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientId != 0 {
		n += 1 + sovOrders(uint64(m.ClientId))
	}
	if m.Limit != 0 {
		n += 1 + sovOrders(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovOrders(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseOfflineByClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovOrders(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovOrders(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParamsOnlineByClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientId != 0 {
		n += 1 + sovOrders(uint64(m.ClientId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseOnlineByClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Order) > 0 {
		l = 0
		for _, e := range m.Order {
			l += sovOrders(uint64(e))
		}
		n += 1 + sovOrders(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OfflineOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreName)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	if m.StoreId != 0 {
		n += 1 + sovOrders(uint64(m.StoreId))
	}
	if m.CashboxId != 0 {
		n += 1 + sovOrders(uint64(m.CashboxId))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	if m.RowReceipt != 0 {
		n += 1 + sovOrders(uint64(m.RowReceipt))
	}
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	l = len(m.Article)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	l = len(m.Size_)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	l = len(m.Barcode)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	if m.Qty != 0 {
		n += 1 + sovOrders(uint64(m.Qty))
	}
	if m.TotalGross != 0 {
		n += 1 + sovOrders(uint64(m.TotalGross))
	}
	if m.Discount != 0 {
		n += 1 + sovOrders(uint64(m.Discount))
	}
	if m.Total != 0 {
		n += 2 + sovOrders(uint64(m.Total))
	}
	if m.ClientId != 0 {
		n += 2 + sovOrders(uint64(m.ClientId))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 2 + l + sovOrders(uint64(l))
	}
	l = len(m.Family)
	if l > 0 {
		n += 2 + l + sovOrders(uint64(l))
	}
	if m.Operation != 0 {
		n += 2 + sovOrders(uint64(m.Operation))
	}
	l = len(m.Source)
	if l > 0 {
		n += 2 + l + sovOrders(uint64(l))
	}
	if m.BonusesWasted != 0 {
		n += 2 + sovOrders(uint64(m.BonusesWasted))
	}
	if m.BonusesAccrued != 0 {
		n += 2 + sovOrders(uint64(m.BonusesAccrued))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOrders(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrders(x uint64) (n int) {
	return sovOrders(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ParamsOfflineByClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsOfflineByClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsOfflineByClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrders
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseOfflineByClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseOfflineByClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseOfflineByClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &OfflineOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrders
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsOnlineByClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsOnlineByClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsOnlineByClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrders
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseOnlineByClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseOnlineByClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseOnlineByClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOrders
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Order = append(m.Order, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOrders
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOrders
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthOrders
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Order) == 0 {
					m.Order = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOrders
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Order = append(m.Order, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrders
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfflineOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfflineOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfflineOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			m.StoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CashboxId", wireType)
			}
			m.CashboxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CashboxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowReceipt", wireType)
			}
			m.RowReceipt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowReceipt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Article", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Article = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Size_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Barcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qty", wireType)
			}
			m.Qty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qty |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalGross", wireType)
			}
			m.TotalGross = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalGross |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			m.Discount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Discount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BonusesWasted", wireType)
			}
			m.BonusesWasted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BonusesWasted |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BonusesAccrued", wireType)
			}
			m.BonusesAccrued = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BonusesAccrued |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrders
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrders(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrders
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrders
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrders
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrders
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrders        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrders          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrders = fmt.Errorf("proto: unexpected end of group")
)
