// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/nomenclature.proto

package nomenclature

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NomenclatureServiceClient is the client API for NomenclatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NomenclatureServiceClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetNomenclatureListResponse, error)
	GetByArticle(ctx context.Context, in *GetNomenclatureByArticleRequest, opts ...grpc.CallOption) (*GetNomenclatureByArticleResponse, error)
}

type nomenclatureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNomenclatureServiceClient(cc grpc.ClientConnInterface) NomenclatureServiceClient {
	return &nomenclatureServiceClient{cc}
}

func (c *nomenclatureServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetNomenclatureListResponse, error) {
	out := new(GetNomenclatureListResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.NomenclatureService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nomenclatureServiceClient) GetByArticle(ctx context.Context, in *GetNomenclatureByArticleRequest, opts ...grpc.CallOption) (*GetNomenclatureByArticleResponse, error) {
	out := new(GetNomenclatureByArticleResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.NomenclatureService/GetByArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NomenclatureServiceServer is the server API for NomenclatureService service.
// All implementations should embed UnimplementedNomenclatureServiceServer
// for forward compatibility
type NomenclatureServiceServer interface {
	GetList(context.Context, *GetListRequest) (*GetNomenclatureListResponse, error)
	GetByArticle(context.Context, *GetNomenclatureByArticleRequest) (*GetNomenclatureByArticleResponse, error)
}

// UnimplementedNomenclatureServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNomenclatureServiceServer struct {
}

func (UnimplementedNomenclatureServiceServer) GetList(context.Context, *GetListRequest) (*GetNomenclatureListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedNomenclatureServiceServer) GetByArticle(context.Context, *GetNomenclatureByArticleRequest) (*GetNomenclatureByArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByArticle not implemented")
}

// UnsafeNomenclatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NomenclatureServiceServer will
// result in compilation errors.
type UnsafeNomenclatureServiceServer interface {
	mustEmbedUnimplementedNomenclatureServiceServer()
}

func RegisterNomenclatureServiceServer(s grpc.ServiceRegistrar, srv NomenclatureServiceServer) {
	s.RegisterService(&NomenclatureService_ServiceDesc, srv)
}

func _NomenclatureService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomenclatureServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.NomenclatureService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomenclatureServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NomenclatureService_GetByArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNomenclatureByArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomenclatureServiceServer).GetByArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.NomenclatureService/GetByArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomenclatureServiceServer).GetByArticle(ctx, req.(*GetNomenclatureByArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NomenclatureService_ServiceDesc is the grpc.ServiceDesc for NomenclatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NomenclatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomenclature.NomenclatureService",
	HandlerType: (*NomenclatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _NomenclatureService_GetList_Handler,
		},
		{
			MethodName: "GetByArticle",
			Handler:    _NomenclatureService_GetByArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nomenclature.proto",
}

// PhotoModelServiceClient is the client API for PhotoModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhotoModelServiceClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetPhotoModelListResponse, error)
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error)
	Create(ctx context.Context, in *PhotoModelWithoutID, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error)
	Update(ctx context.Context, in *UpdatePhotoModel, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error)
	SetNull(ctx context.Context, in *SetNullPhotoModel, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error)
}

type photoModelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPhotoModelServiceClient(cc grpc.ClientConnInterface) PhotoModelServiceClient {
	return &photoModelServiceClient{cc}
}

func (c *photoModelServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetPhotoModelListResponse, error) {
	out := new(GetPhotoModelListResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.PhotoModelService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoModelServiceClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error) {
	out := new(GetPhotoModelByIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.PhotoModelService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoModelServiceClient) Create(ctx context.Context, in *PhotoModelWithoutID, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error) {
	out := new(GetPhotoModelByIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.PhotoModelService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoModelServiceClient) Update(ctx context.Context, in *UpdatePhotoModel, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error) {
	out := new(GetPhotoModelByIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.PhotoModelService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoModelServiceClient) SetNull(ctx context.Context, in *SetNullPhotoModel, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error) {
	out := new(GetPhotoModelByIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.PhotoModelService/SetNull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhotoModelServiceServer is the server API for PhotoModelService service.
// All implementations should embed UnimplementedPhotoModelServiceServer
// for forward compatibility
type PhotoModelServiceServer interface {
	GetList(context.Context, *GetListRequest) (*GetPhotoModelListResponse, error)
	GetByID(context.Context, *GetByIDRequest) (*GetPhotoModelByIDResponse, error)
	Create(context.Context, *PhotoModelWithoutID) (*GetPhotoModelByIDResponse, error)
	Update(context.Context, *UpdatePhotoModel) (*GetPhotoModelByIDResponse, error)
	SetNull(context.Context, *SetNullPhotoModel) (*GetPhotoModelByIDResponse, error)
}

// UnimplementedPhotoModelServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPhotoModelServiceServer struct {
}

func (UnimplementedPhotoModelServiceServer) GetList(context.Context, *GetListRequest) (*GetPhotoModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedPhotoModelServiceServer) GetByID(context.Context, *GetByIDRequest) (*GetPhotoModelByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedPhotoModelServiceServer) Create(context.Context, *PhotoModelWithoutID) (*GetPhotoModelByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPhotoModelServiceServer) Update(context.Context, *UpdatePhotoModel) (*GetPhotoModelByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPhotoModelServiceServer) SetNull(context.Context, *SetNullPhotoModel) (*GetPhotoModelByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNull not implemented")
}

// UnsafePhotoModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhotoModelServiceServer will
// result in compilation errors.
type UnsafePhotoModelServiceServer interface {
	mustEmbedUnimplementedPhotoModelServiceServer()
}

func RegisterPhotoModelServiceServer(s grpc.ServiceRegistrar, srv PhotoModelServiceServer) {
	s.RegisterService(&PhotoModelService_ServiceDesc, srv)
}

func _PhotoModelService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoModelServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.PhotoModelService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoModelServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoModelService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoModelServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.PhotoModelService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoModelServiceServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoModelService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoModelWithoutID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoModelServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.PhotoModelService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoModelServiceServer).Create(ctx, req.(*PhotoModelWithoutID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoModelService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhotoModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoModelServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.PhotoModelService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoModelServiceServer).Update(ctx, req.(*UpdatePhotoModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoModelService_SetNull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNullPhotoModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoModelServiceServer).SetNull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.PhotoModelService/SetNull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoModelServiceServer).SetNull(ctx, req.(*SetNullPhotoModel))
	}
	return interceptor(ctx, in, info, handler)
}

// PhotoModelService_ServiceDesc is the grpc.ServiceDesc for PhotoModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhotoModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomenclature.PhotoModelService",
	HandlerType: (*PhotoModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _PhotoModelService_GetList_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _PhotoModelService_GetByID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PhotoModelService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PhotoModelService_Update_Handler,
		},
		{
			MethodName: "SetNull",
			Handler:    _PhotoModelService_SetNull_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nomenclature.proto",
}

// DictionarySizeServiceClient is the client API for DictionarySizeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictionarySizeServiceClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetDictionarySizeListResponse, error)
	GetByGUID(ctx context.Context, in *GetByGUIDRequest, opts ...grpc.CallOption) (*GetDictionarySizeByGUIDResponse, error)
	Update(ctx context.Context, in *UpdateDictionarySize, opts ...grpc.CallOption) (*GetDictionarySizeByGUIDResponse, error)
	SetNull(ctx context.Context, in *SetNullDictionarySize, opts ...grpc.CallOption) (*GetDictionarySizeByGUIDResponse, error)
}

type dictionarySizeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDictionarySizeServiceClient(cc grpc.ClientConnInterface) DictionarySizeServiceClient {
	return &dictionarySizeServiceClient{cc}
}

func (c *dictionarySizeServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetDictionarySizeListResponse, error) {
	out := new(GetDictionarySizeListResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.DictionarySizeService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionarySizeServiceClient) GetByGUID(ctx context.Context, in *GetByGUIDRequest, opts ...grpc.CallOption) (*GetDictionarySizeByGUIDResponse, error) {
	out := new(GetDictionarySizeByGUIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.DictionarySizeService/GetByGUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionarySizeServiceClient) Update(ctx context.Context, in *UpdateDictionarySize, opts ...grpc.CallOption) (*GetDictionarySizeByGUIDResponse, error) {
	out := new(GetDictionarySizeByGUIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.DictionarySizeService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionarySizeServiceClient) SetNull(ctx context.Context, in *SetNullDictionarySize, opts ...grpc.CallOption) (*GetDictionarySizeByGUIDResponse, error) {
	out := new(GetDictionarySizeByGUIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.DictionarySizeService/SetNull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictionarySizeServiceServer is the server API for DictionarySizeService service.
// All implementations should embed UnimplementedDictionarySizeServiceServer
// for forward compatibility
type DictionarySizeServiceServer interface {
	GetList(context.Context, *GetListRequest) (*GetDictionarySizeListResponse, error)
	GetByGUID(context.Context, *GetByGUIDRequest) (*GetDictionarySizeByGUIDResponse, error)
	Update(context.Context, *UpdateDictionarySize) (*GetDictionarySizeByGUIDResponse, error)
	SetNull(context.Context, *SetNullDictionarySize) (*GetDictionarySizeByGUIDResponse, error)
}

// UnimplementedDictionarySizeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDictionarySizeServiceServer struct {
}

func (UnimplementedDictionarySizeServiceServer) GetList(context.Context, *GetListRequest) (*GetDictionarySizeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedDictionarySizeServiceServer) GetByGUID(context.Context, *GetByGUIDRequest) (*GetDictionarySizeByGUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByGUID not implemented")
}
func (UnimplementedDictionarySizeServiceServer) Update(context.Context, *UpdateDictionarySize) (*GetDictionarySizeByGUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDictionarySizeServiceServer) SetNull(context.Context, *SetNullDictionarySize) (*GetDictionarySizeByGUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNull not implemented")
}

// UnsafeDictionarySizeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictionarySizeServiceServer will
// result in compilation errors.
type UnsafeDictionarySizeServiceServer interface {
	mustEmbedUnimplementedDictionarySizeServiceServer()
}

func RegisterDictionarySizeServiceServer(s grpc.ServiceRegistrar, srv DictionarySizeServiceServer) {
	s.RegisterService(&DictionarySizeService_ServiceDesc, srv)
}

func _DictionarySizeService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionarySizeServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.DictionarySizeService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionarySizeServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionarySizeService_GetByGUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByGUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionarySizeServiceServer).GetByGUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.DictionarySizeService/GetByGUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionarySizeServiceServer).GetByGUID(ctx, req.(*GetByGUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionarySizeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictionarySize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionarySizeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.DictionarySizeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionarySizeServiceServer).Update(ctx, req.(*UpdateDictionarySize))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionarySizeService_SetNull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNullDictionarySize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionarySizeServiceServer).SetNull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.DictionarySizeService/SetNull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionarySizeServiceServer).SetNull(ctx, req.(*SetNullDictionarySize))
	}
	return interceptor(ctx, in, info, handler)
}

// DictionarySizeService_ServiceDesc is the grpc.ServiceDesc for DictionarySizeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictionarySizeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomenclature.DictionarySizeService",
	HandlerType: (*DictionarySizeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _DictionarySizeService_GetList_Handler,
		},
		{
			MethodName: "GetByGUID",
			Handler:    _DictionarySizeService_GetByGUID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DictionarySizeService_Update_Handler,
		},
		{
			MethodName: "SetNull",
			Handler:    _DictionarySizeService_SetNull_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nomenclature.proto",
}

// MaintenanceServiceClient is the client API for MaintenanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaintenanceServiceClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetMaintenanceListResponse, error)
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetMaintenanceByIDResponse, error)
	Create(ctx context.Context, in *MaintenanceithoutID, opts ...grpc.CallOption) (*GetMaintenanceByIDResponse, error)
	Update(ctx context.Context, in *UpdateMaintenance, opts ...grpc.CallOption) (*GetMaintenanceByIDResponse, error)
	SetNull(ctx context.Context, in *SetNullMaintenance, opts ...grpc.CallOption) (*GetMaintenanceByIDResponse, error)
	GetListProductsToMaintenance(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListProductsToMaintenanceResponse, error)
}

type maintenanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaintenanceServiceClient(cc grpc.ClientConnInterface) MaintenanceServiceClient {
	return &maintenanceServiceClient{cc}
}

func (c *maintenanceServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetMaintenanceListResponse, error) {
	out := new(GetMaintenanceListResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.MaintenanceService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetMaintenanceByIDResponse, error) {
	out := new(GetMaintenanceByIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.MaintenanceService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) Create(ctx context.Context, in *MaintenanceithoutID, opts ...grpc.CallOption) (*GetMaintenanceByIDResponse, error) {
	out := new(GetMaintenanceByIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.MaintenanceService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) Update(ctx context.Context, in *UpdateMaintenance, opts ...grpc.CallOption) (*GetMaintenanceByIDResponse, error) {
	out := new(GetMaintenanceByIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.MaintenanceService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) SetNull(ctx context.Context, in *SetNullMaintenance, opts ...grpc.CallOption) (*GetMaintenanceByIDResponse, error) {
	out := new(GetMaintenanceByIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.MaintenanceService/SetNull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) GetListProductsToMaintenance(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListProductsToMaintenanceResponse, error) {
	out := new(GetListProductsToMaintenanceResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.MaintenanceService/GetListProductsToMaintenance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaintenanceServiceServer is the server API for MaintenanceService service.
// All implementations should embed UnimplementedMaintenanceServiceServer
// for forward compatibility
type MaintenanceServiceServer interface {
	GetList(context.Context, *GetListRequest) (*GetMaintenanceListResponse, error)
	GetByID(context.Context, *GetByIDRequest) (*GetMaintenanceByIDResponse, error)
	Create(context.Context, *MaintenanceithoutID) (*GetMaintenanceByIDResponse, error)
	Update(context.Context, *UpdateMaintenance) (*GetMaintenanceByIDResponse, error)
	SetNull(context.Context, *SetNullMaintenance) (*GetMaintenanceByIDResponse, error)
	GetListProductsToMaintenance(context.Context, *GetListRequest) (*GetListProductsToMaintenanceResponse, error)
}

// UnimplementedMaintenanceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMaintenanceServiceServer struct {
}

func (UnimplementedMaintenanceServiceServer) GetList(context.Context, *GetListRequest) (*GetMaintenanceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedMaintenanceServiceServer) GetByID(context.Context, *GetByIDRequest) (*GetMaintenanceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedMaintenanceServiceServer) Create(context.Context, *MaintenanceithoutID) (*GetMaintenanceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMaintenanceServiceServer) Update(context.Context, *UpdateMaintenance) (*GetMaintenanceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMaintenanceServiceServer) SetNull(context.Context, *SetNullMaintenance) (*GetMaintenanceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNull not implemented")
}
func (UnimplementedMaintenanceServiceServer) GetListProductsToMaintenance(context.Context, *GetListRequest) (*GetListProductsToMaintenanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListProductsToMaintenance not implemented")
}

// UnsafeMaintenanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaintenanceServiceServer will
// result in compilation errors.
type UnsafeMaintenanceServiceServer interface {
	mustEmbedUnimplementedMaintenanceServiceServer()
}

func RegisterMaintenanceServiceServer(s grpc.ServiceRegistrar, srv MaintenanceServiceServer) {
	s.RegisterService(&MaintenanceService_ServiceDesc, srv)
}

func _MaintenanceService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.MaintenanceService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.MaintenanceService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaintenanceithoutID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.MaintenanceService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).Create(ctx, req.(*MaintenanceithoutID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMaintenance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.MaintenanceService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).Update(ctx, req.(*UpdateMaintenance))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_SetNull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNullMaintenance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).SetNull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.MaintenanceService/SetNull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).SetNull(ctx, req.(*SetNullMaintenance))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_GetListProductsToMaintenance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).GetListProductsToMaintenance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.MaintenanceService/GetListProductsToMaintenance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).GetListProductsToMaintenance(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaintenanceService_ServiceDesc is the grpc.ServiceDesc for MaintenanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaintenanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomenclature.MaintenanceService",
	HandlerType: (*MaintenanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _MaintenanceService_GetList_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _MaintenanceService_GetByID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MaintenanceService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MaintenanceService_Update_Handler,
		},
		{
			MethodName: "SetNull",
			Handler:    _MaintenanceService_SetNull_Handler,
		},
		{
			MethodName: "GetListProductsToMaintenance",
			Handler:    _MaintenanceService_GetListProductsToMaintenance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nomenclature.proto",
}
