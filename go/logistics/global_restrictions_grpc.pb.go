// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: global_restrictions.proto

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GlobalRestrictionsServiceClient is the client API for GlobalRestrictionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalRestrictionsServiceClient interface {
	List(ctx context.Context, in *ListGlobalRestrictionRequest, opts ...grpc.CallOption) (*ListGlobalRestrictionResponse, error)
	Create(ctx context.Context, in *CreateGlobalRestriction, opts ...grpc.CallOption) (*GlobalRestriction, error)
	Update(ctx context.Context, in *UpdateGlobalRestriction, opts ...grpc.CallOption) (*GlobalRestriction, error)
}

type globalRestrictionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalRestrictionsServiceClient(cc grpc.ClientConnInterface) GlobalRestrictionsServiceClient {
	return &globalRestrictionsServiceClient{cc}
}

func (c *globalRestrictionsServiceClient) List(ctx context.Context, in *ListGlobalRestrictionRequest, opts ...grpc.CallOption) (*ListGlobalRestrictionResponse, error) {
	out := new(ListGlobalRestrictionResponse)
	err := c.cc.Invoke(ctx, "/logistics.GlobalRestrictionsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalRestrictionsServiceClient) Create(ctx context.Context, in *CreateGlobalRestriction, opts ...grpc.CallOption) (*GlobalRestriction, error) {
	out := new(GlobalRestriction)
	err := c.cc.Invoke(ctx, "/logistics.GlobalRestrictionsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalRestrictionsServiceClient) Update(ctx context.Context, in *UpdateGlobalRestriction, opts ...grpc.CallOption) (*GlobalRestriction, error) {
	out := new(GlobalRestriction)
	err := c.cc.Invoke(ctx, "/logistics.GlobalRestrictionsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobalRestrictionsServiceServer is the server API for GlobalRestrictionsService service.
// All implementations should embed UnimplementedGlobalRestrictionsServiceServer
// for forward compatibility
type GlobalRestrictionsServiceServer interface {
	List(context.Context, *ListGlobalRestrictionRequest) (*ListGlobalRestrictionResponse, error)
	Create(context.Context, *CreateGlobalRestriction) (*GlobalRestriction, error)
	Update(context.Context, *UpdateGlobalRestriction) (*GlobalRestriction, error)
}

// UnimplementedGlobalRestrictionsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGlobalRestrictionsServiceServer struct {
}

func (UnimplementedGlobalRestrictionsServiceServer) List(context.Context, *ListGlobalRestrictionRequest) (*ListGlobalRestrictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGlobalRestrictionsServiceServer) Create(context.Context, *CreateGlobalRestriction) (*GlobalRestriction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGlobalRestrictionsServiceServer) Update(context.Context, *UpdateGlobalRestriction) (*GlobalRestriction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

// UnsafeGlobalRestrictionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalRestrictionsServiceServer will
// result in compilation errors.
type UnsafeGlobalRestrictionsServiceServer interface {
	mustEmbedUnimplementedGlobalRestrictionsServiceServer()
}

func RegisterGlobalRestrictionsServiceServer(s grpc.ServiceRegistrar, srv GlobalRestrictionsServiceServer) {
	s.RegisterService(&GlobalRestrictionsService_ServiceDesc, srv)
}

func _GlobalRestrictionsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGlobalRestrictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalRestrictionsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.GlobalRestrictionsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalRestrictionsServiceServer).List(ctx, req.(*ListGlobalRestrictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalRestrictionsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGlobalRestriction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalRestrictionsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.GlobalRestrictionsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalRestrictionsServiceServer).Create(ctx, req.(*CreateGlobalRestriction))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalRestrictionsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGlobalRestriction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalRestrictionsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.GlobalRestrictionsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalRestrictionsServiceServer).Update(ctx, req.(*UpdateGlobalRestriction))
	}
	return interceptor(ctx, in, info, handler)
}

// GlobalRestrictionsService_ServiceDesc is the grpc.ServiceDesc for GlobalRestrictionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalRestrictionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.GlobalRestrictionsService",
	HandlerType: (*GlobalRestrictionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _GlobalRestrictionsService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _GlobalRestrictionsService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GlobalRestrictionsService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "global_restrictions.proto",
}
