// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package platform

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OauthClient is the client API for Oauth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OauthClient interface {
	Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClientInfo(ctx context.Context, in *ClientInfoRequest, opts ...grpc.CallOption) (*ClientInfoResponse, error)
}

type oauthClient struct {
	cc grpc.ClientConnInterface
}

func NewOauthClient(cc grpc.ClientConnInterface) OauthClient {
	return &oauthClient{cc}
}

func (c *oauthClient) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/platform.Oauth/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthClient) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/platform.Oauth/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthClient) ClientInfo(ctx context.Context, in *ClientInfoRequest, opts ...grpc.CallOption) (*ClientInfoResponse, error) {
	out := new(ClientInfoResponse)
	err := c.cc.Invoke(ctx, "/platform.Oauth/ClientInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OauthServer is the server API for Oauth service.
// All implementations should embed UnimplementedOauthServer
// for forward compatibility
type OauthServer interface {
	Token(context.Context, *TokenRequest) (*TokenResponse, error)
	Authorize(context.Context, *AuthorizeRequest) (*emptypb.Empty, error)
	ClientInfo(context.Context, *ClientInfoRequest) (*ClientInfoResponse, error)
}

// UnimplementedOauthServer should be embedded to have forward compatible implementations.
type UnimplementedOauthServer struct {
}

func (UnimplementedOauthServer) Token(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedOauthServer) Authorize(context.Context, *AuthorizeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedOauthServer) ClientInfo(context.Context, *ClientInfoRequest) (*ClientInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientInfo not implemented")
}

// UnsafeOauthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OauthServer will
// result in compilation errors.
type UnsafeOauthServer interface {
	mustEmbedUnimplementedOauthServer()
}

func RegisterOauthServer(s grpc.ServiceRegistrar, srv OauthServer) {
	s.RegisterService(&Oauth_ServiceDesc, srv)
}

func _Oauth_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.Oauth/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthServer).Token(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oauth_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.Oauth/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthServer).Authorize(ctx, req.(*AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oauth_ClientInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthServer).ClientInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.Oauth/ClientInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthServer).ClientInfo(ctx, req.(*ClientInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Oauth_ServiceDesc is the grpc.ServiceDesc for Oauth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Oauth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "platform.Oauth",
	HandlerType: (*OauthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Token",
			Handler:    _Oauth_Token_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _Oauth_Authorize_Handler,
		},
		{
			MethodName: "ClientInfo",
			Handler:    _Oauth_ClientInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/platform/oauth.proto",
}
