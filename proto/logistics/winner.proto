syntax = "proto3";

option go_package = "go/logistics";

package logistics;

import "google/api/annotations.proto";
import "common.proto";

service WinnerService {
  rpc Calculate(CalculateRequest) returns (CalculateResponse) {
    option (google.api.http) = {
      post: "/api/v1/winner/calculate"
      body: "*"
    };
  }

  rpc Intervals(IntervalsRequest) returns (common.UnifiedResponse) {
    option (google.api.http) = {
      post: "/api/v1/winner/intervals"
      body: "*"
    };
  }

  rpc PickupList(PickUpPointsRequest) returns (common.UnifiedResponse) {
    option (google.api.http) = {
      get: "/api/v1/winner/pickup/{filter.provider}/points"
    };
  }

  rpc PickupDetail(PickUpPointsDetailRequest) returns (common.UnifiedResponse) {
    option (google.api.http) = {
      get: "/api/v1/winner/pickup/{provider}/points/{point}"
    };
  }

  rpc AddressDetails(AddressDetailsRequest) returns (AddressDetailsResponse) {
    option (google.api.http) = {
      get: "/api/v1/winner/pickup/address_details/provider/{provider}/point/{point}"
    };
  }
}

message AddressDetailsRequest {
  string provider = 1;
  string point =    2;
}

message AddressDetailsResponse {
  string pvz_id = 1;
  string full_address = 2;
  string country_iso = 3;
  string region = 4;
  string city = 5;
  string street = 6;
  string house = 7;
  string postal = 8;
  string city_fias = 9;
}

message Pagination {
  uint32 limit = 1;
  uint32 offset = 2;
}

message PickUpPointsRequest {
  Filter filter =         1;
  Pagination pagination = 2;
}

message Filter {
  string provider =  1;
  string city_id =   2;
  string city_name = 3;
  string search =    4;
  repeated Payment cod_payment = 5;
  bool has_partial_refuse = 6;
  bool has_fitting_room = 7;
  bool has_cod = 8;
}

message Payment {
  enum Type {
      CASH = 0;
      CARD = 1;
  }
}


message PickUpPointsResponse {
  repeated PickupPoint  results = 1;
}

message PickupPoint {
  string  id =      1;
  string  address = 2;
  string  title =   3;
  double  lat =     4;
  double  lng =     5;
  bool has_partial_refuse = 6;
  bool has_fitting_room = 7;
  bool has_cod = 8;
  bool has_payment_cash = 9;
  bool has_payment_card = 10;
}

message PickUpPointsDetailRequest {
  string provider =  1;
  string point =     2;
}

message PickUpPointsDetailResponse {
  string id =                1;
  string address =           2;
  string title =             3;
  string delivery_period =   4;
  string work_time =         5;
  string phone =             6;
  string trip_description =  7;
  optional string zip_code = 8;
  string city_geo_id =       9;

  bool has_partial_refuse = 10;
  bool has_fitting_room = 11;
  bool has_cod = 12;
  bool has_payment_cash = 13;
  bool has_payment_card = 14;
}

message CalculateRequest {
  string    country_iso_code = 1;
  string    region_geo_id = 2;
  string    city_geo_id = 3;
  string    settlement_geo_id = 4;
  string    street_geo_id = 5;
  string    house_geo_id = 6;
  string    geo_id = 7;
  int32     cart_id = 8;
  repeated  CartsCategory carts_category= 9;
  string    order_datetime = 10;
  bool      is_cart_for_clients = 11;
}

message CartsCategory {
  int32    category_id = 1;
  repeated CartPosition cart_position = 2;
}

message CartPosition {
  int32    barcode =    1;
  int32    quantity =   2;
  float    price =      3;
  bool     is_present = 4;
  int32    weight =     5;
}

message CalculateResponse {
  repeated WinnerRestriction  restrictions = 1;
  repeated WinnerDeliveryMode delivery_modes = 2;
}

message WinnerDeliveryMode {
  string    title = 1;
  string    code = 2;
  repeated  WinnerDeliveryType delivery_types = 3;
}

message WinnerRestriction {
  string      message = 1;
  WinnerPopup popup = 2;
}

message WinnerPopup {
  string title = 1;
  string text = 2;
  string button = 3;
}

message WinnerDeliveryType {
  string              delivery_type_name = 1;
  string              transport_company_name = 2;
  string              code_type = 3;
  string              code_tk = 4;
  string              message = 5;
  float               delivery_price = 6;
  WinnerPopup         popup = 7;
  repeated            WinnerPaymentMethod payment_methods = 8;
  repeated            WinnerDeliveryDates delivery_dates = 9;
  bool                is_restricted = 10;
  repeated            WinnerRestriction restrictions = 11;
  int32               from_days = 12;
  int32               to_days = 13;
  bool                is_delivery_use_only_working_days = 14;
  WinnerStorePickup   store_pickup = 15;
  WinnerStoreShipment store_shipment = 16;
}

message WinnerPaymentMethod {
  string  title_ru = 1;
  string  code = 2;
  bool    is_restricted = 3;
  string  message = 4;
}

message WinnerDeliveryDates {
  string    date = 1;
  string    title = 2;
  repeated  WinnerInterval intervals = 3;
}

message WinnerInterval {
  string title = 1;
  string time_from = 2;
  string time_to = 3;
  string code = 4;
  string internal_time_from = 5;
  string internal_time_to = 6;
}

message IntervalsRequest {
  string delivery_type_code = 1;
  string date = 2;
}

message Intervals {
  string name = 1;
  int32 from_days = 2;
  int32 to_days = 3;
  repeated WinnerDeliveryDates delivery_dates = 4;
}

message IntervalsResponse {
  string status = 1;
  string message = 2;
  Intervals data = 3;
}

message WinnerStorePickup{
    string store_code = 1;
    string store_title = 2;
    string postal = 3;
    string country = 4;
    string city = 5;
    string street = 6;
    string house = 7;
    string housing = 8;
    string floor = 9;
    string address = 10;
    string schedule = 11;
}

message WinnerStoreShipment{
    string store_code = 1;
    string store_title = 2;
}
