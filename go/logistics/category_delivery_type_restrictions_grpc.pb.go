// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: category_delivery_type_restrictions.proto

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CategoryDeliveryTypeRestrictionServiceClient is the client API for CategoryDeliveryTypeRestrictionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryDeliveryTypeRestrictionServiceClient interface {
	List(ctx context.Context, in *ListCategoryDeliveryTypeRestrictionRequest, opts ...grpc.CallOption) (*ListCategoryDeliveryTypeRestrictionResponse, error)
	Create(ctx context.Context, in *CreateCategoryDeliveryTypeRestriction, opts ...grpc.CallOption) (*CategoryDeliveryTypeRestriction, error)
	Update(ctx context.Context, in *CreateCategoryDeliveryTypeRestriction, opts ...grpc.CallOption) (*CategoryDeliveryTypeRestriction, error)
	Get(ctx context.Context, in *CategoryDeliveryTypeRestrictionId, opts ...grpc.CallOption) (*CategoryDeliveryTypeRestriction, error)
	Delete(ctx context.Context, in *CategoryDeliveryTypeRestrictionId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type categoryDeliveryTypeRestrictionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryDeliveryTypeRestrictionServiceClient(cc grpc.ClientConnInterface) CategoryDeliveryTypeRestrictionServiceClient {
	return &categoryDeliveryTypeRestrictionServiceClient{cc}
}

func (c *categoryDeliveryTypeRestrictionServiceClient) List(ctx context.Context, in *ListCategoryDeliveryTypeRestrictionRequest, opts ...grpc.CallOption) (*ListCategoryDeliveryTypeRestrictionResponse, error) {
	out := new(ListCategoryDeliveryTypeRestrictionResponse)
	err := c.cc.Invoke(ctx, "/logistics.CategoryDeliveryTypeRestrictionService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryDeliveryTypeRestrictionServiceClient) Create(ctx context.Context, in *CreateCategoryDeliveryTypeRestriction, opts ...grpc.CallOption) (*CategoryDeliveryTypeRestriction, error) {
	out := new(CategoryDeliveryTypeRestriction)
	err := c.cc.Invoke(ctx, "/logistics.CategoryDeliveryTypeRestrictionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryDeliveryTypeRestrictionServiceClient) Update(ctx context.Context, in *CreateCategoryDeliveryTypeRestriction, opts ...grpc.CallOption) (*CategoryDeliveryTypeRestriction, error) {
	out := new(CategoryDeliveryTypeRestriction)
	err := c.cc.Invoke(ctx, "/logistics.CategoryDeliveryTypeRestrictionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryDeliveryTypeRestrictionServiceClient) Get(ctx context.Context, in *CategoryDeliveryTypeRestrictionId, opts ...grpc.CallOption) (*CategoryDeliveryTypeRestriction, error) {
	out := new(CategoryDeliveryTypeRestriction)
	err := c.cc.Invoke(ctx, "/logistics.CategoryDeliveryTypeRestrictionService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryDeliveryTypeRestrictionServiceClient) Delete(ctx context.Context, in *CategoryDeliveryTypeRestrictionId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.CategoryDeliveryTypeRestrictionService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryDeliveryTypeRestrictionServiceServer is the server API for CategoryDeliveryTypeRestrictionService service.
// All implementations should embed UnimplementedCategoryDeliveryTypeRestrictionServiceServer
// for forward compatibility
type CategoryDeliveryTypeRestrictionServiceServer interface {
	List(context.Context, *ListCategoryDeliveryTypeRestrictionRequest) (*ListCategoryDeliveryTypeRestrictionResponse, error)
	Create(context.Context, *CreateCategoryDeliveryTypeRestriction) (*CategoryDeliveryTypeRestriction, error)
	Update(context.Context, *CreateCategoryDeliveryTypeRestriction) (*CategoryDeliveryTypeRestriction, error)
	Get(context.Context, *CategoryDeliveryTypeRestrictionId) (*CategoryDeliveryTypeRestriction, error)
	Delete(context.Context, *CategoryDeliveryTypeRestrictionId) (*emptypb.Empty, error)
}

// UnimplementedCategoryDeliveryTypeRestrictionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCategoryDeliveryTypeRestrictionServiceServer struct {
}

func (UnimplementedCategoryDeliveryTypeRestrictionServiceServer) List(context.Context, *ListCategoryDeliveryTypeRestrictionRequest) (*ListCategoryDeliveryTypeRestrictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCategoryDeliveryTypeRestrictionServiceServer) Create(context.Context, *CreateCategoryDeliveryTypeRestriction) (*CategoryDeliveryTypeRestriction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCategoryDeliveryTypeRestrictionServiceServer) Update(context.Context, *CreateCategoryDeliveryTypeRestriction) (*CategoryDeliveryTypeRestriction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCategoryDeliveryTypeRestrictionServiceServer) Get(context.Context, *CategoryDeliveryTypeRestrictionId) (*CategoryDeliveryTypeRestriction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCategoryDeliveryTypeRestrictionServiceServer) Delete(context.Context, *CategoryDeliveryTypeRestrictionId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeCategoryDeliveryTypeRestrictionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryDeliveryTypeRestrictionServiceServer will
// result in compilation errors.
type UnsafeCategoryDeliveryTypeRestrictionServiceServer interface {
	mustEmbedUnimplementedCategoryDeliveryTypeRestrictionServiceServer()
}

func RegisterCategoryDeliveryTypeRestrictionServiceServer(s grpc.ServiceRegistrar, srv CategoryDeliveryTypeRestrictionServiceServer) {
	s.RegisterService(&CategoryDeliveryTypeRestrictionService_ServiceDesc, srv)
}

func _CategoryDeliveryTypeRestrictionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoryDeliveryTypeRestrictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryDeliveryTypeRestrictionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.CategoryDeliveryTypeRestrictionService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryDeliveryTypeRestrictionServiceServer).List(ctx, req.(*ListCategoryDeliveryTypeRestrictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryDeliveryTypeRestrictionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryDeliveryTypeRestriction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryDeliveryTypeRestrictionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.CategoryDeliveryTypeRestrictionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryDeliveryTypeRestrictionServiceServer).Create(ctx, req.(*CreateCategoryDeliveryTypeRestriction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryDeliveryTypeRestrictionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryDeliveryTypeRestriction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryDeliveryTypeRestrictionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.CategoryDeliveryTypeRestrictionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryDeliveryTypeRestrictionServiceServer).Update(ctx, req.(*CreateCategoryDeliveryTypeRestriction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryDeliveryTypeRestrictionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryDeliveryTypeRestrictionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryDeliveryTypeRestrictionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.CategoryDeliveryTypeRestrictionService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryDeliveryTypeRestrictionServiceServer).Get(ctx, req.(*CategoryDeliveryTypeRestrictionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryDeliveryTypeRestrictionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryDeliveryTypeRestrictionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryDeliveryTypeRestrictionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.CategoryDeliveryTypeRestrictionService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryDeliveryTypeRestrictionServiceServer).Delete(ctx, req.(*CategoryDeliveryTypeRestrictionId))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryDeliveryTypeRestrictionService_ServiceDesc is the grpc.ServiceDesc for CategoryDeliveryTypeRestrictionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryDeliveryTypeRestrictionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.CategoryDeliveryTypeRestrictionService",
	HandlerType: (*CategoryDeliveryTypeRestrictionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CategoryDeliveryTypeRestrictionService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CategoryDeliveryTypeRestrictionService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CategoryDeliveryTypeRestrictionService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CategoryDeliveryTypeRestrictionService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CategoryDeliveryTypeRestrictionService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "category_delivery_type_restrictions.proto",
}
