// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: user.proto

package feedbacks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedbacksUsersServiceClient is the client API for FeedbacksUsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedbacksUsersServiceClient interface {
	List(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
}

type feedbacksUsersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedbacksUsersServiceClient(cc grpc.ClientConnInterface) FeedbacksUsersServiceClient {
	return &feedbacksUsersServiceClient{cc}
}

func (c *feedbacksUsersServiceClient) List(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/feedbacks.FeedbacksUsersService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedbacksUsersServiceServer is the server API for FeedbacksUsersService service.
// All implementations should embed UnimplementedFeedbacksUsersServiceServer
// for forward compatibility
type FeedbacksUsersServiceServer interface {
	List(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
}

// UnimplementedFeedbacksUsersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFeedbacksUsersServiceServer struct {
}

func (UnimplementedFeedbacksUsersServiceServer) List(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeFeedbacksUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedbacksUsersServiceServer will
// result in compilation errors.
type UnsafeFeedbacksUsersServiceServer interface {
	mustEmbedUnimplementedFeedbacksUsersServiceServer()
}

func RegisterFeedbacksUsersServiceServer(s grpc.ServiceRegistrar, srv FeedbacksUsersServiceServer) {
	s.RegisterService(&FeedbacksUsersService_ServiceDesc, srv)
}

func _FeedbacksUsersService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbacksUsersServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedbacks.FeedbacksUsersService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbacksUsersServiceServer).List(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedbacksUsersService_ServiceDesc is the grpc.ServiceDesc for FeedbacksUsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedbacksUsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feedbacks.FeedbacksUsersService",
	HandlerType: (*FeedbacksUsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _FeedbacksUsersService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// FeedbacksOperatorsServiceClient is the client API for FeedbacksOperatorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedbacksOperatorsServiceClient interface {
	List(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
}

type feedbacksOperatorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedbacksOperatorsServiceClient(cc grpc.ClientConnInterface) FeedbacksOperatorsServiceClient {
	return &feedbacksOperatorsServiceClient{cc}
}

func (c *feedbacksOperatorsServiceClient) List(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/feedbacks.FeedbacksOperatorsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedbacksOperatorsServiceServer is the server API for FeedbacksOperatorsService service.
// All implementations should embed UnimplementedFeedbacksOperatorsServiceServer
// for forward compatibility
type FeedbacksOperatorsServiceServer interface {
	List(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
}

// UnimplementedFeedbacksOperatorsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFeedbacksOperatorsServiceServer struct {
}

func (UnimplementedFeedbacksOperatorsServiceServer) List(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeFeedbacksOperatorsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedbacksOperatorsServiceServer will
// result in compilation errors.
type UnsafeFeedbacksOperatorsServiceServer interface {
	mustEmbedUnimplementedFeedbacksOperatorsServiceServer()
}

func RegisterFeedbacksOperatorsServiceServer(s grpc.ServiceRegistrar, srv FeedbacksOperatorsServiceServer) {
	s.RegisterService(&FeedbacksOperatorsService_ServiceDesc, srv)
}

func _FeedbacksOperatorsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbacksOperatorsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedbacks.FeedbacksOperatorsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbacksOperatorsServiceServer).List(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedbacksOperatorsService_ServiceDesc is the grpc.ServiceDesc for FeedbacksOperatorsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedbacksOperatorsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feedbacks.FeedbacksOperatorsService",
	HandlerType: (*FeedbacksOperatorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _FeedbacksOperatorsService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
