// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: proto/t-bank-ms.proto

package t_bank_ms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TBankMs_LoginByCode_FullMethodName = "/app.grpc.tBankMs.tBankMs/LoginByCode"
)

// TBankMsClient is the client API for TBankMs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TBankMsClient interface {
	LoginByCode(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type tBankMsClient struct {
	cc grpc.ClientConnInterface
}

func NewTBankMsClient(cc grpc.ClientConnInterface) TBankMsClient {
	return &tBankMsClient{cc}
}

func (c *tBankMsClient) LoginByCode(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, TBankMs_LoginByCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TBankMsServer is the server API for TBankMs service.
// All implementations should embed UnimplementedTBankMsServer
// for forward compatibility
type TBankMsServer interface {
	LoginByCode(context.Context, *LoginRequest) (*LoginResponse, error)
}

// UnimplementedTBankMsServer should be embedded to have forward compatible implementations.
type UnimplementedTBankMsServer struct {
}

func (UnimplementedTBankMsServer) LoginByCode(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByCode not implemented")
}

// UnsafeTBankMsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TBankMsServer will
// result in compilation errors.
type UnsafeTBankMsServer interface {
	mustEmbedUnimplementedTBankMsServer()
}

func RegisterTBankMsServer(s grpc.ServiceRegistrar, srv TBankMsServer) {
	s.RegisterService(&TBankMs_ServiceDesc, srv)
}

func _TBankMs_LoginByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TBankMsServer).LoginByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TBankMs_LoginByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TBankMsServer).LoginByCode(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TBankMs_ServiceDesc is the grpc.ServiceDesc for TBankMs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TBankMs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.grpc.tBankMs.tBankMs",
	HandlerType: (*TBankMsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginByCode",
			Handler:    _TBankMs_LoginByCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/t-bank-ms.proto",
}
