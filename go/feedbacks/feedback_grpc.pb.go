// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: feedback.proto

package feedbacks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedbacksServiceClient is the client API for FeedbacksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedbacksServiceClient interface {
	List(ctx context.Context, in *ListFeedbackRequest, opts ...grpc.CallOption) (*ListFeedbackResponse, error)
}

type feedbacksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedbacksServiceClient(cc grpc.ClientConnInterface) FeedbacksServiceClient {
	return &feedbacksServiceClient{cc}
}

func (c *feedbacksServiceClient) List(ctx context.Context, in *ListFeedbackRequest, opts ...grpc.CallOption) (*ListFeedbackResponse, error) {
	out := new(ListFeedbackResponse)
	err := c.cc.Invoke(ctx, "/feedbacks.FeedbacksService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedbacksServiceServer is the server API for FeedbacksService service.
// All implementations should embed UnimplementedFeedbacksServiceServer
// for forward compatibility
type FeedbacksServiceServer interface {
	List(context.Context, *ListFeedbackRequest) (*ListFeedbackResponse, error)
}

// UnimplementedFeedbacksServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFeedbacksServiceServer struct {
}

func (UnimplementedFeedbacksServiceServer) List(context.Context, *ListFeedbackRequest) (*ListFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeFeedbacksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedbacksServiceServer will
// result in compilation errors.
type UnsafeFeedbacksServiceServer interface {
	mustEmbedUnimplementedFeedbacksServiceServer()
}

func RegisterFeedbacksServiceServer(s grpc.ServiceRegistrar, srv FeedbacksServiceServer) {
	s.RegisterService(&FeedbacksService_ServiceDesc, srv)
}

func _FeedbacksService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbacksServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedbacks.FeedbacksService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbacksServiceServer).List(ctx, req.(*ListFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedbacksService_ServiceDesc is the grpc.ServiceDesc for FeedbacksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedbacksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feedbacks.FeedbacksService",
	HandlerType: (*FeedbacksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _FeedbacksService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feedback.proto",
}
