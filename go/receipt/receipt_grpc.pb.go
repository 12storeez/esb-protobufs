// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: proto/receipt.proto

package receipt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReceiptService_SellPrepaymentReceipt_FullMethodName    = "/app.grpc.receipt.ReceiptService/SellPrepaymentReceipt"
	ReceiptService_SellFullpaymentReceipt_FullMethodName   = "/app.grpc.receipt.ReceiptService/SellFullpaymentReceipt"
	ReceiptService_RefundPrepaymentReceipt_FullMethodName  = "/app.grpc.receipt.ReceiptService/RefundPrepaymentReceipt"
	ReceiptService_RefundFullpaymentReceipt_FullMethodName = "/app.grpc.receipt.ReceiptService/RefundFullpaymentReceipt"
)

// ReceiptServiceClient is the client API for ReceiptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiptServiceClient interface {
	SellPrepaymentReceipt(ctx context.Context, in *SellRequest, opts ...grpc.CallOption) (*ReceiptResponse, error)
	SellFullpaymentReceipt(ctx context.Context, in *SellRequest, opts ...grpc.CallOption) (*ReceiptResponse, error)
	RefundPrepaymentReceipt(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*ReceiptResponse, error)
	RefundFullpaymentReceipt(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*ReceiptResponse, error)
}

type receiptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiptServiceClient(cc grpc.ClientConnInterface) ReceiptServiceClient {
	return &receiptServiceClient{cc}
}

func (c *receiptServiceClient) SellPrepaymentReceipt(ctx context.Context, in *SellRequest, opts ...grpc.CallOption) (*ReceiptResponse, error) {
	out := new(ReceiptResponse)
	err := c.cc.Invoke(ctx, ReceiptService_SellPrepaymentReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) SellFullpaymentReceipt(ctx context.Context, in *SellRequest, opts ...grpc.CallOption) (*ReceiptResponse, error) {
	out := new(ReceiptResponse)
	err := c.cc.Invoke(ctx, ReceiptService_SellFullpaymentReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) RefundPrepaymentReceipt(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*ReceiptResponse, error) {
	out := new(ReceiptResponse)
	err := c.cc.Invoke(ctx, ReceiptService_RefundPrepaymentReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) RefundFullpaymentReceipt(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*ReceiptResponse, error) {
	out := new(ReceiptResponse)
	err := c.cc.Invoke(ctx, ReceiptService_RefundFullpaymentReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiptServiceServer is the server API for ReceiptService service.
// All implementations should embed UnimplementedReceiptServiceServer
// for forward compatibility
type ReceiptServiceServer interface {
	SellPrepaymentReceipt(context.Context, *SellRequest) (*ReceiptResponse, error)
	SellFullpaymentReceipt(context.Context, *SellRequest) (*ReceiptResponse, error)
	RefundPrepaymentReceipt(context.Context, *RefundRequest) (*ReceiptResponse, error)
	RefundFullpaymentReceipt(context.Context, *RefundRequest) (*ReceiptResponse, error)
}

// UnimplementedReceiptServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReceiptServiceServer struct {
}

func (UnimplementedReceiptServiceServer) SellPrepaymentReceipt(context.Context, *SellRequest) (*ReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellPrepaymentReceipt not implemented")
}
func (UnimplementedReceiptServiceServer) SellFullpaymentReceipt(context.Context, *SellRequest) (*ReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellFullpaymentReceipt not implemented")
}
func (UnimplementedReceiptServiceServer) RefundPrepaymentReceipt(context.Context, *RefundRequest) (*ReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundPrepaymentReceipt not implemented")
}
func (UnimplementedReceiptServiceServer) RefundFullpaymentReceipt(context.Context, *RefundRequest) (*ReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundFullpaymentReceipt not implemented")
}

// UnsafeReceiptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiptServiceServer will
// result in compilation errors.
type UnsafeReceiptServiceServer interface {
	mustEmbedUnimplementedReceiptServiceServer()
}

func RegisterReceiptServiceServer(s grpc.ServiceRegistrar, srv ReceiptServiceServer) {
	s.RegisterService(&ReceiptService_ServiceDesc, srv)
}

func _ReceiptService_SellPrepaymentReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).SellPrepaymentReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_SellPrepaymentReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).SellPrepaymentReceipt(ctx, req.(*SellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_SellFullpaymentReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).SellFullpaymentReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_SellFullpaymentReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).SellFullpaymentReceipt(ctx, req.(*SellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_RefundPrepaymentReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).RefundPrepaymentReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_RefundPrepaymentReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).RefundPrepaymentReceipt(ctx, req.(*RefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_RefundFullpaymentReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).RefundFullpaymentReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_RefundFullpaymentReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).RefundFullpaymentReceipt(ctx, req.(*RefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceiptService_ServiceDesc is the grpc.ServiceDesc for ReceiptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.grpc.receipt.ReceiptService",
	HandlerType: (*ReceiptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SellPrepaymentReceipt",
			Handler:    _ReceiptService_SellPrepaymentReceipt_Handler,
		},
		{
			MethodName: "SellFullpaymentReceipt",
			Handler:    _ReceiptService_SellFullpaymentReceipt_Handler,
		},
		{
			MethodName: "RefundPrepaymentReceipt",
			Handler:    _ReceiptService_RefundPrepaymentReceipt_Handler,
		},
		{
			MethodName: "RefundFullpaymentReceipt",
			Handler:    _ReceiptService_RefundFullpaymentReceipt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/receipt.proto",
}
