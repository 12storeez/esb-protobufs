// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/transport_payment_method.proto

package transport

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PaymentMethod service

func NewPaymentMethodEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PaymentMethod service

type PaymentMethodService interface {
	Add(ctx context.Context, in *PaymentMethodAddParams, opts ...client.CallOption) (*PaymentMethodID, error)
	Get(ctx context.Context, in *PaymentMethodID, opts ...client.CallOption) (*PaymentMethodGetResponse, error)
	Update(ctx context.Context, in *PaymentMethodUpdateParams, opts ...client.CallOption) (*PaymentMethodOkResponse, error)
	Delete(ctx context.Context, in *PaymentMethodID, opts ...client.CallOption) (*PaymentMethodOkResponse, error)
}

type paymentMethodService struct {
	c    client.Client
	name string
}

func NewPaymentMethodService(name string, c client.Client) PaymentMethodService {
	return &paymentMethodService{
		c:    c,
		name: name,
	}
}

func (c *paymentMethodService) Add(ctx context.Context, in *PaymentMethodAddParams, opts ...client.CallOption) (*PaymentMethodID, error) {
	req := c.c.NewRequest(c.name, "PaymentMethod.Add", in)
	out := new(PaymentMethodID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodService) Get(ctx context.Context, in *PaymentMethodID, opts ...client.CallOption) (*PaymentMethodGetResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentMethod.Get", in)
	out := new(PaymentMethodGetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodService) Update(ctx context.Context, in *PaymentMethodUpdateParams, opts ...client.CallOption) (*PaymentMethodOkResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentMethod.Update", in)
	out := new(PaymentMethodOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodService) Delete(ctx context.Context, in *PaymentMethodID, opts ...client.CallOption) (*PaymentMethodOkResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentMethod.Delete", in)
	out := new(PaymentMethodOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaymentMethod service

type PaymentMethodHandler interface {
	Add(context.Context, *PaymentMethodAddParams, *PaymentMethodID) error
	Get(context.Context, *PaymentMethodID, *PaymentMethodGetResponse) error
	Update(context.Context, *PaymentMethodUpdateParams, *PaymentMethodOkResponse) error
	Delete(context.Context, *PaymentMethodID, *PaymentMethodOkResponse) error
}

func RegisterPaymentMethodHandler(s server.Server, hdlr PaymentMethodHandler, opts ...server.HandlerOption) error {
	type paymentMethod interface {
		Add(ctx context.Context, in *PaymentMethodAddParams, out *PaymentMethodID) error
		Get(ctx context.Context, in *PaymentMethodID, out *PaymentMethodGetResponse) error
		Update(ctx context.Context, in *PaymentMethodUpdateParams, out *PaymentMethodOkResponse) error
		Delete(ctx context.Context, in *PaymentMethodID, out *PaymentMethodOkResponse) error
	}
	type PaymentMethod struct {
		paymentMethod
	}
	h := &paymentMethodHandler{hdlr}
	return s.Handle(s.NewHandler(&PaymentMethod{h}, opts...))
}

type paymentMethodHandler struct {
	PaymentMethodHandler
}

func (h *paymentMethodHandler) Add(ctx context.Context, in *PaymentMethodAddParams, out *PaymentMethodID) error {
	return h.PaymentMethodHandler.Add(ctx, in, out)
}

func (h *paymentMethodHandler) Get(ctx context.Context, in *PaymentMethodID, out *PaymentMethodGetResponse) error {
	return h.PaymentMethodHandler.Get(ctx, in, out)
}

func (h *paymentMethodHandler) Update(ctx context.Context, in *PaymentMethodUpdateParams, out *PaymentMethodOkResponse) error {
	return h.PaymentMethodHandler.Update(ctx, in, out)
}

func (h *paymentMethodHandler) Delete(ctx context.Context, in *PaymentMethodID, out *PaymentMethodOkResponse) error {
	return h.PaymentMethodHandler.Delete(ctx, in, out)
}
