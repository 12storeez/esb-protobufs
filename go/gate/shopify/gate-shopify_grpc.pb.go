// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: proto/gate-shopify.proto

package shopify

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShopifyClient is the client API for Shopify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopifyClient interface {
	Emit(ctx context.Context, in *EventData, opts ...grpc.CallOption) (*Result, error)
}

type shopifyClient struct {
	cc grpc.ClientConnInterface
}

func NewShopifyClient(cc grpc.ClientConnInterface) ShopifyClient {
	return &shopifyClient{cc}
}

func (c *shopifyClient) Emit(ctx context.Context, in *EventData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/gate.Shopify/Emit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopifyServer is the server API for Shopify service.
// All implementations should embed UnimplementedShopifyServer
// for forward compatibility
type ShopifyServer interface {
	Emit(context.Context, *EventData) (*Result, error)
}

// UnimplementedShopifyServer should be embedded to have forward compatible implementations.
type UnimplementedShopifyServer struct {
}

func (UnimplementedShopifyServer) Emit(context.Context, *EventData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Emit not implemented")
}

// UnsafeShopifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopifyServer will
// result in compilation errors.
type UnsafeShopifyServer interface {
	mustEmbedUnimplementedShopifyServer()
}

func RegisterShopifyServer(s grpc.ServiceRegistrar, srv ShopifyServer) {
	s.RegisterService(&Shopify_ServiceDesc, srv)
}

func _Shopify_Emit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopifyServer).Emit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gate.Shopify/Emit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopifyServer).Emit(ctx, req.(*EventData))
	}
	return interceptor(ctx, in, info, handler)
}

// Shopify_ServiceDesc is the grpc.ServiceDesc for Shopify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shopify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gate.Shopify",
	HandlerType: (*ShopifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Emit",
			Handler:    _Shopify_Emit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gate-shopify.proto",
}
