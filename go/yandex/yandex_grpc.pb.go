// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: proto/yandex.proto

package yandex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Yandex_HandleCreateEvent_FullMethodName = "/yandex.Yandex/HandleCreateEvent"
	Yandex_HandleUpdateEvent_FullMethodName = "/yandex.Yandex/HandleUpdateEvent"
)

// YandexClient is the client API for Yandex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YandexClient interface {
	HandleCreateEvent(ctx context.Context, in *HandleEventRequest, opts ...grpc.CallOption) (*HandleEventResponse, error)
	HandleUpdateEvent(ctx context.Context, in *HandleEventRequest, opts ...grpc.CallOption) (*HandleEventResponse, error)
}

type yandexClient struct {
	cc grpc.ClientConnInterface
}

func NewYandexClient(cc grpc.ClientConnInterface) YandexClient {
	return &yandexClient{cc}
}

func (c *yandexClient) HandleCreateEvent(ctx context.Context, in *HandleEventRequest, opts ...grpc.CallOption) (*HandleEventResponse, error) {
	out := new(HandleEventResponse)
	err := c.cc.Invoke(ctx, Yandex_HandleCreateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yandexClient) HandleUpdateEvent(ctx context.Context, in *HandleEventRequest, opts ...grpc.CallOption) (*HandleEventResponse, error) {
	out := new(HandleEventResponse)
	err := c.cc.Invoke(ctx, Yandex_HandleUpdateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YandexServer is the server API for Yandex service.
// All implementations should embed UnimplementedYandexServer
// for forward compatibility
type YandexServer interface {
	HandleCreateEvent(context.Context, *HandleEventRequest) (*HandleEventResponse, error)
	HandleUpdateEvent(context.Context, *HandleEventRequest) (*HandleEventResponse, error)
}

// UnimplementedYandexServer should be embedded to have forward compatible implementations.
type UnimplementedYandexServer struct {
}

func (UnimplementedYandexServer) HandleCreateEvent(context.Context, *HandleEventRequest) (*HandleEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleCreateEvent not implemented")
}
func (UnimplementedYandexServer) HandleUpdateEvent(context.Context, *HandleEventRequest) (*HandleEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUpdateEvent not implemented")
}

// UnsafeYandexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YandexServer will
// result in compilation errors.
type UnsafeYandexServer interface {
	mustEmbedUnimplementedYandexServer()
}

func RegisterYandexServer(s grpc.ServiceRegistrar, srv YandexServer) {
	s.RegisterService(&Yandex_ServiceDesc, srv)
}

func _Yandex_HandleCreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YandexServer).HandleCreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Yandex_HandleCreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YandexServer).HandleCreateEvent(ctx, req.(*HandleEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yandex_HandleUpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YandexServer).HandleUpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Yandex_HandleUpdateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YandexServer).HandleUpdateEvent(ctx, req.(*HandleEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Yandex_ServiceDesc is the grpc.ServiceDesc for Yandex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Yandex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.Yandex",
	HandlerType: (*YandexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleCreateEvent",
			Handler:    _Yandex_HandleCreateEvent_Handler,
		},
		{
			MethodName: "HandleUpdateEvent",
			Handler:    _Yandex_HandleUpdateEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/yandex.proto",
}
