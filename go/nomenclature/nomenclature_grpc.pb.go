// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: proto/nomenclature.proto

// Package product describes the gRPC interface of the product-go -ms microservice.
// Warning! it`s not equal internal/products

package nomenclature

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NomenclatureService_GetList_FullMethodName      = "/nomenclature.NomenclatureService/GetList"
	NomenclatureService_GetByArticle_FullMethodName = "/nomenclature.NomenclatureService/GetByArticle"
)

// NomenclatureServiceClient is the client API for NomenclatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NomenclatureServiceClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetNomenclatureListResponse, error)
	GetByArticle(ctx context.Context, in *GetNomenclatureByArticleRequest, opts ...grpc.CallOption) (*GetNomenclatureByArticleResponse, error)
}

type nomenclatureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNomenclatureServiceClient(cc grpc.ClientConnInterface) NomenclatureServiceClient {
	return &nomenclatureServiceClient{cc}
}

func (c *nomenclatureServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetNomenclatureListResponse, error) {
	out := new(GetNomenclatureListResponse)
	err := c.cc.Invoke(ctx, NomenclatureService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nomenclatureServiceClient) GetByArticle(ctx context.Context, in *GetNomenclatureByArticleRequest, opts ...grpc.CallOption) (*GetNomenclatureByArticleResponse, error) {
	out := new(GetNomenclatureByArticleResponse)
	err := c.cc.Invoke(ctx, NomenclatureService_GetByArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NomenclatureServiceServer is the server API for NomenclatureService service.
// All implementations should embed UnimplementedNomenclatureServiceServer
// for forward compatibility
type NomenclatureServiceServer interface {
	GetList(context.Context, *GetListRequest) (*GetNomenclatureListResponse, error)
	GetByArticle(context.Context, *GetNomenclatureByArticleRequest) (*GetNomenclatureByArticleResponse, error)
}

// UnimplementedNomenclatureServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNomenclatureServiceServer struct {
}

func (UnimplementedNomenclatureServiceServer) GetList(context.Context, *GetListRequest) (*GetNomenclatureListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedNomenclatureServiceServer) GetByArticle(context.Context, *GetNomenclatureByArticleRequest) (*GetNomenclatureByArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByArticle not implemented")
}

// UnsafeNomenclatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NomenclatureServiceServer will
// result in compilation errors.
type UnsafeNomenclatureServiceServer interface {
	mustEmbedUnimplementedNomenclatureServiceServer()
}

func RegisterNomenclatureServiceServer(s grpc.ServiceRegistrar, srv NomenclatureServiceServer) {
	s.RegisterService(&NomenclatureService_ServiceDesc, srv)
}

func _NomenclatureService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomenclatureServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NomenclatureService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomenclatureServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NomenclatureService_GetByArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNomenclatureByArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomenclatureServiceServer).GetByArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NomenclatureService_GetByArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomenclatureServiceServer).GetByArticle(ctx, req.(*GetNomenclatureByArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NomenclatureService_ServiceDesc is the grpc.ServiceDesc for NomenclatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NomenclatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomenclature.NomenclatureService",
	HandlerType: (*NomenclatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _NomenclatureService_GetList_Handler,
		},
		{
			MethodName: "GetByArticle",
			Handler:    _NomenclatureService_GetByArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nomenclature.proto",
}

const (
	PhotoModelService_GetList_FullMethodName = "/nomenclature.PhotoModelService/GetList"
	PhotoModelService_GetByID_FullMethodName = "/nomenclature.PhotoModelService/GetByID"
	PhotoModelService_Create_FullMethodName  = "/nomenclature.PhotoModelService/Create"
	PhotoModelService_Update_FullMethodName  = "/nomenclature.PhotoModelService/Update"
)

// PhotoModelServiceClient is the client API for PhotoModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhotoModelServiceClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetPhotoModelListResponse, error)
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error)
	Create(ctx context.Context, in *PhotoModelWithoutID, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error)
	Update(ctx context.Context, in *UpdatesPhotoModel, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error)
}

type photoModelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPhotoModelServiceClient(cc grpc.ClientConnInterface) PhotoModelServiceClient {
	return &photoModelServiceClient{cc}
}

func (c *photoModelServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetPhotoModelListResponse, error) {
	out := new(GetPhotoModelListResponse)
	err := c.cc.Invoke(ctx, PhotoModelService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoModelServiceClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error) {
	out := new(GetPhotoModelByIDResponse)
	err := c.cc.Invoke(ctx, PhotoModelService_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoModelServiceClient) Create(ctx context.Context, in *PhotoModelWithoutID, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error) {
	out := new(GetPhotoModelByIDResponse)
	err := c.cc.Invoke(ctx, PhotoModelService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoModelServiceClient) Update(ctx context.Context, in *UpdatesPhotoModel, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error) {
	out := new(GetPhotoModelByIDResponse)
	err := c.cc.Invoke(ctx, PhotoModelService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhotoModelServiceServer is the server API for PhotoModelService service.
// All implementations should embed UnimplementedPhotoModelServiceServer
// for forward compatibility
type PhotoModelServiceServer interface {
	GetList(context.Context, *GetListRequest) (*GetPhotoModelListResponse, error)
	GetByID(context.Context, *GetByIDRequest) (*GetPhotoModelByIDResponse, error)
	Create(context.Context, *PhotoModelWithoutID) (*GetPhotoModelByIDResponse, error)
	Update(context.Context, *UpdatesPhotoModel) (*GetPhotoModelByIDResponse, error)
}

// UnimplementedPhotoModelServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPhotoModelServiceServer struct {
}

func (UnimplementedPhotoModelServiceServer) GetList(context.Context, *GetListRequest) (*GetPhotoModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedPhotoModelServiceServer) GetByID(context.Context, *GetByIDRequest) (*GetPhotoModelByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedPhotoModelServiceServer) Create(context.Context, *PhotoModelWithoutID) (*GetPhotoModelByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPhotoModelServiceServer) Update(context.Context, *UpdatesPhotoModel) (*GetPhotoModelByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

// UnsafePhotoModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhotoModelServiceServer will
// result in compilation errors.
type UnsafePhotoModelServiceServer interface {
	mustEmbedUnimplementedPhotoModelServiceServer()
}

func RegisterPhotoModelServiceServer(s grpc.ServiceRegistrar, srv PhotoModelServiceServer) {
	s.RegisterService(&PhotoModelService_ServiceDesc, srv)
}

func _PhotoModelService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoModelServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoModelService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoModelServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoModelService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoModelServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoModelService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoModelServiceServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoModelService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoModelWithoutID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoModelServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoModelService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoModelServiceServer).Create(ctx, req.(*PhotoModelWithoutID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoModelService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatesPhotoModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoModelServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoModelService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoModelServiceServer).Update(ctx, req.(*UpdatesPhotoModel))
	}
	return interceptor(ctx, in, info, handler)
}

// PhotoModelService_ServiceDesc is the grpc.ServiceDesc for PhotoModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhotoModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomenclature.PhotoModelService",
	HandlerType: (*PhotoModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _PhotoModelService_GetList_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _PhotoModelService_GetByID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PhotoModelService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PhotoModelService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nomenclature.proto",
}

const (
	DictionarySizeService_GetList_FullMethodName   = "/nomenclature.DictionarySizeService/GetList"
	DictionarySizeService_GetByGUID_FullMethodName = "/nomenclature.DictionarySizeService/GetByGUID"
	DictionarySizeService_Update_FullMethodName    = "/nomenclature.DictionarySizeService/Update"
)

// DictionarySizeServiceClient is the client API for DictionarySizeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictionarySizeServiceClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetDictionarySizeListResponse, error)
	GetByGUID(ctx context.Context, in *GetByGUIDRequest, opts ...grpc.CallOption) (*GetDictionarySizeByGUIDResponse, error)
	Update(ctx context.Context, in *UpdatesDictionarySize, opts ...grpc.CallOption) (*GetDictionarySizeByGUIDResponse, error)
}

type dictionarySizeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDictionarySizeServiceClient(cc grpc.ClientConnInterface) DictionarySizeServiceClient {
	return &dictionarySizeServiceClient{cc}
}

func (c *dictionarySizeServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetDictionarySizeListResponse, error) {
	out := new(GetDictionarySizeListResponse)
	err := c.cc.Invoke(ctx, DictionarySizeService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionarySizeServiceClient) GetByGUID(ctx context.Context, in *GetByGUIDRequest, opts ...grpc.CallOption) (*GetDictionarySizeByGUIDResponse, error) {
	out := new(GetDictionarySizeByGUIDResponse)
	err := c.cc.Invoke(ctx, DictionarySizeService_GetByGUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionarySizeServiceClient) Update(ctx context.Context, in *UpdatesDictionarySize, opts ...grpc.CallOption) (*GetDictionarySizeByGUIDResponse, error) {
	out := new(GetDictionarySizeByGUIDResponse)
	err := c.cc.Invoke(ctx, DictionarySizeService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictionarySizeServiceServer is the server API for DictionarySizeService service.
// All implementations should embed UnimplementedDictionarySizeServiceServer
// for forward compatibility
type DictionarySizeServiceServer interface {
	GetList(context.Context, *GetListRequest) (*GetDictionarySizeListResponse, error)
	GetByGUID(context.Context, *GetByGUIDRequest) (*GetDictionarySizeByGUIDResponse, error)
	Update(context.Context, *UpdatesDictionarySize) (*GetDictionarySizeByGUIDResponse, error)
}

// UnimplementedDictionarySizeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDictionarySizeServiceServer struct {
}

func (UnimplementedDictionarySizeServiceServer) GetList(context.Context, *GetListRequest) (*GetDictionarySizeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedDictionarySizeServiceServer) GetByGUID(context.Context, *GetByGUIDRequest) (*GetDictionarySizeByGUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByGUID not implemented")
}
func (UnimplementedDictionarySizeServiceServer) Update(context.Context, *UpdatesDictionarySize) (*GetDictionarySizeByGUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

// UnsafeDictionarySizeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictionarySizeServiceServer will
// result in compilation errors.
type UnsafeDictionarySizeServiceServer interface {
	mustEmbedUnimplementedDictionarySizeServiceServer()
}

func RegisterDictionarySizeServiceServer(s grpc.ServiceRegistrar, srv DictionarySizeServiceServer) {
	s.RegisterService(&DictionarySizeService_ServiceDesc, srv)
}

func _DictionarySizeService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionarySizeServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionarySizeService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionarySizeServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionarySizeService_GetByGUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByGUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionarySizeServiceServer).GetByGUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionarySizeService_GetByGUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionarySizeServiceServer).GetByGUID(ctx, req.(*GetByGUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionarySizeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatesDictionarySize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionarySizeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictionarySizeService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionarySizeServiceServer).Update(ctx, req.(*UpdatesDictionarySize))
	}
	return interceptor(ctx, in, info, handler)
}

// DictionarySizeService_ServiceDesc is the grpc.ServiceDesc for DictionarySizeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictionarySizeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomenclature.DictionarySizeService",
	HandlerType: (*DictionarySizeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _DictionarySizeService_GetList_Handler,
		},
		{
			MethodName: "GetByGUID",
			Handler:    _DictionarySizeService_GetByGUID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DictionarySizeService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nomenclature.proto",
}

const (
	MaintenanceService_GetList_FullMethodName                      = "/nomenclature.MaintenanceService/GetList"
	MaintenanceService_GetByID_FullMethodName                      = "/nomenclature.MaintenanceService/GetByID"
	MaintenanceService_Create_FullMethodName                       = "/nomenclature.MaintenanceService/Create"
	MaintenanceService_Update_FullMethodName                       = "/nomenclature.MaintenanceService/Update"
	MaintenanceService_GetListProductsToMaintenance_FullMethodName = "/nomenclature.MaintenanceService/GetListProductsToMaintenance"
)

// MaintenanceServiceClient is the client API for MaintenanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaintenanceServiceClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetMaintenanceListResponse, error)
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetMaintenanceByIDResponse, error)
	Create(ctx context.Context, in *MaintenanceithoutID, opts ...grpc.CallOption) (*GetMaintenanceByIDResponse, error)
	Update(ctx context.Context, in *UpdatesMaintenance, opts ...grpc.CallOption) (*GetMaintenanceByIDResponse, error)
	GetListProductsToMaintenance(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListProductsToMaintenanceResponse, error)
}

type maintenanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaintenanceServiceClient(cc grpc.ClientConnInterface) MaintenanceServiceClient {
	return &maintenanceServiceClient{cc}
}

func (c *maintenanceServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetMaintenanceListResponse, error) {
	out := new(GetMaintenanceListResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetMaintenanceByIDResponse, error) {
	out := new(GetMaintenanceByIDResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) Create(ctx context.Context, in *MaintenanceithoutID, opts ...grpc.CallOption) (*GetMaintenanceByIDResponse, error) {
	out := new(GetMaintenanceByIDResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) Update(ctx context.Context, in *UpdatesMaintenance, opts ...grpc.CallOption) (*GetMaintenanceByIDResponse, error) {
	out := new(GetMaintenanceByIDResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) GetListProductsToMaintenance(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListProductsToMaintenanceResponse, error) {
	out := new(GetListProductsToMaintenanceResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_GetListProductsToMaintenance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaintenanceServiceServer is the server API for MaintenanceService service.
// All implementations should embed UnimplementedMaintenanceServiceServer
// for forward compatibility
type MaintenanceServiceServer interface {
	GetList(context.Context, *GetListRequest) (*GetMaintenanceListResponse, error)
	GetByID(context.Context, *GetByIDRequest) (*GetMaintenanceByIDResponse, error)
	Create(context.Context, *MaintenanceithoutID) (*GetMaintenanceByIDResponse, error)
	Update(context.Context, *UpdatesMaintenance) (*GetMaintenanceByIDResponse, error)
	GetListProductsToMaintenance(context.Context, *GetListRequest) (*GetListProductsToMaintenanceResponse, error)
}

// UnimplementedMaintenanceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMaintenanceServiceServer struct {
}

func (UnimplementedMaintenanceServiceServer) GetList(context.Context, *GetListRequest) (*GetMaintenanceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedMaintenanceServiceServer) GetByID(context.Context, *GetByIDRequest) (*GetMaintenanceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedMaintenanceServiceServer) Create(context.Context, *MaintenanceithoutID) (*GetMaintenanceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMaintenanceServiceServer) Update(context.Context, *UpdatesMaintenance) (*GetMaintenanceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMaintenanceServiceServer) GetListProductsToMaintenance(context.Context, *GetListRequest) (*GetListProductsToMaintenanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListProductsToMaintenance not implemented")
}

// UnsafeMaintenanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaintenanceServiceServer will
// result in compilation errors.
type UnsafeMaintenanceServiceServer interface {
	mustEmbedUnimplementedMaintenanceServiceServer()
}

func RegisterMaintenanceServiceServer(s grpc.ServiceRegistrar, srv MaintenanceServiceServer) {
	s.RegisterService(&MaintenanceService_ServiceDesc, srv)
}

func _MaintenanceService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaintenanceithoutID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).Create(ctx, req.(*MaintenanceithoutID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatesMaintenance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).Update(ctx, req.(*UpdatesMaintenance))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_GetListProductsToMaintenance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).GetListProductsToMaintenance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_GetListProductsToMaintenance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).GetListProductsToMaintenance(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaintenanceService_ServiceDesc is the grpc.ServiceDesc for MaintenanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaintenanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomenclature.MaintenanceService",
	HandlerType: (*MaintenanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _MaintenanceService_GetList_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _MaintenanceService_GetByID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MaintenanceService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MaintenanceService_Update_Handler,
		},
		{
			MethodName: "GetListProductsToMaintenance",
			Handler:    _MaintenanceService_GetListProductsToMaintenance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nomenclature.proto",
}

const (
	ProductOrderService_GetList_FullMethodName = "/nomenclature.ProductOrderService/GetList"
	ProductOrderService_GetByID_FullMethodName = "/nomenclature.ProductOrderService/GetByID"
	ProductOrderService_Create_FullMethodName  = "/nomenclature.ProductOrderService/Create"
	ProductOrderService_Update_FullMethodName  = "/nomenclature.ProductOrderService/Update"
)

// ProductOrderServiceClient is the client API for ProductOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductOrderServiceClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetProductOrderListResponse, error)
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetProductOrderByIDResponse, error)
	Create(ctx context.Context, in *ProductOrderWithoutID, opts ...grpc.CallOption) (*GetProductOrderByIDResponse, error)
	Update(ctx context.Context, in *UpdatesProductOrder, opts ...grpc.CallOption) (*GetProductOrderByIDResponse, error)
}

type productOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductOrderServiceClient(cc grpc.ClientConnInterface) ProductOrderServiceClient {
	return &productOrderServiceClient{cc}
}

func (c *productOrderServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetProductOrderListResponse, error) {
	out := new(GetProductOrderListResponse)
	err := c.cc.Invoke(ctx, ProductOrderService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOrderServiceClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetProductOrderByIDResponse, error) {
	out := new(GetProductOrderByIDResponse)
	err := c.cc.Invoke(ctx, ProductOrderService_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOrderServiceClient) Create(ctx context.Context, in *ProductOrderWithoutID, opts ...grpc.CallOption) (*GetProductOrderByIDResponse, error) {
	out := new(GetProductOrderByIDResponse)
	err := c.cc.Invoke(ctx, ProductOrderService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOrderServiceClient) Update(ctx context.Context, in *UpdatesProductOrder, opts ...grpc.CallOption) (*GetProductOrderByIDResponse, error) {
	out := new(GetProductOrderByIDResponse)
	err := c.cc.Invoke(ctx, ProductOrderService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductOrderServiceServer is the server API for ProductOrderService service.
// All implementations should embed UnimplementedProductOrderServiceServer
// for forward compatibility
type ProductOrderServiceServer interface {
	GetList(context.Context, *GetListRequest) (*GetProductOrderListResponse, error)
	GetByID(context.Context, *GetByIDRequest) (*GetProductOrderByIDResponse, error)
	Create(context.Context, *ProductOrderWithoutID) (*GetProductOrderByIDResponse, error)
	Update(context.Context, *UpdatesProductOrder) (*GetProductOrderByIDResponse, error)
}

// UnimplementedProductOrderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProductOrderServiceServer struct {
}

func (UnimplementedProductOrderServiceServer) GetList(context.Context, *GetListRequest) (*GetProductOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedProductOrderServiceServer) GetByID(context.Context, *GetByIDRequest) (*GetProductOrderByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedProductOrderServiceServer) Create(context.Context, *ProductOrderWithoutID) (*GetProductOrderByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProductOrderServiceServer) Update(context.Context, *UpdatesProductOrder) (*GetProductOrderByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

// UnsafeProductOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductOrderServiceServer will
// result in compilation errors.
type UnsafeProductOrderServiceServer interface {
	mustEmbedUnimplementedProductOrderServiceServer()
}

func RegisterProductOrderServiceServer(s grpc.ServiceRegistrar, srv ProductOrderServiceServer) {
	s.RegisterService(&ProductOrderService_ServiceDesc, srv)
}

func _ProductOrderService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOrderServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOrderService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOrderServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOrderService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOrderServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOrderService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOrderServiceServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOrderService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductOrderWithoutID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOrderServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOrderService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOrderServiceServer).Create(ctx, req.(*ProductOrderWithoutID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOrderService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatesProductOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOrderServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOrderService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOrderServiceServer).Update(ctx, req.(*UpdatesProductOrder))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductOrderService_ServiceDesc is the grpc.ServiceDesc for ProductOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomenclature.ProductOrderService",
	HandlerType: (*ProductOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _ProductOrderService_GetList_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _ProductOrderService_GetByID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ProductOrderService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProductOrderService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nomenclature.proto",
}

const (
	ModelTypeService_GetList_FullMethodName = "/nomenclature.ModelTypeService/GetList"
	ModelTypeService_GetByID_FullMethodName = "/nomenclature.ModelTypeService/GetByID"
	ModelTypeService_Create_FullMethodName  = "/nomenclature.ModelTypeService/Create"
	ModelTypeService_Update_FullMethodName  = "/nomenclature.ModelTypeService/Update"
)

// ModelTypeServiceClient is the client API for ModelTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelTypeServiceClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetModelTypeListResponse, error)
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetModelTypeByIDResponse, error)
	Create(ctx context.Context, in *ModelTypeWithoutID, opts ...grpc.CallOption) (*GetModelTypeByIDResponse, error)
	Update(ctx context.Context, in *UpdatesModelType, opts ...grpc.CallOption) (*GetModelTypeByIDResponse, error)
}

type modelTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelTypeServiceClient(cc grpc.ClientConnInterface) ModelTypeServiceClient {
	return &modelTypeServiceClient{cc}
}

func (c *modelTypeServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetModelTypeListResponse, error) {
	out := new(GetModelTypeListResponse)
	err := c.cc.Invoke(ctx, ModelTypeService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelTypeServiceClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetModelTypeByIDResponse, error) {
	out := new(GetModelTypeByIDResponse)
	err := c.cc.Invoke(ctx, ModelTypeService_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelTypeServiceClient) Create(ctx context.Context, in *ModelTypeWithoutID, opts ...grpc.CallOption) (*GetModelTypeByIDResponse, error) {
	out := new(GetModelTypeByIDResponse)
	err := c.cc.Invoke(ctx, ModelTypeService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelTypeServiceClient) Update(ctx context.Context, in *UpdatesModelType, opts ...grpc.CallOption) (*GetModelTypeByIDResponse, error) {
	out := new(GetModelTypeByIDResponse)
	err := c.cc.Invoke(ctx, ModelTypeService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelTypeServiceServer is the server API for ModelTypeService service.
// All implementations should embed UnimplementedModelTypeServiceServer
// for forward compatibility
type ModelTypeServiceServer interface {
	GetList(context.Context, *GetListRequest) (*GetModelTypeListResponse, error)
	GetByID(context.Context, *GetByIDRequest) (*GetModelTypeByIDResponse, error)
	Create(context.Context, *ModelTypeWithoutID) (*GetModelTypeByIDResponse, error)
	Update(context.Context, *UpdatesModelType) (*GetModelTypeByIDResponse, error)
}

// UnimplementedModelTypeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedModelTypeServiceServer struct {
}

func (UnimplementedModelTypeServiceServer) GetList(context.Context, *GetListRequest) (*GetModelTypeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedModelTypeServiceServer) GetByID(context.Context, *GetByIDRequest) (*GetModelTypeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedModelTypeServiceServer) Create(context.Context, *ModelTypeWithoutID) (*GetModelTypeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedModelTypeServiceServer) Update(context.Context, *UpdatesModelType) (*GetModelTypeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

// UnsafeModelTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelTypeServiceServer will
// result in compilation errors.
type UnsafeModelTypeServiceServer interface {
	mustEmbedUnimplementedModelTypeServiceServer()
}

func RegisterModelTypeServiceServer(s grpc.ServiceRegistrar, srv ModelTypeServiceServer) {
	s.RegisterService(&ModelTypeService_ServiceDesc, srv)
}

func _ModelTypeService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelTypeServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelTypeService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelTypeServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelTypeService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelTypeServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelTypeService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelTypeServiceServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelTypeWithoutID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelTypeService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelTypeServiceServer).Create(ctx, req.(*ModelTypeWithoutID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelTypeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatesModelType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelTypeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelTypeService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelTypeServiceServer).Update(ctx, req.(*UpdatesModelType))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelTypeService_ServiceDesc is the grpc.ServiceDesc for ModelTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomenclature.ModelTypeService",
	HandlerType: (*ModelTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _ModelTypeService_GetList_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _ModelTypeService_GetByID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ModelTypeService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ModelTypeService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nomenclature.proto",
}

const (
	ProductFilterService_GetList_FullMethodName = "/nomenclature.ProductFilterService/GetList"
)

// ProductFilterServiceClient is the client API for ProductFilterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductFilterServiceClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetProductFilterListResponse, error)
}

type productFilterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductFilterServiceClient(cc grpc.ClientConnInterface) ProductFilterServiceClient {
	return &productFilterServiceClient{cc}
}

func (c *productFilterServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetProductFilterListResponse, error) {
	out := new(GetProductFilterListResponse)
	err := c.cc.Invoke(ctx, ProductFilterService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductFilterServiceServer is the server API for ProductFilterService service.
// All implementations should embed UnimplementedProductFilterServiceServer
// for forward compatibility
type ProductFilterServiceServer interface {
	GetList(context.Context, *GetListRequest) (*GetProductFilterListResponse, error)
}

// UnimplementedProductFilterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProductFilterServiceServer struct {
}

func (UnimplementedProductFilterServiceServer) GetList(context.Context, *GetListRequest) (*GetProductFilterListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}

// UnsafeProductFilterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductFilterServiceServer will
// result in compilation errors.
type UnsafeProductFilterServiceServer interface {
	mustEmbedUnimplementedProductFilterServiceServer()
}

func RegisterProductFilterServiceServer(s grpc.ServiceRegistrar, srv ProductFilterServiceServer) {
	s.RegisterService(&ProductFilterService_ServiceDesc, srv)
}

func _ProductFilterService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFilterServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductFilterService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFilterServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductFilterService_ServiceDesc is the grpc.ServiceDesc for ProductFilterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductFilterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomenclature.ProductFilterService",
	HandlerType: (*ProductFilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _ProductFilterService_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nomenclature.proto",
}

const (
	CategoryService_GetList_FullMethodName                  = "/nomenclature.CategoryService/GetList"
	CategoryService_GetByID_FullMethodName                  = "/nomenclature.CategoryService/GetByID"
	CategoryService_Create_FullMethodName                   = "/nomenclature.CategoryService/Create"
	CategoryService_Update_FullMethodName                   = "/nomenclature.CategoryService/Update"
	CategoryService_GetProductsToCategory_FullMethodName    = "/nomenclature.CategoryService/GetProductsToCategory"
	CategoryService_UpdateProductsToCategory_FullMethodName = "/nomenclature.CategoryService/UpdateProductsToCategory"
)

// CategoryServiceClient is the client API for CategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryServiceClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetCategoryListResponse, error)
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetCategoryByIDResponse, error)
	Create(ctx context.Context, in *CategoryWithoutID, opts ...grpc.CallOption) (*GetCategoryByIDResponse, error)
	Update(ctx context.Context, in *UpdatesCategory, opts ...grpc.CallOption) (*GetCategoryByIDResponse, error)
	GetProductsToCategory(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetProductsToCategoryResponse, error)
	UpdateProductsToCategory(ctx context.Context, in *UpdateProductsToCategoryRequest, opts ...grpc.CallOption) (*GetProductsToCategoryResponse, error)
}

type categoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryServiceClient(cc grpc.ClientConnInterface) CategoryServiceClient {
	return &categoryServiceClient{cc}
}

func (c *categoryServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetCategoryListResponse, error) {
	out := new(GetCategoryListResponse)
	err := c.cc.Invoke(ctx, CategoryService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetCategoryByIDResponse, error) {
	out := new(GetCategoryByIDResponse)
	err := c.cc.Invoke(ctx, CategoryService_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) Create(ctx context.Context, in *CategoryWithoutID, opts ...grpc.CallOption) (*GetCategoryByIDResponse, error) {
	out := new(GetCategoryByIDResponse)
	err := c.cc.Invoke(ctx, CategoryService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) Update(ctx context.Context, in *UpdatesCategory, opts ...grpc.CallOption) (*GetCategoryByIDResponse, error) {
	out := new(GetCategoryByIDResponse)
	err := c.cc.Invoke(ctx, CategoryService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) GetProductsToCategory(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetProductsToCategoryResponse, error) {
	out := new(GetProductsToCategoryResponse)
	err := c.cc.Invoke(ctx, CategoryService_GetProductsToCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) UpdateProductsToCategory(ctx context.Context, in *UpdateProductsToCategoryRequest, opts ...grpc.CallOption) (*GetProductsToCategoryResponse, error) {
	out := new(GetProductsToCategoryResponse)
	err := c.cc.Invoke(ctx, CategoryService_UpdateProductsToCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryServiceServer is the server API for CategoryService service.
// All implementations should embed UnimplementedCategoryServiceServer
// for forward compatibility
type CategoryServiceServer interface {
	GetList(context.Context, *GetListRequest) (*GetCategoryListResponse, error)
	GetByID(context.Context, *GetByIDRequest) (*GetCategoryByIDResponse, error)
	Create(context.Context, *CategoryWithoutID) (*GetCategoryByIDResponse, error)
	Update(context.Context, *UpdatesCategory) (*GetCategoryByIDResponse, error)
	GetProductsToCategory(context.Context, *GetByIDRequest) (*GetProductsToCategoryResponse, error)
	UpdateProductsToCategory(context.Context, *UpdateProductsToCategoryRequest) (*GetProductsToCategoryResponse, error)
}

// UnimplementedCategoryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCategoryServiceServer struct {
}

func (UnimplementedCategoryServiceServer) GetList(context.Context, *GetListRequest) (*GetCategoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedCategoryServiceServer) GetByID(context.Context, *GetByIDRequest) (*GetCategoryByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedCategoryServiceServer) Create(context.Context, *CategoryWithoutID) (*GetCategoryByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCategoryServiceServer) Update(context.Context, *UpdatesCategory) (*GetCategoryByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCategoryServiceServer) GetProductsToCategory(context.Context, *GetByIDRequest) (*GetProductsToCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsToCategory not implemented")
}
func (UnimplementedCategoryServiceServer) UpdateProductsToCategory(context.Context, *UpdateProductsToCategoryRequest) (*GetProductsToCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductsToCategory not implemented")
}

// UnsafeCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryServiceServer will
// result in compilation errors.
type UnsafeCategoryServiceServer interface {
	mustEmbedUnimplementedCategoryServiceServer()
}

func RegisterCategoryServiceServer(s grpc.ServiceRegistrar, srv CategoryServiceServer) {
	s.RegisterService(&CategoryService_ServiceDesc, srv)
}

func _CategoryService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryWithoutID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).Create(ctx, req.(*CategoryWithoutID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatesCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).Update(ctx, req.(*UpdatesCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_GetProductsToCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).GetProductsToCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_GetProductsToCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).GetProductsToCategory(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_UpdateProductsToCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductsToCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).UpdateProductsToCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryService_UpdateProductsToCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).UpdateProductsToCategory(ctx, req.(*UpdateProductsToCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryService_ServiceDesc is the grpc.ServiceDesc for CategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomenclature.CategoryService",
	HandlerType: (*CategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _CategoryService_GetList_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _CategoryService_GetByID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CategoryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CategoryService_Update_Handler,
		},
		{
			MethodName: "GetProductsToCategory",
			Handler:    _CategoryService_GetProductsToCategory_Handler,
		},
		{
			MethodName: "UpdateProductsToCategory",
			Handler:    _CategoryService_UpdateProductsToCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nomenclature.proto",
}

const (
	ProductForAdminService_GetList_FullMethodName   = "/nomenclature.ProductForAdminService/GetList"
	ProductForAdminService_GetByGUID_FullMethodName = "/nomenclature.ProductForAdminService/GetByGUID"
	ProductForAdminService_Update_FullMethodName    = "/nomenclature.ProductForAdminService/Update"
)

// ProductForAdminServiceClient is the client API for ProductForAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductForAdminServiceClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetProductForAdminListResponse, error)
	GetByGUID(ctx context.Context, in *GetByGUIDRequest, opts ...grpc.CallOption) (*GetProductForAdminByGUIDResponse, error)
	Update(ctx context.Context, in *UpdatesProductForAdmin, opts ...grpc.CallOption) (*GetProductForAdminByGUIDResponse, error)
}

type productForAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductForAdminServiceClient(cc grpc.ClientConnInterface) ProductForAdminServiceClient {
	return &productForAdminServiceClient{cc}
}

func (c *productForAdminServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetProductForAdminListResponse, error) {
	out := new(GetProductForAdminListResponse)
	err := c.cc.Invoke(ctx, ProductForAdminService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productForAdminServiceClient) GetByGUID(ctx context.Context, in *GetByGUIDRequest, opts ...grpc.CallOption) (*GetProductForAdminByGUIDResponse, error) {
	out := new(GetProductForAdminByGUIDResponse)
	err := c.cc.Invoke(ctx, ProductForAdminService_GetByGUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productForAdminServiceClient) Update(ctx context.Context, in *UpdatesProductForAdmin, opts ...grpc.CallOption) (*GetProductForAdminByGUIDResponse, error) {
	out := new(GetProductForAdminByGUIDResponse)
	err := c.cc.Invoke(ctx, ProductForAdminService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductForAdminServiceServer is the server API for ProductForAdminService service.
// All implementations should embed UnimplementedProductForAdminServiceServer
// for forward compatibility
type ProductForAdminServiceServer interface {
	GetList(context.Context, *GetListRequest) (*GetProductForAdminListResponse, error)
	GetByGUID(context.Context, *GetByGUIDRequest) (*GetProductForAdminByGUIDResponse, error)
	Update(context.Context, *UpdatesProductForAdmin) (*GetProductForAdminByGUIDResponse, error)
}

// UnimplementedProductForAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProductForAdminServiceServer struct {
}

func (UnimplementedProductForAdminServiceServer) GetList(context.Context, *GetListRequest) (*GetProductForAdminListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedProductForAdminServiceServer) GetByGUID(context.Context, *GetByGUIDRequest) (*GetProductForAdminByGUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByGUID not implemented")
}
func (UnimplementedProductForAdminServiceServer) Update(context.Context, *UpdatesProductForAdmin) (*GetProductForAdminByGUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

// UnsafeProductForAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductForAdminServiceServer will
// result in compilation errors.
type UnsafeProductForAdminServiceServer interface {
	mustEmbedUnimplementedProductForAdminServiceServer()
}

func RegisterProductForAdminServiceServer(s grpc.ServiceRegistrar, srv ProductForAdminServiceServer) {
	s.RegisterService(&ProductForAdminService_ServiceDesc, srv)
}

func _ProductForAdminService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductForAdminServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductForAdminService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductForAdminServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductForAdminService_GetByGUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByGUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductForAdminServiceServer).GetByGUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductForAdminService_GetByGUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductForAdminServiceServer).GetByGUID(ctx, req.(*GetByGUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductForAdminService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatesProductForAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductForAdminServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductForAdminService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductForAdminServiceServer).Update(ctx, req.(*UpdatesProductForAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductForAdminService_ServiceDesc is the grpc.ServiceDesc for ProductForAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductForAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomenclature.ProductForAdminService",
	HandlerType: (*ProductForAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _ProductForAdminService_GetList_Handler,
		},
		{
			MethodName: "GetByGUID",
			Handler:    _ProductForAdminService_GetByGUID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProductForAdminService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nomenclature.proto",
}
