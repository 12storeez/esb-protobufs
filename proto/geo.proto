syntax = "proto3";

option go_package = "go/geo";

package geo;

service geo {
  // Suggest по странам. Возвращет страны из БД
  rpc SuggestCountry(SuggestCountryParams) returns (SuggestCountryResponse) {
  }
  // Детальная информация по стране из БД
  rpc CountryDetails(CountryDetailsParams) returns (Country) {
  }
  // Suggest по городам. Если ничего не найдено - возвращает список городов по умолчанию (см. DefaultCityList)
  // Первый возвращаемый город - город, определённый по IP (если удалось)
  rpc SuggestCity(SuggestCityParams) returns (SuggestCityResponse) {
  }
  // Детали города (используется нормализация дадаты)
  rpc CityDetails(CityDetailsParams) returns (City) {
  }
  // Детали города по GeoID
  rpc CityDetailsByGeoID(CityDetailsByGeoIDParams) returns (City) {
  }
  // Метод возвращает список городов по-умолчанию, в зависимости от количества заказов
  rpc DefaultCityList(DefaultCityListParams) returns (SuggestCityResponse) {
  }
  // Определение города по IP (MaxMind & Dadata + cache)
  rpc CityDetailsByIP(CityDetailsByIPParams) returns (City) {
  }
  // Suggest по адресам
  rpc SuggestAddress(SuggestAddressParams) returns (SuggestAddressResponse) {
  }
  // Нормализация адреса
  rpc AddressDetails(AddressDetailsParams) returns (Address) {
  }
  // Детали адреса по GeoID
  rpc AddressDetailsByGeoID(AddressDetailsByGeoIDParams) returns (Address) {
  }
}

enum LocaleType {
  nil = 0;
  ru = 1;
  en = 2;
}

// Country ...
message SuggestCountryParams {
  LocaleType locale = 1;
  string     search = 2;
  int32      limit = 3;
  int32      offset = 4;
}

message SuggestCountryResponse {
  bool                    success = 1;
  int32                   total = 2;
  repeated SuggestCountry result = 3;
}

message SuggestCountry {
  string    iso_code = 1;
  string    title = 2;
  Continent continent = 3;
  Phone     phone = 4;
}

message CountryDetailsParams {
  LocaleType locale = 1;
  string     iso_code = 2;
}

message Country {
  string    iso_code = 1;
  string    title = 2;
  Continent continent = 3;
  Capital   capital = 4;
  string    postal_code_format = 5;
  string    currency_code = 6;
  Phone     phone = 7;
}

message Phone  {
  int32           prefix= 1;
  repeated string masks = 2;
  string          primary_mask = 3;
}

message Continent {
  string code = 1;
  string title = 2;
}

message Capital {
  string   title = 1;
  Location location = 2;
  string   postal_code = 3;
}

// City ...
message SuggestCityParams {
  LocaleType locale = 1;
  string     country_iso_code = 2;
  string     search = 3;
  int32      limit = 4;
  int32      offset = 5;
  string     ip = 6;
}

message SuggestCityResponse {
  bool                 success = 1;
  int32                total = 2;
  repeated SuggestCity result = 3;
}

message SuggestCity {
  string id = 1;
  string suggest = 2;
  string title = 3;
  string subtitle = 4;
  string type = 5;
}

message CityDetailsParams {
  LocaleType locale = 1;
  string     country_iso_code = 2;

  // для России передавать полученный suggest из SuggestCity. Метод использует нормализацию Dadata
  // для остальных передавать id
  string     query = 3;
}

message CityDetailsByGeoIDParams {
  LocaleType locale = 1;
  string     country_iso_code = 2;
  string     id = 3; // fiasID или geoID
}

message City {
  string         id = 1;
  string         title = 2;
  string         full_title = 3;
  string         country_iso_code = 4;
  string         postal_code = 5;
  string         type = 6;
  Region         region = 7;
  State          state = 8;
  Location       location = 9;
  CityAdditional additional = 10;
}

message State {
  string title = 1;
  string iso_code = 2;
}

message Region {
  string id = 1;
  string title = 2;
  string iso_code = 3;
  string type = 5;
}

message Location  {
  double latitude = 1;
  double longitude = 2;
}

message CityDetailsByIPParams {
  LocaleType locale = 1;
  string     ip = 2;
}

// Address ...
message SuggestAddressParams {
  LocaleType   locale = 1;
  string       country_iso_code = 2;
  string       city_id = 3;
  string       search = 4;
  int32        limit = 5;
  int32        offset = 6;
}

message SuggestAddressResponse {
  bool                    success = 1;
  int32                   total = 2;
  repeated SuggestAddress result = 3;
}

message SuggestAddress {
  string id = 1;  // fiasID или geoID
  string suggest = 2;
  string title = 3;
  string subtitle = 4;
  string query_for_details = 5;  // полная строка адреса, которую можно отправить в нормализацию
}

// нормализация
message AddressDetailsParams {
  LocaleType locale = 1;
  string     country_iso_code = 2;
  string     query = 3;
}

message AddressDetailsByGeoIDParams {
  LocaleType locale = 1;
  string     country_iso_code = 2;
  string     id = 3;
  string     city_id = 4;
}

message Address {
  // fias_id for dadata and place_id for google
  string            id = 1;
  string            country_iso_code = 2;
  Region            region = 3;
  State             state = 4;
  City              city = 5;
  string            street = 6;
  string            house = 7;
  string            block = 8;
  string            postal_code = 9;
  Location          location = 10;
  // fias_level for dadata
  AddressAdditional additional = 11;
}

message AddressAdditional {
  bool   is_in_mkad = 1;
  bool   is_in_kad = 2;
  string fias_level = 3;
}

message CityAdditional {
  string kladr_id = 1;
  bool   is_crimea = 2;
  string fias_level = 3;
}

message DefaultCityListParams {
  string ip = 1;
}
