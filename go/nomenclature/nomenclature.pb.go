// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: proto/nomenclature.proto

// Package product describes the gRPC interface of the product-go -ms microservice.
// Warning! it`s not equal internal/products

package nomenclature

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Pagination for Request to ms
type PaginationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *PaginationRequest) Reset() {
	*x = PaginationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationRequest) ProtoMessage() {}

func (x *PaginationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationRequest.ProtoReflect.Descriptor instead.
func (*PaginationRequest) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{0}
}

func (x *PaginationRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Pagination for Response to ms
type PaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total  int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PaginationResponse) Reset() {
	*x = PaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationResponse) ProtoMessage() {}

func (x *PaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationResponse.ProtoReflect.Descriptor instead.
func (*PaginationResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{1}
}

func (x *PaginationResponse) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PaginationResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Error
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target  string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Code    int64  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Error) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type NomenclatureDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleRu string `protobuf:"bytes,2,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
	TitleEn string `protobuf:"bytes,3,opt,name=title_en,json=titleEn,proto3" json:"title_en,omitempty"`
	// Поле используется только для размеров Size
	IsSampleSale bool `protobuf:"varint,4,opt,name=is_sample_sale,json=isSampleSale,proto3" json:"is_sample_sale,omitempty"`
}

func (x *NomenclatureDescription) Reset() {
	*x = NomenclatureDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NomenclatureDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NomenclatureDescription) ProtoMessage() {}

func (x *NomenclatureDescription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NomenclatureDescription.ProtoReflect.Descriptor instead.
func (*NomenclatureDescription) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{3}
}

func (x *NomenclatureDescription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NomenclatureDescription) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

func (x *NomenclatureDescription) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *NomenclatureDescription) GetIsSampleSale() bool {
	if x != nil {
		return x.IsSampleSale
	}
	return false
}

type SuperModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleRu      string `protobuf:"bytes,2,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
	TitleEn      string `protobuf:"bytes,3,opt,name=title_en,json=titleEn,proto3" json:"title_en,omitempty"`
	IsSampleSale bool   `protobuf:"varint,4,opt,name=is_sample_sale,json=isSampleSale,proto3" json:"is_sample_sale,omitempty"`
	MergingCode  string `protobuf:"bytes,5,opt,name=merging_code,json=mergingCode,proto3" json:"merging_code,omitempty"`
}

func (x *SuperModel) Reset() {
	*x = SuperModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperModel) ProtoMessage() {}

func (x *SuperModel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperModel.ProtoReflect.Descriptor instead.
func (*SuperModel) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{4}
}

func (x *SuperModel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SuperModel) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

func (x *SuperModel) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *SuperModel) GetIsSampleSale() bool {
	if x != nil {
		return x.IsSampleSale
	}
	return false
}

func (x *SuperModel) GetMergingCode() string {
	if x != nil {
		return x.MergingCode
	}
	return ""
}

type ColorDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleRu      string `protobuf:"bytes,2,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
	TitleEn      string `protobuf:"bytes,3,opt,name=title_en,json=titleEn,proto3" json:"title_en,omitempty"`
	IsSampleSale bool   `protobuf:"varint,4,opt,name=is_sample_sale,json=isSampleSale,proto3" json:"is_sample_sale,omitempty"`
	Hex          string `protobuf:"bytes,5,opt,name=hex,proto3" json:"hex,omitempty"`
}

func (x *ColorDescription) Reset() {
	*x = ColorDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorDescription) ProtoMessage() {}

func (x *ColorDescription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorDescription.ProtoReflect.Descriptor instead.
func (*ColorDescription) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{5}
}

func (x *ColorDescription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ColorDescription) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

func (x *ColorDescription) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *ColorDescription) GetIsSampleSale() bool {
	if x != nil {
		return x.IsSampleSale
	}
	return false
}

func (x *ColorDescription) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

type Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleRu      string              `protobuf:"bytes,2,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
	TitleEn      string              `protobuf:"bytes,3,opt,name=title_en,json=titleEn,proto3" json:"title_en,omitempty"`
	IsSampleSale bool                `protobuf:"varint,4,opt,name=is_sample_sale,json=isSampleSale,proto3" json:"is_sample_sale,omitempty"`
	Hex          string              `protobuf:"bytes,5,opt,name=hex,proto3" json:"hex,omitempty"`
	ColorGroups  []*ColorDescription `protobuf:"bytes,6,rep,name=color_groups,json=colorGroups,proto3" json:"color_groups,omitempty"`
}

func (x *Color) Reset() {
	*x = Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{6}
}

func (x *Color) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Color) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

func (x *Color) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *Color) GetIsSampleSale() bool {
	if x != nil {
		return x.IsSampleSale
	}
	return false
}

func (x *Color) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *Color) GetColorGroups() []*ColorDescription {
	if x != nil {
		return x.ColorGroups
	}
	return nil
}

type Capsules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ParentSeason string `protobuf:"bytes,3,opt,name=parent_season,json=parentSeason,proto3" json:"parent_season,omitempty"`
}

func (x *Capsules) Reset() {
	*x = Capsules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capsules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capsules) ProtoMessage() {}

func (x *Capsules) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capsules.ProtoReflect.Descriptor instead.
func (*Capsules) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{7}
}

func (x *Capsules) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Capsules) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Capsules) GetParentSeason() string {
	if x != nil {
		return x.ParentSeason
	}
	return ""
}

type Alt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source  string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Barcode string `protobuf:"bytes,2,opt,name=barcode,proto3" json:"barcode,omitempty"`
}

func (x *Alt) Reset() {
	*x = Alt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alt) ProtoMessage() {}

func (x *Alt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alt.ProtoReflect.Descriptor instead.
func (*Alt) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{8}
}

func (x *Alt) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Alt) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

type Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode        int64   `protobuf:"varint,1,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	CurrencyIso         string  `protobuf:"bytes,2,opt,name=currency_iso,json=currencyIso,proto3" json:"currency_iso,omitempty"`
	Price               int64   `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	PriceBeforeDiscount int64   `protobuf:"varint,4,opt,name=price_before_discount,json=priceBeforeDiscount,proto3" json:"price_before_discount,omitempty"`
	StoreCode           []int64 `protobuf:"varint,5,rep,packed,name=store_code,json=storeCode,proto3" json:"store_code,omitempty"`
}

func (x *Price) Reset() {
	*x = Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{9}
}

func (x *Price) GetCurrencyCode() int64 {
	if x != nil {
		return x.CurrencyCode
	}
	return 0
}

func (x *Price) GetCurrencyIso() string {
	if x != nil {
		return x.CurrencyIso
	}
	return ""
}

func (x *Price) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Price) GetPriceBeforeDiscount() int64 {
	if x != nil {
		return x.PriceBeforeDiscount
	}
	return 0
}

func (x *Price) GetStoreCode() []int64 {
	if x != nil {
		return x.StoreCode
	}
	return nil
}

type Size struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Barcode string                   `protobuf:"bytes,1,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Size    *NomenclatureDescription `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Alts    []*Alt                   `protobuf:"bytes,3,rep,name=alts,proto3" json:"alts,omitempty"`
	Prices  []*Price                 `protobuf:"bytes,4,rep,name=prices,proto3" json:"prices,omitempty"`
}

func (x *Size) Reset() {
	*x = Size{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Size) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Size) ProtoMessage() {}

func (x *Size) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Size.ProtoReflect.Descriptor instead.
func (*Size) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{10}
}

func (x *Size) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *Size) GetSize() *NomenclatureDescription {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *Size) GetAlts() []*Alt {
	if x != nil {
		return x.Alts
	}
	return nil
}

func (x *Size) GetPrices() []*Price {
	if x != nil {
		return x.Prices
	}
	return nil
}

type Maintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Alias             *string `protobuf:"bytes,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	TitleRu           *string `protobuf:"bytes,3,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	TitleEn           *string `protobuf:"bytes,4,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	Video             *string `protobuf:"bytes,5,opt,name=video,proto3,oneof" json:"video,omitempty"`
	VideoPreview      *string `protobuf:"bytes,6,opt,name=video_preview,json=videoPreview,proto3,oneof" json:"video_preview,omitempty"`
	VideoSmall        *string `protobuf:"bytes,7,opt,name=video_small,json=videoSmall,proto3,oneof" json:"video_small,omitempty"`
	VideoPreviewSmall *string `protobuf:"bytes,8,opt,name=video_preview_small,json=videoPreviewSmall,proto3,oneof" json:"video_preview_small,omitempty"`
	DetailsUrl        *string `protobuf:"bytes,9,opt,name=details_url,json=detailsUrl,proto3,oneof" json:"details_url,omitempty"`
	CreatedAt         string  `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         string  `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt         *string `protobuf:"bytes,12,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *Maintenance) Reset() {
	*x = Maintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Maintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maintenance) ProtoMessage() {}

func (x *Maintenance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maintenance.ProtoReflect.Descriptor instead.
func (*Maintenance) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{11}
}

func (x *Maintenance) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Maintenance) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *Maintenance) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *Maintenance) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *Maintenance) GetVideo() string {
	if x != nil && x.Video != nil {
		return *x.Video
	}
	return ""
}

func (x *Maintenance) GetVideoPreview() string {
	if x != nil && x.VideoPreview != nil {
		return *x.VideoPreview
	}
	return ""
}

func (x *Maintenance) GetVideoSmall() string {
	if x != nil && x.VideoSmall != nil {
		return *x.VideoSmall
	}
	return ""
}

func (x *Maintenance) GetVideoPreviewSmall() string {
	if x != nil && x.VideoPreviewSmall != nil {
		return *x.VideoPreviewSmall
	}
	return ""
}

func (x *Maintenance) GetDetailsUrl() string {
	if x != nil && x.DetailsUrl != nil {
		return *x.DetailsUrl
	}
	return ""
}

func (x *Maintenance) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Maintenance) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Maintenance) GetDeletedAt() string {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return ""
}

type UpdateMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Alias             *string `protobuf:"bytes,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	TitleRu           *string `protobuf:"bytes,3,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	TitleEn           *string `protobuf:"bytes,4,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	Video             *string `protobuf:"bytes,5,opt,name=video,proto3,oneof" json:"video,omitempty"`
	VideoPreview      *string `protobuf:"bytes,6,opt,name=video_preview,json=videoPreview,proto3,oneof" json:"video_preview,omitempty"`
	VideoSmall        *string `protobuf:"bytes,7,opt,name=video_small,json=videoSmall,proto3,oneof" json:"video_small,omitempty"`
	VideoPreviewSmall *string `protobuf:"bytes,8,opt,name=video_preview_small,json=videoPreviewSmall,proto3,oneof" json:"video_preview_small,omitempty"`
	DetailsUrl        *string `protobuf:"bytes,9,opt,name=details_url,json=detailsUrl,proto3,oneof" json:"details_url,omitempty"`
	DeletedAt         *string `protobuf:"bytes,12,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *UpdateMaintenance) Reset() {
	*x = UpdateMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMaintenance) ProtoMessage() {}

func (x *UpdateMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMaintenance.ProtoReflect.Descriptor instead.
func (*UpdateMaintenance) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateMaintenance) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateMaintenance) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *UpdateMaintenance) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *UpdateMaintenance) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *UpdateMaintenance) GetVideo() string {
	if x != nil && x.Video != nil {
		return *x.Video
	}
	return ""
}

func (x *UpdateMaintenance) GetVideoPreview() string {
	if x != nil && x.VideoPreview != nil {
		return *x.VideoPreview
	}
	return ""
}

func (x *UpdateMaintenance) GetVideoSmall() string {
	if x != nil && x.VideoSmall != nil {
		return *x.VideoSmall
	}
	return ""
}

func (x *UpdateMaintenance) GetVideoPreviewSmall() string {
	if x != nil && x.VideoPreviewSmall != nil {
		return *x.VideoPreviewSmall
	}
	return ""
}

func (x *UpdateMaintenance) GetDetailsUrl() string {
	if x != nil && x.DetailsUrl != nil {
		return *x.DetailsUrl
	}
	return ""
}

func (x *UpdateMaintenance) GetDeletedAt() string {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return ""
}

type SetNullMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Alias             *bool `protobuf:"varint,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	TitleRu           *bool `protobuf:"varint,3,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	TitleEn           *bool `protobuf:"varint,4,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	Video             *bool `protobuf:"varint,5,opt,name=video,proto3,oneof" json:"video,omitempty"`
	VideoPreview      *bool `protobuf:"varint,6,opt,name=video_preview,json=videoPreview,proto3,oneof" json:"video_preview,omitempty"`
	VideoSmall        *bool `protobuf:"varint,7,opt,name=video_small,json=videoSmall,proto3,oneof" json:"video_small,omitempty"`
	VideoPreviewSmall *bool `protobuf:"varint,8,opt,name=video_preview_small,json=videoPreviewSmall,proto3,oneof" json:"video_preview_small,omitempty"`
	DetailsUrl        *bool `protobuf:"varint,9,opt,name=details_url,json=detailsUrl,proto3,oneof" json:"details_url,omitempty"`
	DeletedAt         *bool `protobuf:"varint,12,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *SetNullMaintenance) Reset() {
	*x = SetNullMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullMaintenance) ProtoMessage() {}

func (x *SetNullMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullMaintenance.ProtoReflect.Descriptor instead.
func (*SetNullMaintenance) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{13}
}

func (x *SetNullMaintenance) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetNullMaintenance) GetAlias() bool {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return false
}

func (x *SetNullMaintenance) GetTitleRu() bool {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return false
}

func (x *SetNullMaintenance) GetTitleEn() bool {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return false
}

func (x *SetNullMaintenance) GetVideo() bool {
	if x != nil && x.Video != nil {
		return *x.Video
	}
	return false
}

func (x *SetNullMaintenance) GetVideoPreview() bool {
	if x != nil && x.VideoPreview != nil {
		return *x.VideoPreview
	}
	return false
}

func (x *SetNullMaintenance) GetVideoSmall() bool {
	if x != nil && x.VideoSmall != nil {
		return *x.VideoSmall
	}
	return false
}

func (x *SetNullMaintenance) GetVideoPreviewSmall() bool {
	if x != nil && x.VideoPreviewSmall != nil {
		return *x.VideoPreviewSmall
	}
	return false
}

func (x *SetNullMaintenance) GetDetailsUrl() bool {
	if x != nil && x.DetailsUrl != nil {
		return *x.DetailsUrl
	}
	return false
}

func (x *SetNullMaintenance) GetDeletedAt() bool {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return false
}

type MaintenanceithoutID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias             *string `protobuf:"bytes,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	TitleRu           *string `protobuf:"bytes,3,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	TitleEn           *string `protobuf:"bytes,4,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	Video             *string `protobuf:"bytes,5,opt,name=video,proto3,oneof" json:"video,omitempty"`
	VideoPreview      *string `protobuf:"bytes,6,opt,name=video_preview,json=videoPreview,proto3,oneof" json:"video_preview,omitempty"`
	VideoSmall        *string `protobuf:"bytes,7,opt,name=video_small,json=videoSmall,proto3,oneof" json:"video_small,omitempty"`
	VideoPreviewSmall *string `protobuf:"bytes,8,opt,name=video_preview_small,json=videoPreviewSmall,proto3,oneof" json:"video_preview_small,omitempty"`
	DetailsUrl        *string `protobuf:"bytes,9,opt,name=details_url,json=detailsUrl,proto3,oneof" json:"details_url,omitempty"`
	DeletedAt         *string `protobuf:"bytes,12,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *MaintenanceithoutID) Reset() {
	*x = MaintenanceithoutID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaintenanceithoutID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaintenanceithoutID) ProtoMessage() {}

func (x *MaintenanceithoutID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaintenanceithoutID.ProtoReflect.Descriptor instead.
func (*MaintenanceithoutID) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{14}
}

func (x *MaintenanceithoutID) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *MaintenanceithoutID) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *MaintenanceithoutID) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *MaintenanceithoutID) GetVideo() string {
	if x != nil && x.Video != nil {
		return *x.Video
	}
	return ""
}

func (x *MaintenanceithoutID) GetVideoPreview() string {
	if x != nil && x.VideoPreview != nil {
		return *x.VideoPreview
	}
	return ""
}

func (x *MaintenanceithoutID) GetVideoSmall() string {
	if x != nil && x.VideoSmall != nil {
		return *x.VideoSmall
	}
	return ""
}

func (x *MaintenanceithoutID) GetVideoPreviewSmall() string {
	if x != nil && x.VideoPreviewSmall != nil {
		return *x.VideoPreviewSmall
	}
	return ""
}

func (x *MaintenanceithoutID) GetDetailsUrl() string {
	if x != nil && x.DetailsUrl != nil {
		return *x.DetailsUrl
	}
	return ""
}

func (x *MaintenanceithoutID) GetDeletedAt() string {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return ""
}

type Nomenclature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid                 string                   `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Article              string                   `protobuf:"bytes,2,opt,name=article,proto3" json:"article,omitempty"`
	TitleRu              string                   `protobuf:"bytes,3,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
	IsActive             bool                     `protobuf:"varint,4,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	StartOnlineSaleDate  string                   `protobuf:"bytes,5,opt,name=start_online_sale_date,json=startOnlineSaleDate,proto3" json:"start_online_sale_date,omitempty"`
	StartOfflineSaleDate string                   `protobuf:"bytes,6,opt,name=start_offline_sale_date,json=startOfflineSaleDate,proto3" json:"start_offline_sale_date,omitempty"`
	Category             string                   `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	Gender               string                   `protobuf:"bytes,8,opt,name=gender,proto3" json:"gender,omitempty"`
	Url                  string                   `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Fabric               *NomenclatureDescription `protobuf:"bytes,10,opt,name=fabric,proto3" json:"fabric,omitempty"`
	Family               *NomenclatureDescription `protobuf:"bytes,11,opt,name=family,proto3" json:"family,omitempty"`
	ColorModel           *NomenclatureDescription `protobuf:"bytes,12,opt,name=color_model,json=colorModel,proto3" json:"color_model,omitempty"`
	SuperModel           *SuperModel              `protobuf:"bytes,13,opt,name=super_model,json=superModel,proto3" json:"super_model,omitempty"`
	Color                *Color                   `protobuf:"bytes,14,opt,name=color,proto3" json:"color,omitempty"`
	Capsules             *Capsules                `protobuf:"bytes,16,opt,name=capsules,proto3" json:"capsules,omitempty"`
	IsEcological         bool                     `protobuf:"varint,17,opt,name=is_ecological,json=isEcological,proto3" json:"is_ecological,omitempty"`
	PillingGrade         string                   `protobuf:"bytes,18,opt,name=pilling_grade,json=pillingGrade,proto3" json:"pilling_grade,omitempty"`
	Maintenance          *Maintenance             `protobuf:"bytes,19,opt,name=maintenance,proto3" json:"maintenance,omitempty"`
	Sizes                []*Size                  `protobuf:"bytes,15,rep,name=sizes,proto3" json:"sizes,omitempty"`
}

func (x *Nomenclature) Reset() {
	*x = Nomenclature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nomenclature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nomenclature) ProtoMessage() {}

func (x *Nomenclature) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nomenclature.ProtoReflect.Descriptor instead.
func (*Nomenclature) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{15}
}

func (x *Nomenclature) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *Nomenclature) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *Nomenclature) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

func (x *Nomenclature) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Nomenclature) GetStartOnlineSaleDate() string {
	if x != nil {
		return x.StartOnlineSaleDate
	}
	return ""
}

func (x *Nomenclature) GetStartOfflineSaleDate() string {
	if x != nil {
		return x.StartOfflineSaleDate
	}
	return ""
}

func (x *Nomenclature) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Nomenclature) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Nomenclature) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Nomenclature) GetFabric() *NomenclatureDescription {
	if x != nil {
		return x.Fabric
	}
	return nil
}

func (x *Nomenclature) GetFamily() *NomenclatureDescription {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *Nomenclature) GetColorModel() *NomenclatureDescription {
	if x != nil {
		return x.ColorModel
	}
	return nil
}

func (x *Nomenclature) GetSuperModel() *SuperModel {
	if x != nil {
		return x.SuperModel
	}
	return nil
}

func (x *Nomenclature) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Nomenclature) GetCapsules() *Capsules {
	if x != nil {
		return x.Capsules
	}
	return nil
}

func (x *Nomenclature) GetIsEcological() bool {
	if x != nil {
		return x.IsEcological
	}
	return false
}

func (x *Nomenclature) GetPillingGrade() string {
	if x != nil {
		return x.PillingGrade
	}
	return ""
}

func (x *Nomenclature) GetMaintenance() *Maintenance {
	if x != nil {
		return x.Maintenance
	}
	return nil
}

func (x *Nomenclature) GetSizes() []*Size {
	if x != nil {
		return x.Sizes
	}
	return nil
}

type PhotoModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Growth     int32   `protobuf:"varint,3,opt,name=growth,proto3" json:"growth,omitempty"`
	Bust       int32   `protobuf:"varint,4,opt,name=bust,proto3" json:"bust,omitempty"`
	Waist      int32   `protobuf:"varint,5,opt,name=waist,proto3" json:"waist,omitempty"`
	Hips       int32   `protobuf:"varint,6,opt,name=hips,proto3" json:"hips,omitempty"`
	IsModelXl  bool    `protobuf:"varint,7,opt,name=is_model_xl,json=isModelXl,proto3" json:"is_model_xl,omitempty"`
	ImageFiles *string `protobuf:"bytes,8,opt,name=image_files,json=imageFiles,proto3,oneof" json:"image_files,omitempty"`
	CreatedAt  string  `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  string  `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PhotoModel) Reset() {
	*x = PhotoModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoModel) ProtoMessage() {}

func (x *PhotoModel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoModel.ProtoReflect.Descriptor instead.
func (*PhotoModel) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{16}
}

func (x *PhotoModel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PhotoModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PhotoModel) GetGrowth() int32 {
	if x != nil {
		return x.Growth
	}
	return 0
}

func (x *PhotoModel) GetBust() int32 {
	if x != nil {
		return x.Bust
	}
	return 0
}

func (x *PhotoModel) GetWaist() int32 {
	if x != nil {
		return x.Waist
	}
	return 0
}

func (x *PhotoModel) GetHips() int32 {
	if x != nil {
		return x.Hips
	}
	return 0
}

func (x *PhotoModel) GetIsModelXl() bool {
	if x != nil {
		return x.IsModelXl
	}
	return false
}

func (x *PhotoModel) GetImageFiles() string {
	if x != nil && x.ImageFiles != nil {
		return *x.ImageFiles
	}
	return ""
}

func (x *PhotoModel) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *PhotoModel) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type UpdatePhotoModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Growth     *int32  `protobuf:"varint,3,opt,name=growth,proto3,oneof" json:"growth,omitempty"`
	Bust       *int32  `protobuf:"varint,4,opt,name=bust,proto3,oneof" json:"bust,omitempty"`
	Waist      *int32  `protobuf:"varint,5,opt,name=waist,proto3,oneof" json:"waist,omitempty"`
	Hips       *int32  `protobuf:"varint,6,opt,name=hips,proto3,oneof" json:"hips,omitempty"`
	IsModelXl  *bool   `protobuf:"varint,7,opt,name=is_model_xl,json=isModelXl,proto3,oneof" json:"is_model_xl,omitempty"`
	ImageFiles *string `protobuf:"bytes,8,opt,name=image_files,json=imageFiles,proto3,oneof" json:"image_files,omitempty"`
}

func (x *UpdatePhotoModel) Reset() {
	*x = UpdatePhotoModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePhotoModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePhotoModel) ProtoMessage() {}

func (x *UpdatePhotoModel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePhotoModel.ProtoReflect.Descriptor instead.
func (*UpdatePhotoModel) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{17}
}

func (x *UpdatePhotoModel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePhotoModel) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdatePhotoModel) GetGrowth() int32 {
	if x != nil && x.Growth != nil {
		return *x.Growth
	}
	return 0
}

func (x *UpdatePhotoModel) GetBust() int32 {
	if x != nil && x.Bust != nil {
		return *x.Bust
	}
	return 0
}

func (x *UpdatePhotoModel) GetWaist() int32 {
	if x != nil && x.Waist != nil {
		return *x.Waist
	}
	return 0
}

func (x *UpdatePhotoModel) GetHips() int32 {
	if x != nil && x.Hips != nil {
		return *x.Hips
	}
	return 0
}

func (x *UpdatePhotoModel) GetIsModelXl() bool {
	if x != nil && x.IsModelXl != nil {
		return *x.IsModelXl
	}
	return false
}

func (x *UpdatePhotoModel) GetImageFiles() string {
	if x != nil && x.ImageFiles != nil {
		return *x.ImageFiles
	}
	return ""
}

type SetNullPhotoModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ImageFiles *bool `protobuf:"varint,2,opt,name=image_files,json=imageFiles,proto3,oneof" json:"image_files,omitempty"`
}

func (x *SetNullPhotoModel) Reset() {
	*x = SetNullPhotoModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullPhotoModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullPhotoModel) ProtoMessage() {}

func (x *SetNullPhotoModel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullPhotoModel.ProtoReflect.Descriptor instead.
func (*SetNullPhotoModel) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{18}
}

func (x *SetNullPhotoModel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetNullPhotoModel) GetImageFiles() bool {
	if x != nil && x.ImageFiles != nil {
		return *x.ImageFiles
	}
	return false
}

type PhotoModelWithoutID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Growth     int32  `protobuf:"varint,2,opt,name=growth,proto3" json:"growth,omitempty"`
	Bust       int32  `protobuf:"varint,3,opt,name=bust,proto3" json:"bust,omitempty"`
	Waist      int32  `protobuf:"varint,4,opt,name=waist,proto3" json:"waist,omitempty"`
	Hips       int32  `protobuf:"varint,5,opt,name=hips,proto3" json:"hips,omitempty"`
	IsModelXl  bool   `protobuf:"varint,6,opt,name=is_model_xl,json=isModelXl,proto3" json:"is_model_xl,omitempty"`
	ImageFiles string `protobuf:"bytes,7,opt,name=image_files,json=imageFiles,proto3" json:"image_files,omitempty"`
	CreatedAt  string `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  string `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PhotoModelWithoutID) Reset() {
	*x = PhotoModelWithoutID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoModelWithoutID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoModelWithoutID) ProtoMessage() {}

func (x *PhotoModelWithoutID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoModelWithoutID.ProtoReflect.Descriptor instead.
func (*PhotoModelWithoutID) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{19}
}

func (x *PhotoModelWithoutID) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PhotoModelWithoutID) GetGrowth() int32 {
	if x != nil {
		return x.Growth
	}
	return 0
}

func (x *PhotoModelWithoutID) GetBust() int32 {
	if x != nil {
		return x.Bust
	}
	return 0
}

func (x *PhotoModelWithoutID) GetWaist() int32 {
	if x != nil {
		return x.Waist
	}
	return 0
}

func (x *PhotoModelWithoutID) GetHips() int32 {
	if x != nil {
		return x.Hips
	}
	return 0
}

func (x *PhotoModelWithoutID) GetIsModelXl() bool {
	if x != nil {
		return x.IsModelXl
	}
	return false
}

func (x *PhotoModelWithoutID) GetImageFiles() string {
	if x != nil {
		return x.ImageFiles
	}
	return ""
}

func (x *PhotoModelWithoutID) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *PhotoModelWithoutID) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type DictionarySize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	State       *int32 `protobuf:"varint,4,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile *int32 `protobuf:"varint,5,opt,name=state_mobile,json=stateMobile,proto3,oneof" json:"state_mobile,omitempty"`
	Order       int32  `protobuf:"varint,6,opt,name=order,proto3" json:"order,omitempty"`
	CreatedAt   string `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   string `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *DictionarySize) Reset() {
	*x = DictionarySize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DictionarySize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionarySize) ProtoMessage() {}

func (x *DictionarySize) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionarySize.ProtoReflect.Descriptor instead.
func (*DictionarySize) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{20}
}

func (x *DictionarySize) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *DictionarySize) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DictionarySize) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DictionarySize) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *DictionarySize) GetStateMobile() int32 {
	if x != nil && x.StateMobile != nil {
		return *x.StateMobile
	}
	return 0
}

func (x *DictionarySize) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *DictionarySize) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DictionarySize) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type UpdateDictionarySize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        string  `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Title       *string `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Type        *string `protobuf:"bytes,3,opt,name=type,proto3,oneof" json:"type,omitempty"`
	State       *int32  `protobuf:"varint,4,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile *int32  `protobuf:"varint,5,opt,name=state_mobile,json=stateMobile,proto3,oneof" json:"state_mobile,omitempty"`
	Order       *int32  `protobuf:"varint,6,opt,name=order,proto3,oneof" json:"order,omitempty"`
}

func (x *UpdateDictionarySize) Reset() {
	*x = UpdateDictionarySize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDictionarySize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDictionarySize) ProtoMessage() {}

func (x *UpdateDictionarySize) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDictionarySize.ProtoReflect.Descriptor instead.
func (*UpdateDictionarySize) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateDictionarySize) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *UpdateDictionarySize) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdateDictionarySize) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *UpdateDictionarySize) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *UpdateDictionarySize) GetStateMobile() int32 {
	if x != nil && x.StateMobile != nil {
		return *x.StateMobile
	}
	return 0
}

func (x *UpdateDictionarySize) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

type SetNullDictionarySize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	State       *bool  `protobuf:"varint,2,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile *bool  `protobuf:"varint,3,opt,name=state_mobile,json=stateMobile,proto3,oneof" json:"state_mobile,omitempty"`
}

func (x *SetNullDictionarySize) Reset() {
	*x = SetNullDictionarySize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullDictionarySize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullDictionarySize) ProtoMessage() {}

func (x *SetNullDictionarySize) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullDictionarySize.ProtoReflect.Descriptor instead.
func (*SetNullDictionarySize) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{22}
}

func (x *SetNullDictionarySize) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *SetNullDictionarySize) GetState() bool {
	if x != nil && x.State != nil {
		return *x.State
	}
	return false
}

func (x *SetNullDictionarySize) GetStateMobile() bool {
	if x != nil && x.StateMobile != nil {
		return *x.StateMobile
	}
	return false
}

type DictionarySizeWithoutGUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	State       *int32 `protobuf:"varint,3,opt,name=state,proto3,oneof" json:"state,omitempty"`
	StateMobile *int32 `protobuf:"varint,4,opt,name=state_mobile,json=stateMobile,proto3,oneof" json:"state_mobile,omitempty"`
	Order       int32  `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	CreatedAt   string `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   string `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *DictionarySizeWithoutGUID) Reset() {
	*x = DictionarySizeWithoutGUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DictionarySizeWithoutGUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionarySizeWithoutGUID) ProtoMessage() {}

func (x *DictionarySizeWithoutGUID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionarySizeWithoutGUID.ProtoReflect.Descriptor instead.
func (*DictionarySizeWithoutGUID) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{23}
}

func (x *DictionarySizeWithoutGUID) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DictionarySizeWithoutGUID) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DictionarySizeWithoutGUID) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *DictionarySizeWithoutGUID) GetStateMobile() int32 {
	if x != nil && x.StateMobile != nil {
		return *x.StateMobile
	}
	return 0
}

func (x *DictionarySizeWithoutGUID) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *DictionarySizeWithoutGUID) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DictionarySizeWithoutGUID) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type GetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetListRequest) Reset() {
	*x = GetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListRequest) ProtoMessage() {}

func (x *GetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListRequest.ProtoReflect.Descriptor instead.
func (*GetListRequest) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{24}
}

func (x *GetListRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetNomenclatureListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*Nomenclature     `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNomenclatureListResponse) Reset() {
	*x = GetNomenclatureListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNomenclatureListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNomenclatureListResponse) ProtoMessage() {}

func (x *GetNomenclatureListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNomenclatureListResponse.ProtoReflect.Descriptor instead.
func (*GetNomenclatureListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{25}
}

func (x *GetNomenclatureListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetNomenclatureListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNomenclatureListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetNomenclatureListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNomenclatureListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetNomenclatureListResponse) GetData() []*Nomenclature {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetNomenclatureByArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Article string `protobuf:"bytes,1,opt,name=article,proto3" json:"article,omitempty"`
}

func (x *GetNomenclatureByArticleRequest) Reset() {
	*x = GetNomenclatureByArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNomenclatureByArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNomenclatureByArticleRequest) ProtoMessage() {}

func (x *GetNomenclatureByArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNomenclatureByArticleRequest.ProtoReflect.Descriptor instead.
func (*GetNomenclatureByArticleRequest) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{26}
}

func (x *GetNomenclatureByArticleRequest) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

type GetNomenclatureByArticleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Nomenclature `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64         `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error      `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetNomenclatureByArticleResponse) Reset() {
	*x = GetNomenclatureByArticleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNomenclatureByArticleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNomenclatureByArticleResponse) ProtoMessage() {}

func (x *GetNomenclatureByArticleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNomenclatureByArticleResponse.ProtoReflect.Descriptor instead.
func (*GetNomenclatureByArticleResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{27}
}

func (x *GetNomenclatureByArticleResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetNomenclatureByArticleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetNomenclatureByArticleResponse) GetData() *Nomenclature {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetNomenclatureByArticleResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNomenclatureByArticleResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetPhotoModelListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*PhotoModel       `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPhotoModelListResponse) Reset() {
	*x = GetPhotoModelListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPhotoModelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPhotoModelListResponse) ProtoMessage() {}

func (x *GetPhotoModelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPhotoModelListResponse.ProtoReflect.Descriptor instead.
func (*GetPhotoModelListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{28}
}

func (x *GetPhotoModelListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetPhotoModelListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPhotoModelListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetPhotoModelListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPhotoModelListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetPhotoModelListResponse) GetData() []*PhotoModel {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetByIDRequest) Reset() {
	*x = GetByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDRequest) ProtoMessage() {}

func (x *GetByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDRequest.ProtoReflect.Descriptor instead.
func (*GetByIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{29}
}

func (x *GetByIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetByGUIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *GetByGUIDRequest) Reset() {
	*x = GetByGUIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByGUIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByGUIDRequest) ProtoMessage() {}

func (x *GetByGUIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByGUIDRequest.ProtoReflect.Descriptor instead.
func (*GetByGUIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{30}
}

func (x *GetByGUIDRequest) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

type GetPhotoModelByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *PhotoModel `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64       `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error    `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetPhotoModelByIDResponse) Reset() {
	*x = GetPhotoModelByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPhotoModelByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPhotoModelByIDResponse) ProtoMessage() {}

func (x *GetPhotoModelByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPhotoModelByIDResponse.ProtoReflect.Descriptor instead.
func (*GetPhotoModelByIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{31}
}

func (x *GetPhotoModelByIDResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetPhotoModelByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPhotoModelByIDResponse) GetData() *PhotoModel {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetPhotoModelByIDResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPhotoModelByIDResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetDictionarySizeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*DictionarySize   `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDictionarySizeListResponse) Reset() {
	*x = GetDictionarySizeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionarySizeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionarySizeListResponse) ProtoMessage() {}

func (x *GetDictionarySizeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionarySizeListResponse.ProtoReflect.Descriptor instead.
func (*GetDictionarySizeListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{32}
}

func (x *GetDictionarySizeListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetDictionarySizeListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDictionarySizeListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetDictionarySizeListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDictionarySizeListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetDictionarySizeListResponse) GetData() []*DictionarySize {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDictionarySizeByGUIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *DictionarySize `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64           `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error        `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetDictionarySizeByGUIDResponse) Reset() {
	*x = GetDictionarySizeByGUIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionarySizeByGUIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionarySizeByGUIDResponse) ProtoMessage() {}

func (x *GetDictionarySizeByGUIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionarySizeByGUIDResponse.ProtoReflect.Descriptor instead.
func (*GetDictionarySizeByGUIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{33}
}

func (x *GetDictionarySizeByGUIDResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetDictionarySizeByGUIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDictionarySizeByGUIDResponse) GetData() *DictionarySize {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetDictionarySizeByGUIDResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDictionarySizeByGUIDResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetMaintenanceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*Maintenance      `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetMaintenanceListResponse) Reset() {
	*x = GetMaintenanceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaintenanceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaintenanceListResponse) ProtoMessage() {}

func (x *GetMaintenanceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaintenanceListResponse.ProtoReflect.Descriptor instead.
func (*GetMaintenanceListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{34}
}

func (x *GetMaintenanceListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetMaintenanceListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetMaintenanceListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetMaintenanceListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetMaintenanceListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetMaintenanceListResponse) GetData() []*Maintenance {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetMaintenanceByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Maintenance `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64        `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error     `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetMaintenanceByIDResponse) Reset() {
	*x = GetMaintenanceByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaintenanceByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaintenanceByIDResponse) ProtoMessage() {}

func (x *GetMaintenanceByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaintenanceByIDResponse.ProtoReflect.Descriptor instead.
func (*GetMaintenanceByIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{35}
}

func (x *GetMaintenanceByIDResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetMaintenanceByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetMaintenanceByIDResponse) GetData() *Maintenance {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetMaintenanceByIDResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetMaintenanceByIDResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type QuickProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid    string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Article string `protobuf:"bytes,2,opt,name=article,proto3" json:"article,omitempty"`
}

func (x *QuickProduct) Reset() {
	*x = QuickProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickProduct) ProtoMessage() {}

func (x *QuickProduct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickProduct.ProtoReflect.Descriptor instead.
func (*QuickProduct) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{36}
}

func (x *QuickProduct) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *QuickProduct) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

type QuickMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TitleRu      *string         `protobuf:"bytes,2,opt,name=title_ru,json=titleRu,proto3,oneof" json:"title_ru,omitempty"`
	TitleEn      *string         `protobuf:"bytes,3,opt,name=title_en,json=titleEn,proto3,oneof" json:"title_en,omitempty"`
	ProductsList []*QuickProduct `protobuf:"bytes,4,rep,name=products_list,json=productsList,proto3" json:"products_list,omitempty"`
}

func (x *QuickMaintenance) Reset() {
	*x = QuickMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickMaintenance) ProtoMessage() {}

func (x *QuickMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickMaintenance.ProtoReflect.Descriptor instead.
func (*QuickMaintenance) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{37}
}

func (x *QuickMaintenance) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuickMaintenance) GetTitleRu() string {
	if x != nil && x.TitleRu != nil {
		return *x.TitleRu
	}
	return ""
}

func (x *QuickMaintenance) GetTitleEn() string {
	if x != nil && x.TitleEn != nil {
		return *x.TitleEn
	}
	return ""
}

func (x *QuickMaintenance) GetProductsList() []*QuickProduct {
	if x != nil {
		return x.ProductsList
	}
	return nil
}

type GetListProductsToMaintenanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*QuickMaintenance `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetListProductsToMaintenanceResponse) Reset() {
	*x = GetListProductsToMaintenanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListProductsToMaintenanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListProductsToMaintenanceResponse) ProtoMessage() {}

func (x *GetListProductsToMaintenanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListProductsToMaintenanceResponse.ProtoReflect.Descriptor instead.
func (*GetListProductsToMaintenanceResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{38}
}

func (x *GetListProductsToMaintenanceResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetListProductsToMaintenanceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetListProductsToMaintenanceResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetListProductsToMaintenanceResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetListProductsToMaintenanceResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetListProductsToMaintenanceResponse) GetData() []*QuickMaintenance {
	if x != nil {
		return x.Data
	}
	return nil
}

type QuickProductWithTitleRU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid    string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Article string `protobuf:"bytes,2,opt,name=article,proto3" json:"article,omitempty"`
	TitleRu string `protobuf:"bytes,3,opt,name=title_ru,json=titleRu,proto3" json:"title_ru,omitempty"`
}

func (x *QuickProductWithTitleRU) Reset() {
	*x = QuickProductWithTitleRU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickProductWithTitleRU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickProductWithTitleRU) ProtoMessage() {}

func (x *QuickProductWithTitleRU) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickProductWithTitleRU.ProtoReflect.Descriptor instead.
func (*QuickProductWithTitleRU) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{39}
}

func (x *QuickProductWithTitleRU) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *QuickProductWithTitleRU) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *QuickProductWithTitleRU) GetTitleRu() string {
	if x != nil {
		return x.TitleRu
	}
	return ""
}

type ProductOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type            string                   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	CreatedAtCoef   int32                    `protobuf:"varint,3,opt,name=created_at_coef,json=createdAtCoef,proto3" json:"created_at_coef,omitempty"`
	Views           int32                    `protobuf:"varint,4,opt,name=views,proto3" json:"views,omitempty"`
	Subscriptions   int32                    `protobuf:"varint,5,opt,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	CartAdds        int32                    `protobuf:"varint,6,opt,name=cart_adds,json=cartAdds,proto3" json:"cart_adds,omitempty"`
	Buys            int32                    `protobuf:"varint,7,opt,name=buys,proto3" json:"buys,omitempty"`
	AvailStocks     int32                    `protobuf:"varint,8,opt,name=avail_stocks,json=availStocks,proto3" json:"avail_stocks,omitempty"`
	AvailSizes      string                   `protobuf:"bytes,9,opt,name=avail_sizes,json=availSizes,proto3" json:"avail_sizes,omitempty"`
	AttributeCoef   string                   `protobuf:"bytes,10,opt,name=attribute_coef,json=attributeCoef,proto3" json:"attribute_coef,omitempty"`
	ReductionFactor string                   `protobuf:"bytes,11,opt,name=reduction_factor,json=reductionFactor,proto3" json:"reduction_factor,omitempty"`
	IsSetManual     bool                     `protobuf:"varint,12,opt,name=is_set_manual,json=isSetManual,proto3" json:"is_set_manual,omitempty"`
	TotalWeight     int32                    `protobuf:"varint,13,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	Product         *QuickProductWithTitleRU `protobuf:"bytes,14,opt,name=product,proto3" json:"product,omitempty"`
	CreatedAt       string                   `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       string                   `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt       *string                  `protobuf:"bytes,17,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *ProductOrder) Reset() {
	*x = ProductOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductOrder) ProtoMessage() {}

func (x *ProductOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductOrder.ProtoReflect.Descriptor instead.
func (*ProductOrder) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{40}
}

func (x *ProductOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductOrder) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProductOrder) GetCreatedAtCoef() int32 {
	if x != nil {
		return x.CreatedAtCoef
	}
	return 0
}

func (x *ProductOrder) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *ProductOrder) GetSubscriptions() int32 {
	if x != nil {
		return x.Subscriptions
	}
	return 0
}

func (x *ProductOrder) GetCartAdds() int32 {
	if x != nil {
		return x.CartAdds
	}
	return 0
}

func (x *ProductOrder) GetBuys() int32 {
	if x != nil {
		return x.Buys
	}
	return 0
}

func (x *ProductOrder) GetAvailStocks() int32 {
	if x != nil {
		return x.AvailStocks
	}
	return 0
}

func (x *ProductOrder) GetAvailSizes() string {
	if x != nil {
		return x.AvailSizes
	}
	return ""
}

func (x *ProductOrder) GetAttributeCoef() string {
	if x != nil {
		return x.AttributeCoef
	}
	return ""
}

func (x *ProductOrder) GetReductionFactor() string {
	if x != nil {
		return x.ReductionFactor
	}
	return ""
}

func (x *ProductOrder) GetIsSetManual() bool {
	if x != nil {
		return x.IsSetManual
	}
	return false
}

func (x *ProductOrder) GetTotalWeight() int32 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *ProductOrder) GetProduct() *QuickProductWithTitleRU {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *ProductOrder) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ProductOrder) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ProductOrder) GetDeletedAt() string {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return ""
}

type ProductOrderWithoutID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            string                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	CreatedAtCoef   int32                    `protobuf:"varint,2,opt,name=created_at_coef,json=createdAtCoef,proto3" json:"created_at_coef,omitempty"`
	Views           int32                    `protobuf:"varint,3,opt,name=views,proto3" json:"views,omitempty"`
	Subscriptions   int32                    `protobuf:"varint,4,opt,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	CartAdds        int32                    `protobuf:"varint,5,opt,name=cart_adds,json=cartAdds,proto3" json:"cart_adds,omitempty"`
	Buys            int32                    `protobuf:"varint,6,opt,name=buys,proto3" json:"buys,omitempty"`
	AvailStocks     int32                    `protobuf:"varint,7,opt,name=avail_stocks,json=availStocks,proto3" json:"avail_stocks,omitempty"`
	AvailSizes      string                   `protobuf:"bytes,8,opt,name=avail_sizes,json=availSizes,proto3" json:"avail_sizes,omitempty"`
	AttributeCoef   string                   `protobuf:"bytes,9,opt,name=attribute_coef,json=attributeCoef,proto3" json:"attribute_coef,omitempty"`
	ReductionFactor string                   `protobuf:"bytes,10,opt,name=reduction_factor,json=reductionFactor,proto3" json:"reduction_factor,omitempty"`
	IsSetManual     bool                     `protobuf:"varint,11,opt,name=is_set_manual,json=isSetManual,proto3" json:"is_set_manual,omitempty"`
	TotalWeight     int32                    `protobuf:"varint,12,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	Product         *QuickProductWithTitleRU `protobuf:"bytes,13,opt,name=product,proto3" json:"product,omitempty"`
	CreatedAt       string                   `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       string                   `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt       *string                  `protobuf:"bytes,16,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *ProductOrderWithoutID) Reset() {
	*x = ProductOrderWithoutID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductOrderWithoutID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductOrderWithoutID) ProtoMessage() {}

func (x *ProductOrderWithoutID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductOrderWithoutID.ProtoReflect.Descriptor instead.
func (*ProductOrderWithoutID) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{41}
}

func (x *ProductOrderWithoutID) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProductOrderWithoutID) GetCreatedAtCoef() int32 {
	if x != nil {
		return x.CreatedAtCoef
	}
	return 0
}

func (x *ProductOrderWithoutID) GetViews() int32 {
	if x != nil {
		return x.Views
	}
	return 0
}

func (x *ProductOrderWithoutID) GetSubscriptions() int32 {
	if x != nil {
		return x.Subscriptions
	}
	return 0
}

func (x *ProductOrderWithoutID) GetCartAdds() int32 {
	if x != nil {
		return x.CartAdds
	}
	return 0
}

func (x *ProductOrderWithoutID) GetBuys() int32 {
	if x != nil {
		return x.Buys
	}
	return 0
}

func (x *ProductOrderWithoutID) GetAvailStocks() int32 {
	if x != nil {
		return x.AvailStocks
	}
	return 0
}

func (x *ProductOrderWithoutID) GetAvailSizes() string {
	if x != nil {
		return x.AvailSizes
	}
	return ""
}

func (x *ProductOrderWithoutID) GetAttributeCoef() string {
	if x != nil {
		return x.AttributeCoef
	}
	return ""
}

func (x *ProductOrderWithoutID) GetReductionFactor() string {
	if x != nil {
		return x.ReductionFactor
	}
	return ""
}

func (x *ProductOrderWithoutID) GetIsSetManual() bool {
	if x != nil {
		return x.IsSetManual
	}
	return false
}

func (x *ProductOrderWithoutID) GetTotalWeight() int32 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *ProductOrderWithoutID) GetProduct() *QuickProductWithTitleRU {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *ProductOrderWithoutID) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ProductOrderWithoutID) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ProductOrderWithoutID) GetDeletedAt() string {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return ""
}

type UpdateProductOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type            *string `protobuf:"bytes,2,opt,name=type,proto3,oneof" json:"type,omitempty"`
	CreatedAtCoef   *int32  `protobuf:"varint,3,opt,name=created_at_coef,json=createdAtCoef,proto3,oneof" json:"created_at_coef,omitempty"`
	Views           *int32  `protobuf:"varint,4,opt,name=views,proto3,oneof" json:"views,omitempty"`
	Subscriptions   *int32  `protobuf:"varint,5,opt,name=subscriptions,proto3,oneof" json:"subscriptions,omitempty"`
	CartAdds        *int32  `protobuf:"varint,6,opt,name=cart_adds,json=cartAdds,proto3,oneof" json:"cart_adds,omitempty"`
	Buys            *int32  `protobuf:"varint,7,opt,name=buys,proto3,oneof" json:"buys,omitempty"`
	AvailStocks     *int32  `protobuf:"varint,8,opt,name=avail_stocks,json=availStocks,proto3,oneof" json:"avail_stocks,omitempty"`
	AvailSizes      *string `protobuf:"bytes,9,opt,name=avail_sizes,json=availSizes,proto3,oneof" json:"avail_sizes,omitempty"`
	AttributeCoef   *string `protobuf:"bytes,10,opt,name=attribute_coef,json=attributeCoef,proto3,oneof" json:"attribute_coef,omitempty"`
	ReductionFactor *string `protobuf:"bytes,11,opt,name=reduction_factor,json=reductionFactor,proto3,oneof" json:"reduction_factor,omitempty"`
	IsSetManual     *bool   `protobuf:"varint,12,opt,name=is_set_manual,json=isSetManual,proto3,oneof" json:"is_set_manual,omitempty"`
	TotalWeight     *int32  `protobuf:"varint,13,opt,name=total_weight,json=totalWeight,proto3,oneof" json:"total_weight,omitempty"`
	ProductGuid     *string `protobuf:"bytes,14,opt,name=product_guid,json=productGuid,proto3,oneof" json:"product_guid,omitempty"`
	DeletedAt       *string `protobuf:"bytes,15,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *UpdateProductOrder) Reset() {
	*x = UpdateProductOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductOrder) ProtoMessage() {}

func (x *UpdateProductOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductOrder.ProtoReflect.Descriptor instead.
func (*UpdateProductOrder) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateProductOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductOrder) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *UpdateProductOrder) GetCreatedAtCoef() int32 {
	if x != nil && x.CreatedAtCoef != nil {
		return *x.CreatedAtCoef
	}
	return 0
}

func (x *UpdateProductOrder) GetViews() int32 {
	if x != nil && x.Views != nil {
		return *x.Views
	}
	return 0
}

func (x *UpdateProductOrder) GetSubscriptions() int32 {
	if x != nil && x.Subscriptions != nil {
		return *x.Subscriptions
	}
	return 0
}

func (x *UpdateProductOrder) GetCartAdds() int32 {
	if x != nil && x.CartAdds != nil {
		return *x.CartAdds
	}
	return 0
}

func (x *UpdateProductOrder) GetBuys() int32 {
	if x != nil && x.Buys != nil {
		return *x.Buys
	}
	return 0
}

func (x *UpdateProductOrder) GetAvailStocks() int32 {
	if x != nil && x.AvailStocks != nil {
		return *x.AvailStocks
	}
	return 0
}

func (x *UpdateProductOrder) GetAvailSizes() string {
	if x != nil && x.AvailSizes != nil {
		return *x.AvailSizes
	}
	return ""
}

func (x *UpdateProductOrder) GetAttributeCoef() string {
	if x != nil && x.AttributeCoef != nil {
		return *x.AttributeCoef
	}
	return ""
}

func (x *UpdateProductOrder) GetReductionFactor() string {
	if x != nil && x.ReductionFactor != nil {
		return *x.ReductionFactor
	}
	return ""
}

func (x *UpdateProductOrder) GetIsSetManual() bool {
	if x != nil && x.IsSetManual != nil {
		return *x.IsSetManual
	}
	return false
}

func (x *UpdateProductOrder) GetTotalWeight() int32 {
	if x != nil && x.TotalWeight != nil {
		return *x.TotalWeight
	}
	return 0
}

func (x *UpdateProductOrder) GetProductGuid() string {
	if x != nil && x.ProductGuid != nil {
		return *x.ProductGuid
	}
	return ""
}

func (x *UpdateProductOrder) GetDeletedAt() string {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return ""
}

type GetProductOrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*ProductOrder     `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProductOrderListResponse) Reset() {
	*x = GetProductOrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductOrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductOrderListResponse) ProtoMessage() {}

func (x *GetProductOrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductOrderListResponse.ProtoReflect.Descriptor instead.
func (*GetProductOrderListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{43}
}

func (x *GetProductOrderListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetProductOrderListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductOrderListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetProductOrderListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductOrderListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetProductOrderListResponse) GetData() []*ProductOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetProductOrderByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *ProductOrder `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64         `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error      `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetProductOrderByIDResponse) Reset() {
	*x = GetProductOrderByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductOrderByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductOrderByIDResponse) ProtoMessage() {}

func (x *GetProductOrderByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductOrderByIDResponse.ProtoReflect.Descriptor instead.
func (*GetProductOrderByIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{44}
}

func (x *GetProductOrderByIDResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetProductOrderByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductOrderByIDResponse) GetData() *ProductOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetProductOrderByIDResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductOrderByIDResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type SetNullProductOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DeletedAt *bool `protobuf:"varint,2,opt,name=deleted_at,json=deletedAt,proto3,oneof" json:"deleted_at,omitempty"`
}

func (x *SetNullProductOrder) Reset() {
	*x = SetNullProductOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullProductOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullProductOrder) ProtoMessage() {}

func (x *SetNullProductOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullProductOrder.ProtoReflect.Descriptor instead.
func (*SetNullProductOrder) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{45}
}

func (x *SetNullProductOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetNullProductOrder) GetDeletedAt() bool {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return false
}

type ModelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	CreatedAt string  `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string  `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ModelType) Reset() {
	*x = ModelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelType) ProtoMessage() {}

func (x *ModelType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelType.ProtoReflect.Descriptor instead.
func (*ModelType) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{46}
}

func (x *ModelType) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModelType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ModelType) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ModelType) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type ModelTypeWithoutID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *ModelTypeWithoutID) Reset() {
	*x = ModelTypeWithoutID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelTypeWithoutID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelTypeWithoutID) ProtoMessage() {}

func (x *ModelTypeWithoutID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelTypeWithoutID.ProtoReflect.Descriptor instead.
func (*ModelTypeWithoutID) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{47}
}

func (x *ModelTypeWithoutID) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type UpdateModelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *UpdateModelType) Reset() {
	*x = UpdateModelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateModelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateModelType) ProtoMessage() {}

func (x *UpdateModelType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateModelType.ProtoReflect.Descriptor instead.
func (*UpdateModelType) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateModelType) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateModelType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GetModelTypeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*ModelType        `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetModelTypeListResponse) Reset() {
	*x = GetModelTypeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelTypeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelTypeListResponse) ProtoMessage() {}

func (x *GetModelTypeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelTypeListResponse.ProtoReflect.Descriptor instead.
func (*GetModelTypeListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{49}
}

func (x *GetModelTypeListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetModelTypeListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetModelTypeListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetModelTypeListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetModelTypeListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetModelTypeListResponse) GetData() []*ModelType {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetModelTypeByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *ModelType `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Code    int64      `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	Errors  []*Error   `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetModelTypeByIDResponse) Reset() {
	*x = GetModelTypeByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelTypeByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelTypeByIDResponse) ProtoMessage() {}

func (x *GetModelTypeByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelTypeByIDResponse.ProtoReflect.Descriptor instead.
func (*GetModelTypeByIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{50}
}

func (x *GetModelTypeByIDResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetModelTypeByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetModelTypeByIDResponse) GetData() *ModelType {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetModelTypeByIDResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetModelTypeByIDResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type SetNullModelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name *bool `protobuf:"varint,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *SetNullModelType) Reset() {
	*x = SetNullModelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNullModelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNullModelType) ProtoMessage() {}

func (x *SetNullModelType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNullModelType.ProtoReflect.Descriptor instead.
func (*SetNullModelType) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{51}
}

func (x *SetNullModelType) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetNullModelType) GetName() bool {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return false
}

type ProductFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	CreatedAt string `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ProductFilter) Reset() {
	*x = ProductFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductFilter) ProtoMessage() {}

func (x *ProductFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductFilter.ProtoReflect.Descriptor instead.
func (*ProductFilter) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{52}
}

func (x *ProductFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProductFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ProductFilter) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ProductFilter) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type GetProductFilterListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message    string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Code       int64               `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Errors     []*Error            `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	Data       []*ProductFilter    `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProductFilterListResponse) Reset() {
	*x = GetProductFilterListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_nomenclature_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductFilterListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductFilterListResponse) ProtoMessage() {}

func (x *GetProductFilterListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nomenclature_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductFilterListResponse.ProtoReflect.Descriptor instead.
func (*GetProductFilterListResponse) Descriptor() ([]byte, []int) {
	return file_proto_nomenclature_proto_rawDescGZIP(), []int{53}
}

func (x *GetProductFilterListResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetProductFilterListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductFilterListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetProductFilterListResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductFilterListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetProductFilterListResponse) GetData() []*ProductFilter {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_proto_nomenclature_proto protoreflect.FileDescriptor

var file_proto_nomenclature_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x41, 0x0a, 0x11, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x58, 0x0a, 0x12, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4d, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x22, 0x9b, 0x01, 0x0a,
	0x0a, 0x53, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73,
	0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x65, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x68,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x22, 0xc8, 0x01,
	0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x52, 0x75, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53,
	0x61, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x68, 0x65, 0x78, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x55, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x37, 0x0a, 0x03, 0x41, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x73, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41,
	0x6c, 0x74, 0x52, 0x04, 0x61, 0x6c, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0xa7, 0x04, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x11, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22,
	0xef, 0x03, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x11, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72,
	0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x22, 0xf0, 0x03, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x03, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52,
	0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x11, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x72, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x22, 0xe1, 0x03, 0x0a, 0x13, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xb7, 0x06, 0x0a, 0x0c, 0x4e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x52, 0x75, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x33, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x61, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x12, 0x3d, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e,
	0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x32, 0x0a,
	0x08, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x08, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x45, 0x63, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x69, 0x7a, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x73, 0x69, 0x7a,
	0x65, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x0a, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x75, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x75, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x70, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x78, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x58, 0x6c, 0x12, 0x24, 0x0a, 0x0b, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22,
	0xc0, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x06, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x75,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x62, 0x75, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x03, 0x52, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x68, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x04,
	0x68, 0x69, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x78, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x09,
	0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x58, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x75, 0x73, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x77, 0x61, 0x69, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x69,
	0x70, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x78, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x22, 0x59, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xfe, 0x01,
	0x0a, 0x13, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x77, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x62, 0x75, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x78, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x58, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x80,
	0x02, 0x0a, 0x0e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x22, 0xf4, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x4e, 0x75, 0x6c, 0x6c, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x19, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x47, 0x55,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x22, 0x60,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x82, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x20, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x26, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e,
	0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc6, 0x01,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbe, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x3c, 0x0a, 0x0c, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x69,
	0x63, 0x6b, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x22, 0x8f, 0x02, 0x0a, 0x24, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x17, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x52, 0x55, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x75, 0x22, 0xd6,
	0x04, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x43, 0x6f, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x72, 0x74,
	0x41, 0x64, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x62, 0x75, 0x79, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43,
	0x6f, 0x65, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x55, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xcf, 0x04, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x43, 0x6f, 0x65, 0x66, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61,
	0x72, 0x74, 0x41, 0x64, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x75, 0x79, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x65, 0x66,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x65, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x65, 0x74, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x55, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x8e, 0x06, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x43,
	0x6f, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x63, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x04, 0x52, 0x08, 0x63, 0x61, 0x72, 0x74, 0x41, 0x64, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x62, 0x75, 0x79, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x04,
	0x62, 0x75, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52,
	0x0b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x65, 0x66, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x65,
	0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0b, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x47, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x72, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x75, 0x79, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x65, 0x66, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xc0, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0x58, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x7b, 0x0a, 0x09,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x12, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x43, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xba, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0x44, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x84, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xd8, 0x01, 0x0a, 0x13, 0x4e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x52, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xb5, 0x03, 0x0a, 0x11, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x1a, 0x27, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x27, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c,
	0x6c, 0x12, 0x1f, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x1a, 0x27, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x85, 0x03, 0x0a, 0x15,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x47, 0x55, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x2d, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12,
	0x23, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x53, 0x69, 0x7a, 0x65, 0x1a, 0x2d, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xaf, 0x04, 0x0a, 0x12, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x1a, 0x28, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x1a, 0x28, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x07,
	0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x28, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x54, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc7, 0x03, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x6e,
	0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x6f, 0x6d,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x49, 0x44, 0x1a, 0x29, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x29, 0x2e, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c,
	0x6c, 0x12, 0x21, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x1a, 0x29, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xac, 0x03, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x49, 0x44, 0x1a, 0x26, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x1a, 0x26, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x53,
	0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x1e, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x26, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x6b,
	0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x11, 0x5a, 0x0f, 0x67,
	0x6f, 0x2f, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_nomenclature_proto_rawDescOnce sync.Once
	file_proto_nomenclature_proto_rawDescData = file_proto_nomenclature_proto_rawDesc
)

func file_proto_nomenclature_proto_rawDescGZIP() []byte {
	file_proto_nomenclature_proto_rawDescOnce.Do(func() {
		file_proto_nomenclature_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_nomenclature_proto_rawDescData)
	})
	return file_proto_nomenclature_proto_rawDescData
}

var file_proto_nomenclature_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_proto_nomenclature_proto_goTypes = []interface{}{
	(*PaginationRequest)(nil),                    // 0: nomenclature.PaginationRequest
	(*PaginationResponse)(nil),                   // 1: nomenclature.PaginationResponse
	(*Error)(nil),                                // 2: nomenclature.Error
	(*NomenclatureDescription)(nil),              // 3: nomenclature.NomenclatureDescription
	(*SuperModel)(nil),                           // 4: nomenclature.SuperModel
	(*ColorDescription)(nil),                     // 5: nomenclature.ColorDescription
	(*Color)(nil),                                // 6: nomenclature.Color
	(*Capsules)(nil),                             // 7: nomenclature.Capsules
	(*Alt)(nil),                                  // 8: nomenclature.Alt
	(*Price)(nil),                                // 9: nomenclature.Price
	(*Size)(nil),                                 // 10: nomenclature.Size
	(*Maintenance)(nil),                          // 11: nomenclature.Maintenance
	(*UpdateMaintenance)(nil),                    // 12: nomenclature.UpdateMaintenance
	(*SetNullMaintenance)(nil),                   // 13: nomenclature.SetNullMaintenance
	(*MaintenanceithoutID)(nil),                  // 14: nomenclature.MaintenanceithoutID
	(*Nomenclature)(nil),                         // 15: nomenclature.Nomenclature
	(*PhotoModel)(nil),                           // 16: nomenclature.PhotoModel
	(*UpdatePhotoModel)(nil),                     // 17: nomenclature.UpdatePhotoModel
	(*SetNullPhotoModel)(nil),                    // 18: nomenclature.SetNullPhotoModel
	(*PhotoModelWithoutID)(nil),                  // 19: nomenclature.PhotoModelWithoutID
	(*DictionarySize)(nil),                       // 20: nomenclature.DictionarySize
	(*UpdateDictionarySize)(nil),                 // 21: nomenclature.UpdateDictionarySize
	(*SetNullDictionarySize)(nil),                // 22: nomenclature.SetNullDictionarySize
	(*DictionarySizeWithoutGUID)(nil),            // 23: nomenclature.DictionarySizeWithoutGUID
	(*GetListRequest)(nil),                       // 24: nomenclature.GetListRequest
	(*GetNomenclatureListResponse)(nil),          // 25: nomenclature.GetNomenclatureListResponse
	(*GetNomenclatureByArticleRequest)(nil),      // 26: nomenclature.GetNomenclatureByArticleRequest
	(*GetNomenclatureByArticleResponse)(nil),     // 27: nomenclature.GetNomenclatureByArticleResponse
	(*GetPhotoModelListResponse)(nil),            // 28: nomenclature.GetPhotoModelListResponse
	(*GetByIDRequest)(nil),                       // 29: nomenclature.GetByIDRequest
	(*GetByGUIDRequest)(nil),                     // 30: nomenclature.GetByGUIDRequest
	(*GetPhotoModelByIDResponse)(nil),            // 31: nomenclature.GetPhotoModelByIDResponse
	(*GetDictionarySizeListResponse)(nil),        // 32: nomenclature.GetDictionarySizeListResponse
	(*GetDictionarySizeByGUIDResponse)(nil),      // 33: nomenclature.GetDictionarySizeByGUIDResponse
	(*GetMaintenanceListResponse)(nil),           // 34: nomenclature.GetMaintenanceListResponse
	(*GetMaintenanceByIDResponse)(nil),           // 35: nomenclature.GetMaintenanceByIDResponse
	(*QuickProduct)(nil),                         // 36: nomenclature.QuickProduct
	(*QuickMaintenance)(nil),                     // 37: nomenclature.QuickMaintenance
	(*GetListProductsToMaintenanceResponse)(nil), // 38: nomenclature.GetListProductsToMaintenanceResponse
	(*QuickProductWithTitleRU)(nil),              // 39: nomenclature.QuickProductWithTitleRU
	(*ProductOrder)(nil),                         // 40: nomenclature.ProductOrder
	(*ProductOrderWithoutID)(nil),                // 41: nomenclature.ProductOrderWithoutID
	(*UpdateProductOrder)(nil),                   // 42: nomenclature.UpdateProductOrder
	(*GetProductOrderListResponse)(nil),          // 43: nomenclature.GetProductOrderListResponse
	(*GetProductOrderByIDResponse)(nil),          // 44: nomenclature.GetProductOrderByIDResponse
	(*SetNullProductOrder)(nil),                  // 45: nomenclature.SetNullProductOrder
	(*ModelType)(nil),                            // 46: nomenclature.ModelType
	(*ModelTypeWithoutID)(nil),                   // 47: nomenclature.ModelTypeWithoutID
	(*UpdateModelType)(nil),                      // 48: nomenclature.UpdateModelType
	(*GetModelTypeListResponse)(nil),             // 49: nomenclature.GetModelTypeListResponse
	(*GetModelTypeByIDResponse)(nil),             // 50: nomenclature.GetModelTypeByIDResponse
	(*SetNullModelType)(nil),                     // 51: nomenclature.SetNullModelType
	(*ProductFilter)(nil),                        // 52: nomenclature.ProductFilter
	(*GetProductFilterListResponse)(nil),         // 53: nomenclature.GetProductFilterListResponse
}
var file_proto_nomenclature_proto_depIdxs = []int32{
	5,  // 0: nomenclature.Color.color_groups:type_name -> nomenclature.ColorDescription
	3,  // 1: nomenclature.Size.size:type_name -> nomenclature.NomenclatureDescription
	8,  // 2: nomenclature.Size.alts:type_name -> nomenclature.Alt
	9,  // 3: nomenclature.Size.prices:type_name -> nomenclature.Price
	3,  // 4: nomenclature.Nomenclature.fabric:type_name -> nomenclature.NomenclatureDescription
	3,  // 5: nomenclature.Nomenclature.family:type_name -> nomenclature.NomenclatureDescription
	3,  // 6: nomenclature.Nomenclature.color_model:type_name -> nomenclature.NomenclatureDescription
	4,  // 7: nomenclature.Nomenclature.super_model:type_name -> nomenclature.SuperModel
	6,  // 8: nomenclature.Nomenclature.color:type_name -> nomenclature.Color
	7,  // 9: nomenclature.Nomenclature.capsules:type_name -> nomenclature.Capsules
	11, // 10: nomenclature.Nomenclature.maintenance:type_name -> nomenclature.Maintenance
	10, // 11: nomenclature.Nomenclature.sizes:type_name -> nomenclature.Size
	0,  // 12: nomenclature.GetListRequest.pagination:type_name -> nomenclature.PaginationRequest
	1,  // 13: nomenclature.GetNomenclatureListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,  // 14: nomenclature.GetNomenclatureListResponse.errors:type_name -> nomenclature.Error
	15, // 15: nomenclature.GetNomenclatureListResponse.data:type_name -> nomenclature.Nomenclature
	15, // 16: nomenclature.GetNomenclatureByArticleResponse.data:type_name -> nomenclature.Nomenclature
	2,  // 17: nomenclature.GetNomenclatureByArticleResponse.errors:type_name -> nomenclature.Error
	1,  // 18: nomenclature.GetPhotoModelListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,  // 19: nomenclature.GetPhotoModelListResponse.errors:type_name -> nomenclature.Error
	16, // 20: nomenclature.GetPhotoModelListResponse.data:type_name -> nomenclature.PhotoModel
	16, // 21: nomenclature.GetPhotoModelByIDResponse.data:type_name -> nomenclature.PhotoModel
	2,  // 22: nomenclature.GetPhotoModelByIDResponse.errors:type_name -> nomenclature.Error
	1,  // 23: nomenclature.GetDictionarySizeListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,  // 24: nomenclature.GetDictionarySizeListResponse.errors:type_name -> nomenclature.Error
	20, // 25: nomenclature.GetDictionarySizeListResponse.data:type_name -> nomenclature.DictionarySize
	20, // 26: nomenclature.GetDictionarySizeByGUIDResponse.data:type_name -> nomenclature.DictionarySize
	2,  // 27: nomenclature.GetDictionarySizeByGUIDResponse.errors:type_name -> nomenclature.Error
	1,  // 28: nomenclature.GetMaintenanceListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,  // 29: nomenclature.GetMaintenanceListResponse.errors:type_name -> nomenclature.Error
	11, // 30: nomenclature.GetMaintenanceListResponse.data:type_name -> nomenclature.Maintenance
	11, // 31: nomenclature.GetMaintenanceByIDResponse.data:type_name -> nomenclature.Maintenance
	2,  // 32: nomenclature.GetMaintenanceByIDResponse.errors:type_name -> nomenclature.Error
	36, // 33: nomenclature.QuickMaintenance.products_list:type_name -> nomenclature.QuickProduct
	1,  // 34: nomenclature.GetListProductsToMaintenanceResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,  // 35: nomenclature.GetListProductsToMaintenanceResponse.errors:type_name -> nomenclature.Error
	37, // 36: nomenclature.GetListProductsToMaintenanceResponse.data:type_name -> nomenclature.QuickMaintenance
	39, // 37: nomenclature.ProductOrder.product:type_name -> nomenclature.QuickProductWithTitleRU
	39, // 38: nomenclature.ProductOrderWithoutID.product:type_name -> nomenclature.QuickProductWithTitleRU
	1,  // 39: nomenclature.GetProductOrderListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,  // 40: nomenclature.GetProductOrderListResponse.errors:type_name -> nomenclature.Error
	40, // 41: nomenclature.GetProductOrderListResponse.data:type_name -> nomenclature.ProductOrder
	40, // 42: nomenclature.GetProductOrderByIDResponse.data:type_name -> nomenclature.ProductOrder
	2,  // 43: nomenclature.GetProductOrderByIDResponse.errors:type_name -> nomenclature.Error
	1,  // 44: nomenclature.GetModelTypeListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,  // 45: nomenclature.GetModelTypeListResponse.errors:type_name -> nomenclature.Error
	46, // 46: nomenclature.GetModelTypeListResponse.data:type_name -> nomenclature.ModelType
	46, // 47: nomenclature.GetModelTypeByIDResponse.data:type_name -> nomenclature.ModelType
	2,  // 48: nomenclature.GetModelTypeByIDResponse.errors:type_name -> nomenclature.Error
	1,  // 49: nomenclature.GetProductFilterListResponse.pagination:type_name -> nomenclature.PaginationResponse
	2,  // 50: nomenclature.GetProductFilterListResponse.errors:type_name -> nomenclature.Error
	52, // 51: nomenclature.GetProductFilterListResponse.data:type_name -> nomenclature.ProductFilter
	24, // 52: nomenclature.NomenclatureService.GetList:input_type -> nomenclature.GetListRequest
	26, // 53: nomenclature.NomenclatureService.GetByArticle:input_type -> nomenclature.GetNomenclatureByArticleRequest
	24, // 54: nomenclature.PhotoModelService.GetList:input_type -> nomenclature.GetListRequest
	29, // 55: nomenclature.PhotoModelService.GetByID:input_type -> nomenclature.GetByIDRequest
	19, // 56: nomenclature.PhotoModelService.Create:input_type -> nomenclature.PhotoModelWithoutID
	17, // 57: nomenclature.PhotoModelService.Update:input_type -> nomenclature.UpdatePhotoModel
	18, // 58: nomenclature.PhotoModelService.SetNull:input_type -> nomenclature.SetNullPhotoModel
	24, // 59: nomenclature.DictionarySizeService.GetList:input_type -> nomenclature.GetListRequest
	30, // 60: nomenclature.DictionarySizeService.GetByGUID:input_type -> nomenclature.GetByGUIDRequest
	21, // 61: nomenclature.DictionarySizeService.Update:input_type -> nomenclature.UpdateDictionarySize
	22, // 62: nomenclature.DictionarySizeService.SetNull:input_type -> nomenclature.SetNullDictionarySize
	24, // 63: nomenclature.MaintenanceService.GetList:input_type -> nomenclature.GetListRequest
	29, // 64: nomenclature.MaintenanceService.GetByID:input_type -> nomenclature.GetByIDRequest
	14, // 65: nomenclature.MaintenanceService.Create:input_type -> nomenclature.MaintenanceithoutID
	12, // 66: nomenclature.MaintenanceService.Update:input_type -> nomenclature.UpdateMaintenance
	13, // 67: nomenclature.MaintenanceService.SetNull:input_type -> nomenclature.SetNullMaintenance
	24, // 68: nomenclature.MaintenanceService.GetListProductsToMaintenance:input_type -> nomenclature.GetListRequest
	24, // 69: nomenclature.ProductOrderService.GetList:input_type -> nomenclature.GetListRequest
	29, // 70: nomenclature.ProductOrderService.GetByID:input_type -> nomenclature.GetByIDRequest
	41, // 71: nomenclature.ProductOrderService.Create:input_type -> nomenclature.ProductOrderWithoutID
	42, // 72: nomenclature.ProductOrderService.Update:input_type -> nomenclature.UpdateProductOrder
	45, // 73: nomenclature.ProductOrderService.SetNull:input_type -> nomenclature.SetNullProductOrder
	24, // 74: nomenclature.ModelTypeService.GetList:input_type -> nomenclature.GetListRequest
	29, // 75: nomenclature.ModelTypeService.GetByID:input_type -> nomenclature.GetByIDRequest
	47, // 76: nomenclature.ModelTypeService.Create:input_type -> nomenclature.ModelTypeWithoutID
	48, // 77: nomenclature.ModelTypeService.Update:input_type -> nomenclature.UpdateModelType
	51, // 78: nomenclature.ModelTypeService.SetNull:input_type -> nomenclature.SetNullModelType
	24, // 79: nomenclature.ProductFilterService.GetList:input_type -> nomenclature.GetListRequest
	25, // 80: nomenclature.NomenclatureService.GetList:output_type -> nomenclature.GetNomenclatureListResponse
	27, // 81: nomenclature.NomenclatureService.GetByArticle:output_type -> nomenclature.GetNomenclatureByArticleResponse
	28, // 82: nomenclature.PhotoModelService.GetList:output_type -> nomenclature.GetPhotoModelListResponse
	31, // 83: nomenclature.PhotoModelService.GetByID:output_type -> nomenclature.GetPhotoModelByIDResponse
	31, // 84: nomenclature.PhotoModelService.Create:output_type -> nomenclature.GetPhotoModelByIDResponse
	31, // 85: nomenclature.PhotoModelService.Update:output_type -> nomenclature.GetPhotoModelByIDResponse
	31, // 86: nomenclature.PhotoModelService.SetNull:output_type -> nomenclature.GetPhotoModelByIDResponse
	32, // 87: nomenclature.DictionarySizeService.GetList:output_type -> nomenclature.GetDictionarySizeListResponse
	33, // 88: nomenclature.DictionarySizeService.GetByGUID:output_type -> nomenclature.GetDictionarySizeByGUIDResponse
	33, // 89: nomenclature.DictionarySizeService.Update:output_type -> nomenclature.GetDictionarySizeByGUIDResponse
	33, // 90: nomenclature.DictionarySizeService.SetNull:output_type -> nomenclature.GetDictionarySizeByGUIDResponse
	34, // 91: nomenclature.MaintenanceService.GetList:output_type -> nomenclature.GetMaintenanceListResponse
	35, // 92: nomenclature.MaintenanceService.GetByID:output_type -> nomenclature.GetMaintenanceByIDResponse
	35, // 93: nomenclature.MaintenanceService.Create:output_type -> nomenclature.GetMaintenanceByIDResponse
	35, // 94: nomenclature.MaintenanceService.Update:output_type -> nomenclature.GetMaintenanceByIDResponse
	35, // 95: nomenclature.MaintenanceService.SetNull:output_type -> nomenclature.GetMaintenanceByIDResponse
	38, // 96: nomenclature.MaintenanceService.GetListProductsToMaintenance:output_type -> nomenclature.GetListProductsToMaintenanceResponse
	43, // 97: nomenclature.ProductOrderService.GetList:output_type -> nomenclature.GetProductOrderListResponse
	44, // 98: nomenclature.ProductOrderService.GetByID:output_type -> nomenclature.GetProductOrderByIDResponse
	44, // 99: nomenclature.ProductOrderService.Create:output_type -> nomenclature.GetProductOrderByIDResponse
	44, // 100: nomenclature.ProductOrderService.Update:output_type -> nomenclature.GetProductOrderByIDResponse
	44, // 101: nomenclature.ProductOrderService.SetNull:output_type -> nomenclature.GetProductOrderByIDResponse
	49, // 102: nomenclature.ModelTypeService.GetList:output_type -> nomenclature.GetModelTypeListResponse
	50, // 103: nomenclature.ModelTypeService.GetByID:output_type -> nomenclature.GetModelTypeByIDResponse
	50, // 104: nomenclature.ModelTypeService.Create:output_type -> nomenclature.GetModelTypeByIDResponse
	50, // 105: nomenclature.ModelTypeService.Update:output_type -> nomenclature.GetModelTypeByIDResponse
	50, // 106: nomenclature.ModelTypeService.SetNull:output_type -> nomenclature.GetModelTypeByIDResponse
	53, // 107: nomenclature.ProductFilterService.GetList:output_type -> nomenclature.GetProductFilterListResponse
	80, // [80:108] is the sub-list for method output_type
	52, // [52:80] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_proto_nomenclature_proto_init() }
func file_proto_nomenclature_proto_init() {
	if File_proto_nomenclature_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_nomenclature_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NomenclatureDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capsules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Size); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Maintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaintenanceithoutID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nomenclature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePhotoModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullPhotoModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoModelWithoutID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DictionarySize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDictionarySize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullDictionarySize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DictionarySizeWithoutGUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNomenclatureListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNomenclatureByArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNomenclatureByArticleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPhotoModelListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByGUIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPhotoModelByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionarySizeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionarySizeByGUIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaintenanceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaintenanceByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListProductsToMaintenanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickProductWithTitleRU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductOrderWithoutID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductOrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductOrderByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullProductOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelTypeWithoutID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateModelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelTypeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelTypeByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNullModelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_nomenclature_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductFilterListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_nomenclature_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_proto_nomenclature_proto_msgTypes[51].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_nomenclature_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   7,
		},
		GoTypes:           file_proto_nomenclature_proto_goTypes,
		DependencyIndexes: file_proto_nomenclature_proto_depIdxs,
		MessageInfos:      file_proto_nomenclature_proto_msgTypes,
	}.Build()
	File_proto_nomenclature_proto = out.File
	file_proto_nomenclature_proto_rawDesc = nil
	file_proto_nomenclature_proto_goTypes = nil
	file_proto_nomenclature_proto_depIdxs = nil
}
