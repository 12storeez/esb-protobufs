// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: slack.proto

package slack

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Slack_Send_FullMethodName     = "/notifications.Slack/Send"
	Slack_SendFile_FullMethodName = "/notifications.Slack/SendFile"
)

// SlackClient is the client API for Slack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlackClient interface {
	Send(ctx context.Context, in *SlackSendParams, opts ...grpc.CallOption) (*SlackSendResponse, error)
	SendFile(ctx context.Context, in *SlackSendFileParams, opts ...grpc.CallOption) (*SlackSendResponse, error)
}

type slackClient struct {
	cc grpc.ClientConnInterface
}

func NewSlackClient(cc grpc.ClientConnInterface) SlackClient {
	return &slackClient{cc}
}

func (c *slackClient) Send(ctx context.Context, in *SlackSendParams, opts ...grpc.CallOption) (*SlackSendResponse, error) {
	out := new(SlackSendResponse)
	err := c.cc.Invoke(ctx, Slack_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackClient) SendFile(ctx context.Context, in *SlackSendFileParams, opts ...grpc.CallOption) (*SlackSendResponse, error) {
	out := new(SlackSendResponse)
	err := c.cc.Invoke(ctx, Slack_SendFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlackServer is the server API for Slack service.
// All implementations should embed UnimplementedSlackServer
// for forward compatibility
type SlackServer interface {
	Send(context.Context, *SlackSendParams) (*SlackSendResponse, error)
	SendFile(context.Context, *SlackSendFileParams) (*SlackSendResponse, error)
}

// UnimplementedSlackServer should be embedded to have forward compatible implementations.
type UnimplementedSlackServer struct {
}

func (UnimplementedSlackServer) Send(context.Context, *SlackSendParams) (*SlackSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedSlackServer) SendFile(context.Context, *SlackSendFileParams) (*SlackSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}

// UnsafeSlackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlackServer will
// result in compilation errors.
type UnsafeSlackServer interface {
	mustEmbedUnimplementedSlackServer()
}

func RegisterSlackServer(s grpc.ServiceRegistrar, srv SlackServer) {
	s.RegisterService(&Slack_ServiceDesc, srv)
}

func _Slack_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlackSendParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Slack_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackServer).Send(ctx, req.(*SlackSendParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slack_SendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlackSendFileParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackServer).SendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Slack_SendFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackServer).SendFile(ctx, req.(*SlackSendFileParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Slack_ServiceDesc is the grpc.ServiceDesc for Slack service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Slack_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifications.Slack",
	HandlerType: (*SlackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Slack_Send_Handler,
		},
		{
			MethodName: "SendFile",
			Handler:    _Slack_SendFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slack.proto",
}
