// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/transports.proto

package transport

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Zones service

func NewZonesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Zones service

type ZonesService interface {
	GetByDadataID(ctx context.Context, in *Dadata, opts ...client.CallOption) (*Zone, error)
	GetByGeonameID(ctx context.Context, in *Geoname, opts ...client.CallOption) (*Zone, error)
	GetByZoneID(ctx context.Context, in *ZoneID, opts ...client.CallOption) (*Zone, error)
	Create(ctx context.Context, in *CreateParams, opts ...client.CallOption) (*ZoneID, error)
	GetAll(ctx context.Context, in *GetAllParams, opts ...client.CallOption) (*GetAllResponse, error)
	Update(ctx context.Context, in *UpdateParams, opts ...client.CallOption) (*OkResponse, error)
	Delete(ctx context.Context, in *ZoneID, opts ...client.CallOption) (*OkResponse, error)
}

type zonesService struct {
	c    client.Client
	name string
}

func NewZonesService(name string, c client.Client) ZonesService {
	return &zonesService{
		c:    c,
		name: name,
	}
}

func (c *zonesService) GetByDadataID(ctx context.Context, in *Dadata, opts ...client.CallOption) (*Zone, error) {
	req := c.c.NewRequest(c.name, "Zones.GetByDadataID", in)
	out := new(Zone)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) GetByGeonameID(ctx context.Context, in *Geoname, opts ...client.CallOption) (*Zone, error) {
	req := c.c.NewRequest(c.name, "Zones.GetByGeonameID", in)
	out := new(Zone)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) GetByZoneID(ctx context.Context, in *ZoneID, opts ...client.CallOption) (*Zone, error) {
	req := c.c.NewRequest(c.name, "Zones.GetByZoneID", in)
	out := new(Zone)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) Create(ctx context.Context, in *CreateParams, opts ...client.CallOption) (*ZoneID, error) {
	req := c.c.NewRequest(c.name, "Zones.Create", in)
	out := new(ZoneID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) GetAll(ctx context.Context, in *GetAllParams, opts ...client.CallOption) (*GetAllResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.GetAll", in)
	out := new(GetAllResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) Update(ctx context.Context, in *UpdateParams, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.Update", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) Delete(ctx context.Context, in *ZoneID, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.Delete", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Zones service

type ZonesHandler interface {
	GetByDadataID(context.Context, *Dadata, *Zone) error
	GetByGeonameID(context.Context, *Geoname, *Zone) error
	GetByZoneID(context.Context, *ZoneID, *Zone) error
	Create(context.Context, *CreateParams, *ZoneID) error
	GetAll(context.Context, *GetAllParams, *GetAllResponse) error
	Update(context.Context, *UpdateParams, *OkResponse) error
	Delete(context.Context, *ZoneID, *OkResponse) error
}

func RegisterZonesHandler(s server.Server, hdlr ZonesHandler, opts ...server.HandlerOption) error {
	type zones interface {
		GetByDadataID(ctx context.Context, in *Dadata, out *Zone) error
		GetByGeonameID(ctx context.Context, in *Geoname, out *Zone) error
		GetByZoneID(ctx context.Context, in *ZoneID, out *Zone) error
		Create(ctx context.Context, in *CreateParams, out *ZoneID) error
		GetAll(ctx context.Context, in *GetAllParams, out *GetAllResponse) error
		Update(ctx context.Context, in *UpdateParams, out *OkResponse) error
		Delete(ctx context.Context, in *ZoneID, out *OkResponse) error
	}
	type Zones struct {
		zones
	}
	h := &zonesHandler{hdlr}
	return s.Handle(s.NewHandler(&Zones{h}, opts...))
}

type zonesHandler struct {
	ZonesHandler
}

func (h *zonesHandler) GetByDadataID(ctx context.Context, in *Dadata, out *Zone) error {
	return h.ZonesHandler.GetByDadataID(ctx, in, out)
}

func (h *zonesHandler) GetByGeonameID(ctx context.Context, in *Geoname, out *Zone) error {
	return h.ZonesHandler.GetByGeonameID(ctx, in, out)
}

func (h *zonesHandler) GetByZoneID(ctx context.Context, in *ZoneID, out *Zone) error {
	return h.ZonesHandler.GetByZoneID(ctx, in, out)
}

func (h *zonesHandler) Create(ctx context.Context, in *CreateParams, out *ZoneID) error {
	return h.ZonesHandler.Create(ctx, in, out)
}

func (h *zonesHandler) GetAll(ctx context.Context, in *GetAllParams, out *GetAllResponse) error {
	return h.ZonesHandler.GetAll(ctx, in, out)
}

func (h *zonesHandler) Update(ctx context.Context, in *UpdateParams, out *OkResponse) error {
	return h.ZonesHandler.Update(ctx, in, out)
}

func (h *zonesHandler) Delete(ctx context.Context, in *ZoneID, out *OkResponse) error {
	return h.ZonesHandler.Delete(ctx, in, out)
}

// Api Endpoints for ZoneManualPriority service

func NewZoneManualPriorityEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ZoneManualPriority service

type ZoneManualPriorityService interface {
	Add(ctx context.Context, in *AddManualPriorityParams, opts ...client.CallOption) (*OkResponse, error)
	Get(ctx context.Context, in *ZoneID, opts ...client.CallOption) (*ManualPriorityList, error)
	Update(ctx context.Context, in *ManualPriorityParams, opts ...client.CallOption) (*OkResponse, error)
	Delete(ctx context.Context, in *ID, opts ...client.CallOption) (*OkResponse, error)
}

type zoneManualPriorityService struct {
	c    client.Client
	name string
}

func NewZoneManualPriorityService(name string, c client.Client) ZoneManualPriorityService {
	return &zoneManualPriorityService{
		c:    c,
		name: name,
	}
}

func (c *zoneManualPriorityService) Add(ctx context.Context, in *AddManualPriorityParams, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "ZoneManualPriority.Add", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneManualPriorityService) Get(ctx context.Context, in *ZoneID, opts ...client.CallOption) (*ManualPriorityList, error) {
	req := c.c.NewRequest(c.name, "ZoneManualPriority.Get", in)
	out := new(ManualPriorityList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneManualPriorityService) Update(ctx context.Context, in *ManualPriorityParams, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "ZoneManualPriority.Update", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneManualPriorityService) Delete(ctx context.Context, in *ID, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "ZoneManualPriority.Delete", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ZoneManualPriority service

type ZoneManualPriorityHandler interface {
	Add(context.Context, *AddManualPriorityParams, *OkResponse) error
	Get(context.Context, *ZoneID, *ManualPriorityList) error
	Update(context.Context, *ManualPriorityParams, *OkResponse) error
	Delete(context.Context, *ID, *OkResponse) error
}

func RegisterZoneManualPriorityHandler(s server.Server, hdlr ZoneManualPriorityHandler, opts ...server.HandlerOption) error {
	type zoneManualPriority interface {
		Add(ctx context.Context, in *AddManualPriorityParams, out *OkResponse) error
		Get(ctx context.Context, in *ZoneID, out *ManualPriorityList) error
		Update(ctx context.Context, in *ManualPriorityParams, out *OkResponse) error
		Delete(ctx context.Context, in *ID, out *OkResponse) error
	}
	type ZoneManualPriority struct {
		zoneManualPriority
	}
	h := &zoneManualPriorityHandler{hdlr}
	return s.Handle(s.NewHandler(&ZoneManualPriority{h}, opts...))
}

type zoneManualPriorityHandler struct {
	ZoneManualPriorityHandler
}

func (h *zoneManualPriorityHandler) Add(ctx context.Context, in *AddManualPriorityParams, out *OkResponse) error {
	return h.ZoneManualPriorityHandler.Add(ctx, in, out)
}

func (h *zoneManualPriorityHandler) Get(ctx context.Context, in *ZoneID, out *ManualPriorityList) error {
	return h.ZoneManualPriorityHandler.Get(ctx, in, out)
}

func (h *zoneManualPriorityHandler) Update(ctx context.Context, in *ManualPriorityParams, out *OkResponse) error {
	return h.ZoneManualPriorityHandler.Update(ctx, in, out)
}

func (h *zoneManualPriorityHandler) Delete(ctx context.Context, in *ID, out *OkResponse) error {
	return h.ZoneManualPriorityHandler.Delete(ctx, in, out)
}

// Api Endpoints for DeliveryMethod service

func NewDeliveryMethodEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DeliveryMethod service

type DeliveryMethodService interface {
	Add(ctx context.Context, in *AddDeliveryMethodParams, opts ...client.CallOption) (*OkResponse, error)
	Get(ctx context.Context, in *ID, opts ...client.CallOption) (*GetDeliveryMethodResponse, error)
	Update(ctx context.Context, in *UpdateDeliveryMethodParams, opts ...client.CallOption) (*OkResponse, error)
	Delete(ctx context.Context, in *ID, opts ...client.CallOption) (*OkResponse, error)
}

type deliveryMethodService struct {
	c    client.Client
	name string
}

func NewDeliveryMethodService(name string, c client.Client) DeliveryMethodService {
	return &deliveryMethodService{
		c:    c,
		name: name,
	}
}

func (c *deliveryMethodService) Add(ctx context.Context, in *AddDeliveryMethodParams, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "DeliveryMethod.Add", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryMethodService) Get(ctx context.Context, in *ID, opts ...client.CallOption) (*GetDeliveryMethodResponse, error) {
	req := c.c.NewRequest(c.name, "DeliveryMethod.Get", in)
	out := new(GetDeliveryMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryMethodService) Update(ctx context.Context, in *UpdateDeliveryMethodParams, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "DeliveryMethod.Update", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryMethodService) Delete(ctx context.Context, in *ID, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "DeliveryMethod.Delete", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeliveryMethod service

type DeliveryMethodHandler interface {
	Add(context.Context, *AddDeliveryMethodParams, *OkResponse) error
	Get(context.Context, *ID, *GetDeliveryMethodResponse) error
	Update(context.Context, *UpdateDeliveryMethodParams, *OkResponse) error
	Delete(context.Context, *ID, *OkResponse) error
}

func RegisterDeliveryMethodHandler(s server.Server, hdlr DeliveryMethodHandler, opts ...server.HandlerOption) error {
	type deliveryMethod interface {
		Add(ctx context.Context, in *AddDeliveryMethodParams, out *OkResponse) error
		Get(ctx context.Context, in *ID, out *GetDeliveryMethodResponse) error
		Update(ctx context.Context, in *UpdateDeliveryMethodParams, out *OkResponse) error
		Delete(ctx context.Context, in *ID, out *OkResponse) error
	}
	type DeliveryMethod struct {
		deliveryMethod
	}
	h := &deliveryMethodHandler{hdlr}
	return s.Handle(s.NewHandler(&DeliveryMethod{h}, opts...))
}

type deliveryMethodHandler struct {
	DeliveryMethodHandler
}

func (h *deliveryMethodHandler) Add(ctx context.Context, in *AddDeliveryMethodParams, out *OkResponse) error {
	return h.DeliveryMethodHandler.Add(ctx, in, out)
}

func (h *deliveryMethodHandler) Get(ctx context.Context, in *ID, out *GetDeliveryMethodResponse) error {
	return h.DeliveryMethodHandler.Get(ctx, in, out)
}

func (h *deliveryMethodHandler) Update(ctx context.Context, in *UpdateDeliveryMethodParams, out *OkResponse) error {
	return h.DeliveryMethodHandler.Update(ctx, in, out)
}

func (h *deliveryMethodHandler) Delete(ctx context.Context, in *ID, out *OkResponse) error {
	return h.DeliveryMethodHandler.Delete(ctx, in, out)
}

// Api Endpoints for PaymentMethod service

func NewPaymentMethodEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PaymentMethod service

type PaymentMethodService interface {
	Add(ctx context.Context, in *AddPaymentMethodParams, opts ...client.CallOption) (*OkResponse, error)
	Get(ctx context.Context, in *ID, opts ...client.CallOption) (*GetPaymentMethodResponse, error)
	Update(ctx context.Context, in *UpdatePaymentMethodParams, opts ...client.CallOption) (*OkResponse, error)
	Delete(ctx context.Context, in *ID, opts ...client.CallOption) (*OkResponse, error)
}

type paymentMethodService struct {
	c    client.Client
	name string
}

func NewPaymentMethodService(name string, c client.Client) PaymentMethodService {
	return &paymentMethodService{
		c:    c,
		name: name,
	}
}

func (c *paymentMethodService) Add(ctx context.Context, in *AddPaymentMethodParams, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentMethod.Add", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodService) Get(ctx context.Context, in *ID, opts ...client.CallOption) (*GetPaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentMethod.Get", in)
	out := new(GetPaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodService) Update(ctx context.Context, in *UpdatePaymentMethodParams, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentMethod.Update", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodService) Delete(ctx context.Context, in *ID, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentMethod.Delete", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaymentMethod service

type PaymentMethodHandler interface {
	Add(context.Context, *AddPaymentMethodParams, *OkResponse) error
	Get(context.Context, *ID, *GetPaymentMethodResponse) error
	Update(context.Context, *UpdatePaymentMethodParams, *OkResponse) error
	Delete(context.Context, *ID, *OkResponse) error
}

func RegisterPaymentMethodHandler(s server.Server, hdlr PaymentMethodHandler, opts ...server.HandlerOption) error {
	type paymentMethod interface {
		Add(ctx context.Context, in *AddPaymentMethodParams, out *OkResponse) error
		Get(ctx context.Context, in *ID, out *GetPaymentMethodResponse) error
		Update(ctx context.Context, in *UpdatePaymentMethodParams, out *OkResponse) error
		Delete(ctx context.Context, in *ID, out *OkResponse) error
	}
	type PaymentMethod struct {
		paymentMethod
	}
	h := &paymentMethodHandler{hdlr}
	return s.Handle(s.NewHandler(&PaymentMethod{h}, opts...))
}

type paymentMethodHandler struct {
	PaymentMethodHandler
}

func (h *paymentMethodHandler) Add(ctx context.Context, in *AddPaymentMethodParams, out *OkResponse) error {
	return h.PaymentMethodHandler.Add(ctx, in, out)
}

func (h *paymentMethodHandler) Get(ctx context.Context, in *ID, out *GetPaymentMethodResponse) error {
	return h.PaymentMethodHandler.Get(ctx, in, out)
}

func (h *paymentMethodHandler) Update(ctx context.Context, in *UpdatePaymentMethodParams, out *OkResponse) error {
	return h.PaymentMethodHandler.Update(ctx, in, out)
}

func (h *paymentMethodHandler) Delete(ctx context.Context, in *ID, out *OkResponse) error {
	return h.PaymentMethodHandler.Delete(ctx, in, out)
}

// Api Endpoints for ZoneDeliveryMatrix service

func NewZoneDeliveryMatrixEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ZoneDeliveryMatrix service

type ZoneDeliveryMatrixService interface {
	Add(ctx context.Context, in *AddZoneDeliveryMatrixParams, opts ...client.CallOption) (*OkResponse, error)
	Get(ctx context.Context, in *ZoneID, opts ...client.CallOption) (*GetDeliveryMatrixResponse, error)
	Update(ctx context.Context, in *ZoneDeliveryMatrixModel, opts ...client.CallOption) (*OkResponse, error)
	Delete(ctx context.Context, in *ID, opts ...client.CallOption) (*OkResponse, error)
}

type zoneDeliveryMatrixService struct {
	c    client.Client
	name string
}

func NewZoneDeliveryMatrixService(name string, c client.Client) ZoneDeliveryMatrixService {
	return &zoneDeliveryMatrixService{
		c:    c,
		name: name,
	}
}

func (c *zoneDeliveryMatrixService) Add(ctx context.Context, in *AddZoneDeliveryMatrixParams, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "ZoneDeliveryMatrix.Add", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneDeliveryMatrixService) Get(ctx context.Context, in *ZoneID, opts ...client.CallOption) (*GetDeliveryMatrixResponse, error) {
	req := c.c.NewRequest(c.name, "ZoneDeliveryMatrix.Get", in)
	out := new(GetDeliveryMatrixResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneDeliveryMatrixService) Update(ctx context.Context, in *ZoneDeliveryMatrixModel, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "ZoneDeliveryMatrix.Update", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneDeliveryMatrixService) Delete(ctx context.Context, in *ID, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "ZoneDeliveryMatrix.Delete", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ZoneDeliveryMatrix service

type ZoneDeliveryMatrixHandler interface {
	Add(context.Context, *AddZoneDeliveryMatrixParams, *OkResponse) error
	Get(context.Context, *ZoneID, *GetDeliveryMatrixResponse) error
	Update(context.Context, *ZoneDeliveryMatrixModel, *OkResponse) error
	Delete(context.Context, *ID, *OkResponse) error
}

func RegisterZoneDeliveryMatrixHandler(s server.Server, hdlr ZoneDeliveryMatrixHandler, opts ...server.HandlerOption) error {
	type zoneDeliveryMatrix interface {
		Add(ctx context.Context, in *AddZoneDeliveryMatrixParams, out *OkResponse) error
		Get(ctx context.Context, in *ZoneID, out *GetDeliveryMatrixResponse) error
		Update(ctx context.Context, in *ZoneDeliveryMatrixModel, out *OkResponse) error
		Delete(ctx context.Context, in *ID, out *OkResponse) error
	}
	type ZoneDeliveryMatrix struct {
		zoneDeliveryMatrix
	}
	h := &zoneDeliveryMatrixHandler{hdlr}
	return s.Handle(s.NewHandler(&ZoneDeliveryMatrix{h}, opts...))
}

type zoneDeliveryMatrixHandler struct {
	ZoneDeliveryMatrixHandler
}

func (h *zoneDeliveryMatrixHandler) Add(ctx context.Context, in *AddZoneDeliveryMatrixParams, out *OkResponse) error {
	return h.ZoneDeliveryMatrixHandler.Add(ctx, in, out)
}

func (h *zoneDeliveryMatrixHandler) Get(ctx context.Context, in *ZoneID, out *GetDeliveryMatrixResponse) error {
	return h.ZoneDeliveryMatrixHandler.Get(ctx, in, out)
}

func (h *zoneDeliveryMatrixHandler) Update(ctx context.Context, in *ZoneDeliveryMatrixModel, out *OkResponse) error {
	return h.ZoneDeliveryMatrixHandler.Update(ctx, in, out)
}

func (h *zoneDeliveryMatrixHandler) Delete(ctx context.Context, in *ID, out *OkResponse) error {
	return h.ZoneDeliveryMatrixHandler.Delete(ctx, in, out)
}

// Api Endpoints for ZonePaymentMethod service

func NewZonePaymentMethodEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ZonePaymentMethod service

type ZonePaymentMethodService interface {
	Add(ctx context.Context, in *AddZonePaymentMethodParams, opts ...client.CallOption) (*OkResponse, error)
	Get(ctx context.Context, in *ZoneID, opts ...client.CallOption) (*ZonePaymentMethodResponse, error)
	Update(ctx context.Context, in *UpdateZonePaymentMethodParams, opts ...client.CallOption) (*OkResponse, error)
	Delete(ctx context.Context, in *ID, opts ...client.CallOption) (*OkResponse, error)
}

type zonePaymentMethodService struct {
	c    client.Client
	name string
}

func NewZonePaymentMethodService(name string, c client.Client) ZonePaymentMethodService {
	return &zonePaymentMethodService{
		c:    c,
		name: name,
	}
}

func (c *zonePaymentMethodService) Add(ctx context.Context, in *AddZonePaymentMethodParams, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "ZonePaymentMethod.Add", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonePaymentMethodService) Get(ctx context.Context, in *ZoneID, opts ...client.CallOption) (*ZonePaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "ZonePaymentMethod.Get", in)
	out := new(ZonePaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonePaymentMethodService) Update(ctx context.Context, in *UpdateZonePaymentMethodParams, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "ZonePaymentMethod.Update", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonePaymentMethodService) Delete(ctx context.Context, in *ID, opts ...client.CallOption) (*OkResponse, error) {
	req := c.c.NewRequest(c.name, "ZonePaymentMethod.Delete", in)
	out := new(OkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ZonePaymentMethod service

type ZonePaymentMethodHandler interface {
	Add(context.Context, *AddZonePaymentMethodParams, *OkResponse) error
	Get(context.Context, *ZoneID, *ZonePaymentMethodResponse) error
	Update(context.Context, *UpdateZonePaymentMethodParams, *OkResponse) error
	Delete(context.Context, *ID, *OkResponse) error
}

func RegisterZonePaymentMethodHandler(s server.Server, hdlr ZonePaymentMethodHandler, opts ...server.HandlerOption) error {
	type zonePaymentMethod interface {
		Add(ctx context.Context, in *AddZonePaymentMethodParams, out *OkResponse) error
		Get(ctx context.Context, in *ZoneID, out *ZonePaymentMethodResponse) error
		Update(ctx context.Context, in *UpdateZonePaymentMethodParams, out *OkResponse) error
		Delete(ctx context.Context, in *ID, out *OkResponse) error
	}
	type ZonePaymentMethod struct {
		zonePaymentMethod
	}
	h := &zonePaymentMethodHandler{hdlr}
	return s.Handle(s.NewHandler(&ZonePaymentMethod{h}, opts...))
}

type zonePaymentMethodHandler struct {
	ZonePaymentMethodHandler
}

func (h *zonePaymentMethodHandler) Add(ctx context.Context, in *AddZonePaymentMethodParams, out *OkResponse) error {
	return h.ZonePaymentMethodHandler.Add(ctx, in, out)
}

func (h *zonePaymentMethodHandler) Get(ctx context.Context, in *ZoneID, out *ZonePaymentMethodResponse) error {
	return h.ZonePaymentMethodHandler.Get(ctx, in, out)
}

func (h *zonePaymentMethodHandler) Update(ctx context.Context, in *UpdateZonePaymentMethodParams, out *OkResponse) error {
	return h.ZonePaymentMethodHandler.Update(ctx, in, out)
}

func (h *zonePaymentMethodHandler) Delete(ctx context.Context, in *ID, out *OkResponse) error {
	return h.ZonePaymentMethodHandler.Delete(ctx, in, out)
}

// Api Endpoints for WinnersCompanies service

func NewWinnersCompaniesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WinnersCompanies service

type WinnersCompaniesService interface {
	Winners(ctx context.Context, in *WinnersParams, opts ...client.CallOption) (*WinnersResponse, error)
}

type winnersCompaniesService struct {
	c    client.Client
	name string
}

func NewWinnersCompaniesService(name string, c client.Client) WinnersCompaniesService {
	return &winnersCompaniesService{
		c:    c,
		name: name,
	}
}

func (c *winnersCompaniesService) Winners(ctx context.Context, in *WinnersParams, opts ...client.CallOption) (*WinnersResponse, error) {
	req := c.c.NewRequest(c.name, "WinnersCompanies.Winners", in)
	out := new(WinnersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WinnersCompanies service

type WinnersCompaniesHandler interface {
	Winners(context.Context, *WinnersParams, *WinnersResponse) error
}

func RegisterWinnersCompaniesHandler(s server.Server, hdlr WinnersCompaniesHandler, opts ...server.HandlerOption) error {
	type winnersCompanies interface {
		Winners(ctx context.Context, in *WinnersParams, out *WinnersResponse) error
	}
	type WinnersCompanies struct {
		winnersCompanies
	}
	h := &winnersCompaniesHandler{hdlr}
	return s.Handle(s.NewHandler(&WinnersCompanies{h}, opts...))
}

type winnersCompaniesHandler struct {
	WinnersCompaniesHandler
}

func (h *winnersCompaniesHandler) Winners(ctx context.Context, in *WinnersParams, out *WinnersResponse) error {
	return h.WinnersCompaniesHandler.Winners(ctx, in, out)
}
