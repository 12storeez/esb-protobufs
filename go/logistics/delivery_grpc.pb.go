// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeliveriesClient is the client API for Deliveries service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveriesClient interface {
	Create(ctx context.Context, in *Delivery, opts ...grpc.CallOption) (*DeliveryId, error)
	Get(ctx context.Context, in *DeliveryId, opts ...grpc.CallOption) (*Delivery, error)
	List(ctx context.Context, in *ListDeliveryRequest, opts ...grpc.CallOption) (*ListDeliveryResponse, error)
	Update(ctx context.Context, in *Delivery, opts ...grpc.CallOption) (*Delivery, error)
	Delete(ctx context.Context, in *DeliveryId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddInterval(ctx context.Context, in *DeliveryInterval, opts ...grpc.CallOption) (*DeliveryInterval, error)
	DeleteInterval(ctx context.Context, in *DeliveryInterval, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deliveriesClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveriesClient(cc grpc.ClientConnInterface) DeliveriesClient {
	return &deliveriesClient{cc}
}

func (c *deliveriesClient) Create(ctx context.Context, in *Delivery, opts ...grpc.CallOption) (*DeliveryId, error) {
	out := new(DeliveryId)
	err := c.cc.Invoke(ctx, "/logistics.Deliveries/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveriesClient) Get(ctx context.Context, in *DeliveryId, opts ...grpc.CallOption) (*Delivery, error) {
	out := new(Delivery)
	err := c.cc.Invoke(ctx, "/logistics.Deliveries/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveriesClient) List(ctx context.Context, in *ListDeliveryRequest, opts ...grpc.CallOption) (*ListDeliveryResponse, error) {
	out := new(ListDeliveryResponse)
	err := c.cc.Invoke(ctx, "/logistics.Deliveries/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveriesClient) Update(ctx context.Context, in *Delivery, opts ...grpc.CallOption) (*Delivery, error) {
	out := new(Delivery)
	err := c.cc.Invoke(ctx, "/logistics.Deliveries/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveriesClient) Delete(ctx context.Context, in *DeliveryId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.Deliveries/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveriesClient) AddInterval(ctx context.Context, in *DeliveryInterval, opts ...grpc.CallOption) (*DeliveryInterval, error) {
	out := new(DeliveryInterval)
	err := c.cc.Invoke(ctx, "/logistics.Deliveries/AddInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveriesClient) DeleteInterval(ctx context.Context, in *DeliveryInterval, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.Deliveries/DeleteInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveriesServer is the server API for Deliveries service.
// All implementations must embed UnimplementedDeliveriesServer
// for forward compatibility
type DeliveriesServer interface {
	Create(context.Context, *Delivery) (*DeliveryId, error)
	Get(context.Context, *DeliveryId) (*Delivery, error)
	List(context.Context, *ListDeliveryRequest) (*ListDeliveryResponse, error)
	Update(context.Context, *Delivery) (*Delivery, error)
	Delete(context.Context, *DeliveryId) (*emptypb.Empty, error)
	AddInterval(context.Context, *DeliveryInterval) (*DeliveryInterval, error)
	DeleteInterval(context.Context, *DeliveryInterval) (*emptypb.Empty, error)
	mustEmbedUnimplementedDeliveriesServer()
}

// UnimplementedDeliveriesServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveriesServer struct {
}

func (UnimplementedDeliveriesServer) Create(context.Context, *Delivery) (*DeliveryId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDeliveriesServer) Get(context.Context, *DeliveryId) (*Delivery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDeliveriesServer) List(context.Context, *ListDeliveryRequest) (*ListDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDeliveriesServer) Update(context.Context, *Delivery) (*Delivery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDeliveriesServer) Delete(context.Context, *DeliveryId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeliveriesServer) AddInterval(context.Context, *DeliveryInterval) (*DeliveryInterval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterval not implemented")
}
func (UnimplementedDeliveriesServer) DeleteInterval(context.Context, *DeliveryInterval) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterval not implemented")
}
func (UnimplementedDeliveriesServer) mustEmbedUnimplementedDeliveriesServer() {}

// UnsafeDeliveriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveriesServer will
// result in compilation errors.
type UnsafeDeliveriesServer interface {
	mustEmbedUnimplementedDeliveriesServer()
}

func RegisterDeliveriesServer(s grpc.ServiceRegistrar, srv DeliveriesServer) {
	s.RegisterService(&Deliveries_ServiceDesc, srv)
}

func _Deliveries_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Delivery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveriesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Deliveries/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveriesServer).Create(ctx, req.(*Delivery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deliveries_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveriesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Deliveries/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveriesServer).Get(ctx, req.(*DeliveryId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deliveries_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveriesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Deliveries/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveriesServer).List(ctx, req.(*ListDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deliveries_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Delivery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveriesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Deliveries/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveriesServer).Update(ctx, req.(*Delivery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deliveries_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveriesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Deliveries/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveriesServer).Delete(ctx, req.(*DeliveryId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deliveries_AddInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryInterval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveriesServer).AddInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Deliveries/AddInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveriesServer).AddInterval(ctx, req.(*DeliveryInterval))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deliveries_DeleteInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryInterval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveriesServer).DeleteInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Deliveries/DeleteInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveriesServer).DeleteInterval(ctx, req.(*DeliveryInterval))
	}
	return interceptor(ctx, in, info, handler)
}

// Deliveries_ServiceDesc is the grpc.ServiceDesc for Deliveries service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deliveries_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.Deliveries",
	HandlerType: (*DeliveriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Deliveries_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Deliveries_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Deliveries_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Deliveries_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Deliveries_Delete_Handler,
		},
		{
			MethodName: "AddInterval",
			Handler:    _Deliveries_AddInterval_Handler,
		},
		{
			MethodName: "DeleteInterval",
			Handler:    _Deliveries_DeleteInterval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logistics/delivery.proto",
}
