// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/usedesk.proto

package usedesk

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CSI service

func NewCSIEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CSI service

type CSIService interface {
	Save(ctx context.Context, in *SaveParams, opts ...client.CallOption) (*SaveResponse, error)
}

type cSIService struct {
	c    client.Client
	name string
}

func NewCSIService(name string, c client.Client) CSIService {
	return &cSIService{
		c:    c,
		name: name,
	}
}

func (c *cSIService) Save(ctx context.Context, in *SaveParams, opts ...client.CallOption) (*SaveResponse, error) {
	req := c.c.NewRequest(c.name, "CSI.Save", in)
	out := new(SaveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CSI service

type CSIHandler interface {
	Save(context.Context, *SaveParams, *SaveResponse) error
}

func RegisterCSIHandler(s server.Server, hdlr CSIHandler, opts ...server.HandlerOption) error {
	type cSI interface {
		Save(ctx context.Context, in *SaveParams, out *SaveResponse) error
	}
	type CSI struct {
		cSI
	}
	h := &cSIHandler{hdlr}
	return s.Handle(s.NewHandler(&CSI{h}, opts...))
}

type cSIHandler struct {
	CSIHandler
}

func (h *cSIHandler) Save(ctx context.Context, in *SaveParams, out *SaveResponse) error {
	return h.CSIHandler.Save(ctx, in, out)
}
