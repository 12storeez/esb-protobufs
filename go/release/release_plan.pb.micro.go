// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/internal/release_plan.proto

package release

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ArticlesRelease service

func NewArticlesReleaseEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ArticlesRelease service

type ArticlesReleaseService interface {
	Create(ctx context.Context, in *ParamsCreateArticle, opts ...client.CallOption) (*ArticleReleaseActionResponse, error)
	Get(ctx context.Context, in *ParamsGetArticleRelease, opts ...client.CallOption) (*ArticleReleaseList, error)
	GetById(ctx context.Context, in *ArticlesReleaseId, opts ...client.CallOption) (*ArticleRelease, error)
	Update(ctx context.Context, in *ParamsCreateArticle, opts ...client.CallOption) (*ArticleReleaseActionResponse, error)
	Delete(ctx context.Context, in *ArticlesReleaseId, opts ...client.CallOption) (*ArticleReleaseActionResponse, error)
}

type articlesReleaseService struct {
	c    client.Client
	name string
}

func NewArticlesReleaseService(name string, c client.Client) ArticlesReleaseService {
	return &articlesReleaseService{
		c:    c,
		name: name,
	}
}

func (c *articlesReleaseService) Create(ctx context.Context, in *ParamsCreateArticle, opts ...client.CallOption) (*ArticleReleaseActionResponse, error) {
	req := c.c.NewRequest(c.name, "ArticlesRelease.Create", in)
	out := new(ArticleReleaseActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesReleaseService) Get(ctx context.Context, in *ParamsGetArticleRelease, opts ...client.CallOption) (*ArticleReleaseList, error) {
	req := c.c.NewRequest(c.name, "ArticlesRelease.Get", in)
	out := new(ArticleReleaseList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesReleaseService) GetById(ctx context.Context, in *ArticlesReleaseId, opts ...client.CallOption) (*ArticleRelease, error) {
	req := c.c.NewRequest(c.name, "ArticlesRelease.GetById", in)
	out := new(ArticleRelease)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesReleaseService) Update(ctx context.Context, in *ParamsCreateArticle, opts ...client.CallOption) (*ArticleReleaseActionResponse, error) {
	req := c.c.NewRequest(c.name, "ArticlesRelease.Update", in)
	out := new(ArticleReleaseActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesReleaseService) Delete(ctx context.Context, in *ArticlesReleaseId, opts ...client.CallOption) (*ArticleReleaseActionResponse, error) {
	req := c.c.NewRequest(c.name, "ArticlesRelease.Delete", in)
	out := new(ArticleReleaseActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ArticlesRelease service

type ArticlesReleaseHandler interface {
	Create(context.Context, *ParamsCreateArticle, *ArticleReleaseActionResponse) error
	Get(context.Context, *ParamsGetArticleRelease, *ArticleReleaseList) error
	GetById(context.Context, *ArticlesReleaseId, *ArticleRelease) error
	Update(context.Context, *ParamsCreateArticle, *ArticleReleaseActionResponse) error
	Delete(context.Context, *ArticlesReleaseId, *ArticleReleaseActionResponse) error
}

func RegisterArticlesReleaseHandler(s server.Server, hdlr ArticlesReleaseHandler, opts ...server.HandlerOption) error {
	type articlesRelease interface {
		Create(ctx context.Context, in *ParamsCreateArticle, out *ArticleReleaseActionResponse) error
		Get(ctx context.Context, in *ParamsGetArticleRelease, out *ArticleReleaseList) error
		GetById(ctx context.Context, in *ArticlesReleaseId, out *ArticleRelease) error
		Update(ctx context.Context, in *ParamsCreateArticle, out *ArticleReleaseActionResponse) error
		Delete(ctx context.Context, in *ArticlesReleaseId, out *ArticleReleaseActionResponse) error
	}
	type ArticlesRelease struct {
		articlesRelease
	}
	h := &articlesReleaseHandler{hdlr}
	return s.Handle(s.NewHandler(&ArticlesRelease{h}, opts...))
}

type articlesReleaseHandler struct {
	ArticlesReleaseHandler
}

func (h *articlesReleaseHandler) Create(ctx context.Context, in *ParamsCreateArticle, out *ArticleReleaseActionResponse) error {
	return h.ArticlesReleaseHandler.Create(ctx, in, out)
}

func (h *articlesReleaseHandler) Get(ctx context.Context, in *ParamsGetArticleRelease, out *ArticleReleaseList) error {
	return h.ArticlesReleaseHandler.Get(ctx, in, out)
}

func (h *articlesReleaseHandler) GetById(ctx context.Context, in *ArticlesReleaseId, out *ArticleRelease) error {
	return h.ArticlesReleaseHandler.GetById(ctx, in, out)
}

func (h *articlesReleaseHandler) Update(ctx context.Context, in *ParamsCreateArticle, out *ArticleReleaseActionResponse) error {
	return h.ArticlesReleaseHandler.Update(ctx, in, out)
}

func (h *articlesReleaseHandler) Delete(ctx context.Context, in *ArticlesReleaseId, out *ArticleReleaseActionResponse) error {
	return h.ArticlesReleaseHandler.Delete(ctx, in, out)
}
