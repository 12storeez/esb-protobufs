// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: proto/mercaux.proto

package mercaux

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MercauxServiceClient is the client API for MercauxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MercauxServiceClient interface {
	Stocks(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListStocksResponse, error)
	Catalog(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCatalogResponse, error)
}

type mercauxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMercauxServiceClient(cc grpc.ClientConnInterface) MercauxServiceClient {
	return &mercauxServiceClient{cc}
}

func (c *mercauxServiceClient) Stocks(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListStocksResponse, error) {
	out := new(ListStocksResponse)
	err := c.cc.Invoke(ctx, "/mercaux.MercauxService/Stocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mercauxServiceClient) Catalog(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCatalogResponse, error) {
	out := new(ListCatalogResponse)
	err := c.cc.Invoke(ctx, "/mercaux.MercauxService/Catalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MercauxServiceServer is the server API for MercauxService service.
// All implementations should embed UnimplementedMercauxServiceServer
// for forward compatibility
type MercauxServiceServer interface {
	Stocks(context.Context, *ListRequest) (*ListStocksResponse, error)
	Catalog(context.Context, *ListRequest) (*ListCatalogResponse, error)
}

// UnimplementedMercauxServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMercauxServiceServer struct {
}

func (UnimplementedMercauxServiceServer) Stocks(context.Context, *ListRequest) (*ListStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stocks not implemented")
}
func (UnimplementedMercauxServiceServer) Catalog(context.Context, *ListRequest) (*ListCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Catalog not implemented")
}

// UnsafeMercauxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MercauxServiceServer will
// result in compilation errors.
type UnsafeMercauxServiceServer interface {
	mustEmbedUnimplementedMercauxServiceServer()
}

func RegisterMercauxServiceServer(s grpc.ServiceRegistrar, srv MercauxServiceServer) {
	s.RegisterService(&MercauxService_ServiceDesc, srv)
}

func _MercauxService_Stocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MercauxServiceServer).Stocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercaux.MercauxService/Stocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MercauxServiceServer).Stocks(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MercauxService_Catalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MercauxServiceServer).Catalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercaux.MercauxService/Catalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MercauxServiceServer).Catalog(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MercauxService_ServiceDesc is the grpc.ServiceDesc for MercauxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MercauxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mercaux.MercauxService",
	HandlerType: (*MercauxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stocks",
			Handler:    _MercauxService_Stocks_Handler,
		},
		{
			MethodName: "Catalog",
			Handler:    _MercauxService_Catalog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mercaux.proto",
}

// StoresClient is the client API for Stores service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoresClient interface {
	Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StoresGetResponse, error)
}

type storesClient struct {
	cc grpc.ClientConnInterface
}

func NewStoresClient(cc grpc.ClientConnInterface) StoresClient {
	return &storesClient{cc}
}

func (c *storesClient) Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StoresGetResponse, error) {
	out := new(StoresGetResponse)
	err := c.cc.Invoke(ctx, "/mercaux.Stores/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoresServer is the server API for Stores service.
// All implementations should embed UnimplementedStoresServer
// for forward compatibility
type StoresServer interface {
	Get(context.Context, *emptypb.Empty) (*StoresGetResponse, error)
}

// UnimplementedStoresServer should be embedded to have forward compatible implementations.
type UnimplementedStoresServer struct {
}

func (UnimplementedStoresServer) Get(context.Context, *emptypb.Empty) (*StoresGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeStoresServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoresServer will
// result in compilation errors.
type UnsafeStoresServer interface {
	mustEmbedUnimplementedStoresServer()
}

func RegisterStoresServer(s grpc.ServiceRegistrar, srv StoresServer) {
	s.RegisterService(&Stores_ServiceDesc, srv)
}

func _Stores_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercaux.Stores/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresServer).Get(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Stores_ServiceDesc is the grpc.ServiceDesc for Stores service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stores_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mercaux.Stores",
	HandlerType: (*StoresServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Stores_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mercaux.proto",
}

// SellersClient is the client API for Sellers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SellersClient interface {
	Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SellersGetResponse, error)
}

type sellersClient struct {
	cc grpc.ClientConnInterface
}

func NewSellersClient(cc grpc.ClientConnInterface) SellersClient {
	return &sellersClient{cc}
}

func (c *sellersClient) Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SellersGetResponse, error) {
	out := new(SellersGetResponse)
	err := c.cc.Invoke(ctx, "/mercaux.Sellers/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SellersServer is the server API for Sellers service.
// All implementations should embed UnimplementedSellersServer
// for forward compatibility
type SellersServer interface {
	Get(context.Context, *emptypb.Empty) (*SellersGetResponse, error)
}

// UnimplementedSellersServer should be embedded to have forward compatible implementations.
type UnimplementedSellersServer struct {
}

func (UnimplementedSellersServer) Get(context.Context, *emptypb.Empty) (*SellersGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeSellersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SellersServer will
// result in compilation errors.
type UnsafeSellersServer interface {
	mustEmbedUnimplementedSellersServer()
}

func RegisterSellersServer(s grpc.ServiceRegistrar, srv SellersServer) {
	s.RegisterService(&Sellers_ServiceDesc, srv)
}

func _Sellers_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercaux.Sellers/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellersServer).Get(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Sellers_ServiceDesc is the grpc.ServiceDesc for Sellers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sellers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mercaux.Sellers",
	HandlerType: (*SellersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Sellers_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mercaux.proto",
}

// OrdersClient is the client API for Orders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdersClient interface {
	NewOrder(ctx context.Context, in *OrdersNewParams, opts ...grpc.CallOption) (*OrdersNewResponse, error)
}

type ordersClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersClient(cc grpc.ClientConnInterface) OrdersClient {
	return &ordersClient{cc}
}

func (c *ordersClient) NewOrder(ctx context.Context, in *OrdersNewParams, opts ...grpc.CallOption) (*OrdersNewResponse, error) {
	out := new(OrdersNewResponse)
	err := c.cc.Invoke(ctx, "/mercaux.Orders/NewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdersServer is the server API for Orders service.
// All implementations should embed UnimplementedOrdersServer
// for forward compatibility
type OrdersServer interface {
	NewOrder(context.Context, *OrdersNewParams) (*OrdersNewResponse, error)
}

// UnimplementedOrdersServer should be embedded to have forward compatible implementations.
type UnimplementedOrdersServer struct {
}

func (UnimplementedOrdersServer) NewOrder(context.Context, *OrdersNewParams) (*OrdersNewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOrder not implemented")
}

// UnsafeOrdersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdersServer will
// result in compilation errors.
type UnsafeOrdersServer interface {
	mustEmbedUnimplementedOrdersServer()
}

func RegisterOrdersServer(s grpc.ServiceRegistrar, srv OrdersServer) {
	s.RegisterService(&Orders_ServiceDesc, srv)
}

func _Orders_NewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersNewParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).NewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercaux.Orders/NewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).NewOrder(ctx, req.(*OrdersNewParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Orders_ServiceDesc is the grpc.ServiceDesc for Orders service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orders_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mercaux.Orders",
	HandlerType: (*OrdersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewOrder",
			Handler:    _Orders_NewOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mercaux.proto",
}
