// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MatricesClient is the client API for Matrices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatricesClient interface {
	Create(ctx context.Context, in *CreateMatrixRequest, opts ...grpc.CallOption) (*CreateMatrixResponse, error)
	Get(ctx context.Context, in *GetMatrixRequest, opts ...grpc.CallOption) (*Matrix, error)
	List(ctx context.Context, in *ListMatrixRequest, opts ...grpc.CallOption) (*ListMatrixResponse, error)
	Update(ctx context.Context, in *UpdateMatrixRequest, opts ...grpc.CallOption) (*Matrix, error)
	Delete(ctx context.Context, in *DeleteMatrixRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddDeliveryIntervals(ctx context.Context, in *AddDeliveryIntervalsRequest, opts ...grpc.CallOption) (*AddDeliveryIntervalsResponse, error)
	DeleteDeliveryIntervals(ctx context.Context, in *DeleteDeliveryIntervalsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type matricesClient struct {
	cc grpc.ClientConnInterface
}

func NewMatricesClient(cc grpc.ClientConnInterface) MatricesClient {
	return &matricesClient{cc}
}

func (c *matricesClient) Create(ctx context.Context, in *CreateMatrixRequest, opts ...grpc.CallOption) (*CreateMatrixResponse, error) {
	out := new(CreateMatrixResponse)
	err := c.cc.Invoke(ctx, "/logistics.Matrices/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matricesClient) Get(ctx context.Context, in *GetMatrixRequest, opts ...grpc.CallOption) (*Matrix, error) {
	out := new(Matrix)
	err := c.cc.Invoke(ctx, "/logistics.Matrices/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matricesClient) List(ctx context.Context, in *ListMatrixRequest, opts ...grpc.CallOption) (*ListMatrixResponse, error) {
	out := new(ListMatrixResponse)
	err := c.cc.Invoke(ctx, "/logistics.Matrices/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matricesClient) Update(ctx context.Context, in *UpdateMatrixRequest, opts ...grpc.CallOption) (*Matrix, error) {
	out := new(Matrix)
	err := c.cc.Invoke(ctx, "/logistics.Matrices/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matricesClient) Delete(ctx context.Context, in *DeleteMatrixRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.Matrices/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matricesClient) AddDeliveryIntervals(ctx context.Context, in *AddDeliveryIntervalsRequest, opts ...grpc.CallOption) (*AddDeliveryIntervalsResponse, error) {
	out := new(AddDeliveryIntervalsResponse)
	err := c.cc.Invoke(ctx, "/logistics.Matrices/AddDeliveryIntervals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matricesClient) DeleteDeliveryIntervals(ctx context.Context, in *DeleteDeliveryIntervalsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.Matrices/DeleteDeliveryIntervals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatricesServer is the server API for Matrices service.
// All implementations must embed UnimplementedMatricesServer
// for forward compatibility
type MatricesServer interface {
	Create(context.Context, *CreateMatrixRequest) (*CreateMatrixResponse, error)
	Get(context.Context, *GetMatrixRequest) (*Matrix, error)
	List(context.Context, *ListMatrixRequest) (*ListMatrixResponse, error)
	Update(context.Context, *UpdateMatrixRequest) (*Matrix, error)
	Delete(context.Context, *DeleteMatrixRequest) (*emptypb.Empty, error)
	AddDeliveryIntervals(context.Context, *AddDeliveryIntervalsRequest) (*AddDeliveryIntervalsResponse, error)
	DeleteDeliveryIntervals(context.Context, *DeleteDeliveryIntervalsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMatricesServer()
}

// UnimplementedMatricesServer must be embedded to have forward compatible implementations.
type UnimplementedMatricesServer struct {
}

func (UnimplementedMatricesServer) Create(context.Context, *CreateMatrixRequest) (*CreateMatrixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMatricesServer) Get(context.Context, *GetMatrixRequest) (*Matrix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMatricesServer) List(context.Context, *ListMatrixRequest) (*ListMatrixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMatricesServer) Update(context.Context, *UpdateMatrixRequest) (*Matrix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMatricesServer) Delete(context.Context, *DeleteMatrixRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMatricesServer) AddDeliveryIntervals(context.Context, *AddDeliveryIntervalsRequest) (*AddDeliveryIntervalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeliveryIntervals not implemented")
}
func (UnimplementedMatricesServer) DeleteDeliveryIntervals(context.Context, *DeleteDeliveryIntervalsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeliveryIntervals not implemented")
}
func (UnimplementedMatricesServer) mustEmbedUnimplementedMatricesServer() {}

// UnsafeMatricesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatricesServer will
// result in compilation errors.
type UnsafeMatricesServer interface {
	mustEmbedUnimplementedMatricesServer()
}

func RegisterMatricesServer(s grpc.ServiceRegistrar, srv MatricesServer) {
	s.RegisterService(&_Matrices_serviceDesc, srv)
}

func _Matrices_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMatrixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatricesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Matrices/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatricesServer).Create(ctx, req.(*CreateMatrixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matrices_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatrixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatricesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Matrices/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatricesServer).Get(ctx, req.(*GetMatrixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matrices_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMatrixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatricesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Matrices/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatricesServer).List(ctx, req.(*ListMatrixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matrices_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMatrixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatricesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Matrices/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatricesServer).Update(ctx, req.(*UpdateMatrixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matrices_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMatrixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatricesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Matrices/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatricesServer).Delete(ctx, req.(*DeleteMatrixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matrices_AddDeliveryIntervals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeliveryIntervalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatricesServer).AddDeliveryIntervals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Matrices/AddDeliveryIntervals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatricesServer).AddDeliveryIntervals(ctx, req.(*AddDeliveryIntervalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matrices_DeleteDeliveryIntervals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeliveryIntervalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatricesServer).DeleteDeliveryIntervals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Matrices/DeleteDeliveryIntervals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatricesServer).DeleteDeliveryIntervals(ctx, req.(*DeleteDeliveryIntervalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Matrices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.Matrices",
	HandlerType: (*MatricesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Matrices_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Matrices_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Matrices_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Matrices_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Matrices_Delete_Handler,
		},
		{
			MethodName: "AddDeliveryIntervals",
			Handler:    _Matrices_AddDeliveryIntervals_Handler,
		},
		{
			MethodName: "DeleteDeliveryIntervals",
			Handler:    _Matrices_DeleteDeliveryIntervals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logistics/matrix.proto",
}
