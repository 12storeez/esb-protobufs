// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: marketplace-sku.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeliveryService_GetSKU_FullMethodName       = "/app.grpc.marketplace.DeliveryService/GetSKU"
	DeliveryService_UpdateStocks_FullMethodName = "/app.grpc.marketplace.DeliveryService/UpdateStocks"
)

// DeliveryServiceClient is the client API for DeliveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryServiceClient interface {
	GetSKU(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetSkuResponse, error)
	UpdateStocks(ctx context.Context, in *UpdateStocksRequest, opts ...grpc.CallOption) (*GetSkuResponse, error)
}

type deliveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryServiceClient(cc grpc.ClientConnInterface) DeliveryServiceClient {
	return &deliveryServiceClient{cc}
}

func (c *deliveryServiceClient) GetSKU(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetSkuResponse, error) {
	out := new(GetSkuResponse)
	err := c.cc.Invoke(ctx, DeliveryService_GetSKU_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) UpdateStocks(ctx context.Context, in *UpdateStocksRequest, opts ...grpc.CallOption) (*GetSkuResponse, error) {
	out := new(GetSkuResponse)
	err := c.cc.Invoke(ctx, DeliveryService_UpdateStocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryServiceServer is the server API for DeliveryService service.
// All implementations should embed UnimplementedDeliveryServiceServer
// for forward compatibility
type DeliveryServiceServer interface {
	GetSKU(context.Context, *EmptyRequest) (*GetSkuResponse, error)
	UpdateStocks(context.Context, *UpdateStocksRequest) (*GetSkuResponse, error)
}

// UnimplementedDeliveryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeliveryServiceServer struct {
}

func (UnimplementedDeliveryServiceServer) GetSKU(context.Context, *EmptyRequest) (*GetSkuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSKU not implemented")
}
func (UnimplementedDeliveryServiceServer) UpdateStocks(context.Context, *UpdateStocksRequest) (*GetSkuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStocks not implemented")
}

// UnsafeDeliveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryServiceServer will
// result in compilation errors.
type UnsafeDeliveryServiceServer interface {
	mustEmbedUnimplementedDeliveryServiceServer()
}

func RegisterDeliveryServiceServer(s grpc.ServiceRegistrar, srv DeliveryServiceServer) {
	s.RegisterService(&DeliveryService_ServiceDesc, srv)
}

func _DeliveryService_GetSKU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).GetSKU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_GetSKU_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).GetSKU(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_UpdateStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).UpdateStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryService_UpdateStocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).UpdateStocks(ctx, req.(*UpdateStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryService_ServiceDesc is the grpc.ServiceDesc for DeliveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.grpc.marketplace.DeliveryService",
	HandlerType: (*DeliveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSKU",
			Handler:    _DeliveryService_GetSKU_Handler,
		},
		{
			MethodName: "UpdateStocks",
			Handler:    _DeliveryService_UpdateStocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketplace-sku.proto",
}

const (
	OrderService_UpdateOrderStatus_FullMethodName     = "/app.grpc.marketplace.OrderService/UpdateOrderStatus"
	OrderService_UpdateOrderItemStatus_FullMethodName = "/app.grpc.marketplace.OrderService/UpdateOrderItemStatus"
	OrderService_UpdateOrderNumber_FullMethodName     = "/app.grpc.marketplace.OrderService/UpdateOrderNumber"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	UpdateOrderStatus(ctx context.Context, in *OrderStatusUpdateRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateOrderItemStatus(ctx context.Context, in *OrderItemStatusUpdateRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateOrderNumber(ctx context.Context, in *UpdateOrderNumberRequest, opts ...grpc.CallOption) (*Response, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) UpdateOrderStatus(ctx context.Context, in *OrderStatusUpdateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, OrderService_UpdateOrderStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateOrderItemStatus(ctx context.Context, in *OrderItemStatusUpdateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, OrderService_UpdateOrderItemStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UpdateOrderNumber(ctx context.Context, in *UpdateOrderNumberRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, OrderService_UpdateOrderNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations should embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	UpdateOrderStatus(context.Context, *OrderStatusUpdateRequest) (*Response, error)
	UpdateOrderItemStatus(context.Context, *OrderItemStatusUpdateRequest) (*Response, error)
	UpdateOrderNumber(context.Context, *UpdateOrderNumberRequest) (*Response, error)
}

// UnimplementedOrderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) UpdateOrderStatus(context.Context, *OrderStatusUpdateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedOrderServiceServer) UpdateOrderItemStatus(context.Context, *OrderItemStatusUpdateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderItemStatus not implemented")
}
func (UnimplementedOrderServiceServer) UpdateOrderNumber(context.Context, *UpdateOrderNumberRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderNumber not implemented")
}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderStatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdateOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrderStatus(ctx, req.(*OrderStatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateOrderItemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemStatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrderItemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdateOrderItemStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrderItemStatus(ctx, req.(*OrderItemStatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UpdateOrderNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrderNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdateOrderNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrderNumber(ctx, req.(*UpdateOrderNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.grpc.marketplace.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _OrderService_UpdateOrderStatus_Handler,
		},
		{
			MethodName: "UpdateOrderItemStatus",
			Handler:    _OrderService_UpdateOrderItemStatus_Handler,
		},
		{
			MethodName: "UpdateOrderNumber",
			Handler:    _OrderService_UpdateOrderNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketplace-sku.proto",
}
