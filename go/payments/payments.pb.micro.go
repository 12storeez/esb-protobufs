// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/payments.proto

package payments

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Payments service

func NewPaymentsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{},
		&api.Endpoint{},
		&api.Endpoint{},
	}
}

// Client API for Payments service

type PaymentsService interface {
	GetCardsByUserID(ctx context.Context, in *ParamsGetCardByUserID, opts ...client.CallOption) (*ResponseGetCardByUserID, error)
	SaveUserCard(ctx context.Context, in *UserCard, opts ...client.CallOption) (*ResponseSuccess, error)
	DeleteCardByID(ctx context.Context, in *ParamsDeleteCardByID, opts ...client.CallOption) (*ResponseSuccess, error)
}

type paymentsService struct {
	c    client.Client
	name string
}

func NewPaymentsService(name string, c client.Client) PaymentsService {
	return &paymentsService{
		c:    c,
		name: name,
	}
}

func (c *paymentsService) GetCardsByUserID(ctx context.Context, in *ParamsGetCardByUserID, opts ...client.CallOption) (*ResponseGetCardByUserID, error) {
	req := c.c.NewRequest(c.name, "Payments.GetCardsByUserID", in)
	out := new(ResponseGetCardByUserID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsService) SaveUserCard(ctx context.Context, in *UserCard, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "Payments.SaveUserCard", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsService) DeleteCardByID(ctx context.Context, in *ParamsDeleteCardByID, opts ...client.CallOption) (*ResponseSuccess, error) {
	req := c.c.NewRequest(c.name, "Payments.DeleteCardByID", in)
	out := new(ResponseSuccess)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Payments service

type PaymentsHandler interface {
	GetCardsByUserID(context.Context, *ParamsGetCardByUserID, *ResponseGetCardByUserID) error
	SaveUserCard(context.Context, *UserCard, *ResponseSuccess) error
	DeleteCardByID(context.Context, *ParamsDeleteCardByID, *ResponseSuccess) error
}

func RegisterPaymentsHandler(s server.Server, hdlr PaymentsHandler, opts ...server.HandlerOption) error {
	type payments interface {
		GetCardsByUserID(ctx context.Context, in *ParamsGetCardByUserID, out *ResponseGetCardByUserID) error
		SaveUserCard(ctx context.Context, in *UserCard, out *ResponseSuccess) error
		DeleteCardByID(ctx context.Context, in *ParamsDeleteCardByID, out *ResponseSuccess) error
	}
	type Payments struct {
		payments
	}
	h := &paymentsHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{}))
	return s.Handle(s.NewHandler(&Payments{h}, opts...))
}

type paymentsHandler struct {
	PaymentsHandler
}

func (h *paymentsHandler) GetCardsByUserID(ctx context.Context, in *ParamsGetCardByUserID, out *ResponseGetCardByUserID) error {
	return h.PaymentsHandler.GetCardsByUserID(ctx, in, out)
}

func (h *paymentsHandler) SaveUserCard(ctx context.Context, in *UserCard, out *ResponseSuccess) error {
	return h.PaymentsHandler.SaveUserCard(ctx, in, out)
}

func (h *paymentsHandler) DeleteCardByID(ctx context.Context, in *ParamsDeleteCardByID, out *ResponseSuccess) error {
	return h.PaymentsHandler.DeleteCardByID(ctx, in, out)
}
