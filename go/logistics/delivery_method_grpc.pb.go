// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DeliveryMethodsClient is the client API for DeliveryMethods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryMethodsClient interface {
	CreateDeliveryMethod(ctx context.Context, in *CreateDeliveryMethodRequest, opts ...grpc.CallOption) (*CreateDeliveryMethodResponse, error)
	GetDeliveryMethod(ctx context.Context, in *GetDeliveryMethodRequest, opts ...grpc.CallOption) (*DeliveryMethod, error)
	ListDeliveryMethods(ctx context.Context, in *ListDeliveryMethodsRequest, opts ...grpc.CallOption) (*ListDeliveryMethodsResponse, error)
	UpdateDeliveryMethod(ctx context.Context, in *UpdateDeliveryMethodRequest, opts ...grpc.CallOption) (*DeliveryMethod, error)
	DeleteDeliveryMethod(ctx context.Context, in *DeliveryMethodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deliveryMethodsClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryMethodsClient(cc grpc.ClientConnInterface) DeliveryMethodsClient {
	return &deliveryMethodsClient{cc}
}

func (c *deliveryMethodsClient) CreateDeliveryMethod(ctx context.Context, in *CreateDeliveryMethodRequest, opts ...grpc.CallOption) (*CreateDeliveryMethodResponse, error) {
	out := new(CreateDeliveryMethodResponse)
	err := c.cc.Invoke(ctx, "/logistics.DeliveryMethods/CreateDeliveryMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryMethodsClient) GetDeliveryMethod(ctx context.Context, in *GetDeliveryMethodRequest, opts ...grpc.CallOption) (*DeliveryMethod, error) {
	out := new(DeliveryMethod)
	err := c.cc.Invoke(ctx, "/logistics.DeliveryMethods/GetDeliveryMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryMethodsClient) ListDeliveryMethods(ctx context.Context, in *ListDeliveryMethodsRequest, opts ...grpc.CallOption) (*ListDeliveryMethodsResponse, error) {
	out := new(ListDeliveryMethodsResponse)
	err := c.cc.Invoke(ctx, "/logistics.DeliveryMethods/ListDeliveryMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryMethodsClient) UpdateDeliveryMethod(ctx context.Context, in *UpdateDeliveryMethodRequest, opts ...grpc.CallOption) (*DeliveryMethod, error) {
	out := new(DeliveryMethod)
	err := c.cc.Invoke(ctx, "/logistics.DeliveryMethods/UpdateDeliveryMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryMethodsClient) DeleteDeliveryMethod(ctx context.Context, in *DeliveryMethodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.DeliveryMethods/DeleteDeliveryMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryMethodsServer is the server API for DeliveryMethods service.
// All implementations must embed UnimplementedDeliveryMethodsServer
// for forward compatibility
type DeliveryMethodsServer interface {
	CreateDeliveryMethod(context.Context, *CreateDeliveryMethodRequest) (*CreateDeliveryMethodResponse, error)
	GetDeliveryMethod(context.Context, *GetDeliveryMethodRequest) (*DeliveryMethod, error)
	ListDeliveryMethods(context.Context, *ListDeliveryMethodsRequest) (*ListDeliveryMethodsResponse, error)
	UpdateDeliveryMethod(context.Context, *UpdateDeliveryMethodRequest) (*DeliveryMethod, error)
	DeleteDeliveryMethod(context.Context, *DeliveryMethodRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDeliveryMethodsServer()
}

// UnimplementedDeliveryMethodsServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveryMethodsServer struct {
}

func (UnimplementedDeliveryMethodsServer) CreateDeliveryMethod(context.Context, *CreateDeliveryMethodRequest) (*CreateDeliveryMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeliveryMethod not implemented")
}
func (UnimplementedDeliveryMethodsServer) GetDeliveryMethod(context.Context, *GetDeliveryMethodRequest) (*DeliveryMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryMethod not implemented")
}
func (UnimplementedDeliveryMethodsServer) ListDeliveryMethods(context.Context, *ListDeliveryMethodsRequest) (*ListDeliveryMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeliveryMethods not implemented")
}
func (UnimplementedDeliveryMethodsServer) UpdateDeliveryMethod(context.Context, *UpdateDeliveryMethodRequest) (*DeliveryMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeliveryMethod not implemented")
}
func (UnimplementedDeliveryMethodsServer) DeleteDeliveryMethod(context.Context, *DeliveryMethodRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeliveryMethod not implemented")
}
func (UnimplementedDeliveryMethodsServer) mustEmbedUnimplementedDeliveryMethodsServer() {}

// UnsafeDeliveryMethodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryMethodsServer will
// result in compilation errors.
type UnsafeDeliveryMethodsServer interface {
	mustEmbedUnimplementedDeliveryMethodsServer()
}

func RegisterDeliveryMethodsServer(s grpc.ServiceRegistrar, srv DeliveryMethodsServer) {
	s.RegisterService(&_DeliveryMethods_serviceDesc, srv)
}

func _DeliveryMethods_CreateDeliveryMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeliveryMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryMethodsServer).CreateDeliveryMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.DeliveryMethods/CreateDeliveryMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryMethodsServer).CreateDeliveryMethod(ctx, req.(*CreateDeliveryMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryMethods_GetDeliveryMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryMethodsServer).GetDeliveryMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.DeliveryMethods/GetDeliveryMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryMethodsServer).GetDeliveryMethod(ctx, req.(*GetDeliveryMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryMethods_ListDeliveryMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeliveryMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryMethodsServer).ListDeliveryMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.DeliveryMethods/ListDeliveryMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryMethodsServer).ListDeliveryMethods(ctx, req.(*ListDeliveryMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryMethods_UpdateDeliveryMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeliveryMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryMethodsServer).UpdateDeliveryMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.DeliveryMethods/UpdateDeliveryMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryMethodsServer).UpdateDeliveryMethod(ctx, req.(*UpdateDeliveryMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryMethods_DeleteDeliveryMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryMethodsServer).DeleteDeliveryMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.DeliveryMethods/DeleteDeliveryMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryMethodsServer).DeleteDeliveryMethod(ctx, req.(*DeliveryMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeliveryMethods_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.DeliveryMethods",
	HandlerType: (*DeliveryMethodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeliveryMethod",
			Handler:    _DeliveryMethods_CreateDeliveryMethod_Handler,
		},
		{
			MethodName: "GetDeliveryMethod",
			Handler:    _DeliveryMethods_GetDeliveryMethod_Handler,
		},
		{
			MethodName: "ListDeliveryMethods",
			Handler:    _DeliveryMethods_ListDeliveryMethods_Handler,
		},
		{
			MethodName: "UpdateDeliveryMethod",
			Handler:    _DeliveryMethods_UpdateDeliveryMethod_Handler,
		},
		{
			MethodName: "DeleteDeliveryMethod",
			Handler:    _DeliveryMethods_DeleteDeliveryMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logistics/delivery_method.proto",
}
