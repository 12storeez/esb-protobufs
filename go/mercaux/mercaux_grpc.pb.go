// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: proto/mercaux.proto

package mercaux

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StocksServiceClient is the client API for StocksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StocksServiceClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListStocksResponse, error)
}

type stocksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStocksServiceClient(cc grpc.ClientConnInterface) StocksServiceClient {
	return &stocksServiceClient{cc}
}

func (c *stocksServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListStocksResponse, error) {
	out := new(ListStocksResponse)
	err := c.cc.Invoke(ctx, "/mercaux.StocksService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StocksServiceServer is the server API for StocksService service.
// All implementations should embed UnimplementedStocksServiceServer
// for forward compatibility
type StocksServiceServer interface {
	List(context.Context, *ListRequest) (*ListStocksResponse, error)
}

// UnimplementedStocksServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStocksServiceServer struct {
}

func (UnimplementedStocksServiceServer) List(context.Context, *ListRequest) (*ListStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeStocksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StocksServiceServer will
// result in compilation errors.
type UnsafeStocksServiceServer interface {
	mustEmbedUnimplementedStocksServiceServer()
}

func RegisterStocksServiceServer(s grpc.ServiceRegistrar, srv StocksServiceServer) {
	s.RegisterService(&StocksService_ServiceDesc, srv)
}

func _StocksService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StocksServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercaux.StocksService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StocksServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StocksService_ServiceDesc is the grpc.ServiceDesc for StocksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StocksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mercaux.StocksService",
	HandlerType: (*StocksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _StocksService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mercaux.proto",
}

// CatalogServiceClient is the client API for CatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogServiceClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCatalogResponse, error)
}

type catalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogServiceClient(cc grpc.ClientConnInterface) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCatalogResponse, error) {
	out := new(ListCatalogResponse)
	err := c.cc.Invoke(ctx, "/mercaux.CatalogService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServiceServer is the server API for CatalogService service.
// All implementations should embed UnimplementedCatalogServiceServer
// for forward compatibility
type CatalogServiceServer interface {
	List(context.Context, *ListRequest) (*ListCatalogResponse, error)
}

// UnimplementedCatalogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCatalogServiceServer struct {
}

func (UnimplementedCatalogServiceServer) List(context.Context, *ListRequest) (*ListCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServiceServer will
// result in compilation errors.
type UnsafeCatalogServiceServer interface {
	mustEmbedUnimplementedCatalogServiceServer()
}

func RegisterCatalogServiceServer(s grpc.ServiceRegistrar, srv CatalogServiceServer) {
	s.RegisterService(&CatalogService_ServiceDesc, srv)
}

func _CatalogService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercaux.CatalogService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogService_ServiceDesc is the grpc.ServiceDesc for CatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mercaux.CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CatalogService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mercaux.proto",
}

// StoresServiceClient is the client API for StoresService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoresServiceClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListStoresResponse, error)
}

type storesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoresServiceClient(cc grpc.ClientConnInterface) StoresServiceClient {
	return &storesServiceClient{cc}
}

func (c *storesServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListStoresResponse, error) {
	out := new(ListStoresResponse)
	err := c.cc.Invoke(ctx, "/mercaux.StoresService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoresServiceServer is the server API for StoresService service.
// All implementations should embed UnimplementedStoresServiceServer
// for forward compatibility
type StoresServiceServer interface {
	List(context.Context, *emptypb.Empty) (*ListStoresResponse, error)
}

// UnimplementedStoresServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStoresServiceServer struct {
}

func (UnimplementedStoresServiceServer) List(context.Context, *emptypb.Empty) (*ListStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeStoresServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoresServiceServer will
// result in compilation errors.
type UnsafeStoresServiceServer interface {
	mustEmbedUnimplementedStoresServiceServer()
}

func RegisterStoresServiceServer(s grpc.ServiceRegistrar, srv StoresServiceServer) {
	s.RegisterService(&StoresService_ServiceDesc, srv)
}

func _StoresService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercaux.StoresService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StoresService_ServiceDesc is the grpc.ServiceDesc for StoresService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoresService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mercaux.StoresService",
	HandlerType: (*StoresServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _StoresService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mercaux.proto",
}

// SellersServiceClient is the client API for SellersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SellersServiceClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSellersResponse, error)
}

type sellersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSellersServiceClient(cc grpc.ClientConnInterface) SellersServiceClient {
	return &sellersServiceClient{cc}
}

func (c *sellersServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSellersResponse, error) {
	out := new(ListSellersResponse)
	err := c.cc.Invoke(ctx, "/mercaux.SellersService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SellersServiceServer is the server API for SellersService service.
// All implementations should embed UnimplementedSellersServiceServer
// for forward compatibility
type SellersServiceServer interface {
	List(context.Context, *emptypb.Empty) (*ListSellersResponse, error)
}

// UnimplementedSellersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSellersServiceServer struct {
}

func (UnimplementedSellersServiceServer) List(context.Context, *emptypb.Empty) (*ListSellersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeSellersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SellersServiceServer will
// result in compilation errors.
type UnsafeSellersServiceServer interface {
	mustEmbedUnimplementedSellersServiceServer()
}

func RegisterSellersServiceServer(s grpc.ServiceRegistrar, srv SellersServiceServer) {
	s.RegisterService(&SellersService_ServiceDesc, srv)
}

func _SellersService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellersServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercaux.SellersService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellersServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SellersService_ServiceDesc is the grpc.ServiceDesc for SellersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SellersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mercaux.SellersService",
	HandlerType: (*SellersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SellersService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mercaux.proto",
}

// OrdersServiceClient is the client API for OrdersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdersServiceClient interface {
	New(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*NewOrderResponse, error)
}

type ordersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersServiceClient(cc grpc.ClientConnInterface) OrdersServiceClient {
	return &ordersServiceClient{cc}
}

func (c *ordersServiceClient) New(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*NewOrderResponse, error) {
	out := new(NewOrderResponse)
	err := c.cc.Invoke(ctx, "/mercaux.OrdersService/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdersServiceServer is the server API for OrdersService service.
// All implementations should embed UnimplementedOrdersServiceServer
// for forward compatibility
type OrdersServiceServer interface {
	New(context.Context, *NewOrderRequest) (*NewOrderResponse, error)
}

// UnimplementedOrdersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOrdersServiceServer struct {
}

func (UnimplementedOrdersServiceServer) New(context.Context, *NewOrderRequest) (*NewOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}

// UnsafeOrdersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdersServiceServer will
// result in compilation errors.
type UnsafeOrdersServiceServer interface {
	mustEmbedUnimplementedOrdersServiceServer()
}

func RegisterOrdersServiceServer(s grpc.ServiceRegistrar, srv OrdersServiceServer) {
	s.RegisterService(&OrdersService_ServiceDesc, srv)
}

func _OrdersService_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServiceServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercaux.OrdersService/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServiceServer).New(ctx, req.(*NewOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrdersService_ServiceDesc is the grpc.ServiceDesc for OrdersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrdersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mercaux.OrdersService",
	HandlerType: (*OrdersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _OrdersService_New_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mercaux.proto",
}
