// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/orders.proto

package orders

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Orders service

type OrdersService interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*PingResponse, error)
	OfflineByClient(ctx context.Context, in *ParamsOfflineByClient, opts ...client.CallOption) (*ResponseOfflineByClient, error)
	OnlineByClient(ctx context.Context, in *ParamsOnlineByClient, opts ...client.CallOption) (*ResponseOnlineByClient, error)
}

type ordersService struct {
	c    client.Client
	name string
}

func NewOrdersService(name string, c client.Client) OrdersService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "orders"
	}
	return &ordersService{
		c:    c,
		name: name,
	}
}

func (c *ordersService) Ping(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*PingResponse, error) {
	req := c.c.NewRequest(c.name, "Orders.Ping", in)
	out := new(PingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersService) OfflineByClient(ctx context.Context, in *ParamsOfflineByClient, opts ...client.CallOption) (*ResponseOfflineByClient, error) {
	req := c.c.NewRequest(c.name, "Orders.OfflineByClient", in)
	out := new(ResponseOfflineByClient)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersService) OnlineByClient(ctx context.Context, in *ParamsOnlineByClient, opts ...client.CallOption) (*ResponseOnlineByClient, error) {
	req := c.c.NewRequest(c.name, "Orders.OnlineByClient", in)
	out := new(ResponseOnlineByClient)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Orders service

type OrdersHandler interface {
	Ping(context.Context, *empty.Empty, *PingResponse) error
	OfflineByClient(context.Context, *ParamsOfflineByClient, *ResponseOfflineByClient) error
	OnlineByClient(context.Context, *ParamsOnlineByClient, *ResponseOnlineByClient) error
}

func RegisterOrdersHandler(s server.Server, hdlr OrdersHandler, opts ...server.HandlerOption) error {
	type orders interface {
		Ping(ctx context.Context, in *empty.Empty, out *PingResponse) error
		OfflineByClient(ctx context.Context, in *ParamsOfflineByClient, out *ResponseOfflineByClient) error
		OnlineByClient(ctx context.Context, in *ParamsOnlineByClient, out *ResponseOnlineByClient) error
	}
	type Orders struct {
		orders
	}
	h := &ordersHandler{hdlr}
	return s.Handle(s.NewHandler(&Orders{h}, opts...))
}

type ordersHandler struct {
	OrdersHandler
}

func (h *ordersHandler) Ping(ctx context.Context, in *empty.Empty, out *PingResponse) error {
	return h.OrdersHandler.Ping(ctx, in, out)
}

func (h *ordersHandler) OfflineByClient(ctx context.Context, in *ParamsOfflineByClient, out *ResponseOfflineByClient) error {
	return h.OrdersHandler.OfflineByClient(ctx, in, out)
}

func (h *ordersHandler) OnlineByClient(ctx context.Context, in *ParamsOnlineByClient, out *ResponseOnlineByClient) error {
	return h.OrdersHandler.OnlineByClient(ctx, in, out)
}
