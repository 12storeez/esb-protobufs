// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: client_status.proto

package feedbacks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientStatusesServiceClient is the client API for ClientStatusesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientStatusesServiceClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListClientStatusResponse, error)
}

type clientStatusesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientStatusesServiceClient(cc grpc.ClientConnInterface) ClientStatusesServiceClient {
	return &clientStatusesServiceClient{cc}
}

func (c *clientStatusesServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListClientStatusResponse, error) {
	out := new(ListClientStatusResponse)
	err := c.cc.Invoke(ctx, "/feedbacks.ClientStatusesService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientStatusesServiceServer is the server API for ClientStatusesService service.
// All implementations should embed UnimplementedClientStatusesServiceServer
// for forward compatibility
type ClientStatusesServiceServer interface {
	List(context.Context, *emptypb.Empty) (*ListClientStatusResponse, error)
}

// UnimplementedClientStatusesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClientStatusesServiceServer struct {
}

func (UnimplementedClientStatusesServiceServer) List(context.Context, *emptypb.Empty) (*ListClientStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeClientStatusesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientStatusesServiceServer will
// result in compilation errors.
type UnsafeClientStatusesServiceServer interface {
	mustEmbedUnimplementedClientStatusesServiceServer()
}

func RegisterClientStatusesServiceServer(s grpc.ServiceRegistrar, srv ClientStatusesServiceServer) {
	s.RegisterService(&ClientStatusesService_ServiceDesc, srv)
}

func _ClientStatusesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientStatusesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedbacks.ClientStatusesService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientStatusesServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientStatusesService_ServiceDesc is the grpc.ServiceDesc for ClientStatusesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientStatusesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feedbacks.ClientStatusesService",
	HandlerType: (*ClientStatusesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ClientStatusesService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_status.proto",
}
