// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TransportCompaniesSettingsClient is the client API for TransportCompaniesSettings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportCompaniesSettingsClient interface {
	Create(ctx context.Context, in *TransportCompanySettings, opts ...grpc.CallOption) (*TransportCompanySettingsId, error)
	Get(ctx context.Context, in *TransportCompanySettingsId, opts ...grpc.CallOption) (*TransportCompanySettings, error)
	List(ctx context.Context, in *ListTransportCompanySettingsRequest, opts ...grpc.CallOption) (*ListTransportCompanySettingsResponse, error)
	Update(ctx context.Context, in *TransportCompanySettings, opts ...grpc.CallOption) (*TransportCompanySettings, error)
	Delete(ctx context.Context, in *TransportCompanySettingsId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type transportCompaniesSettingsClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportCompaniesSettingsClient(cc grpc.ClientConnInterface) TransportCompaniesSettingsClient {
	return &transportCompaniesSettingsClient{cc}
}

func (c *transportCompaniesSettingsClient) Create(ctx context.Context, in *TransportCompanySettings, opts ...grpc.CallOption) (*TransportCompanySettingsId, error) {
	out := new(TransportCompanySettingsId)
	err := c.cc.Invoke(ctx, "/logistics.TransportCompaniesSettings/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportCompaniesSettingsClient) Get(ctx context.Context, in *TransportCompanySettingsId, opts ...grpc.CallOption) (*TransportCompanySettings, error) {
	out := new(TransportCompanySettings)
	err := c.cc.Invoke(ctx, "/logistics.TransportCompaniesSettings/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportCompaniesSettingsClient) List(ctx context.Context, in *ListTransportCompanySettingsRequest, opts ...grpc.CallOption) (*ListTransportCompanySettingsResponse, error) {
	out := new(ListTransportCompanySettingsResponse)
	err := c.cc.Invoke(ctx, "/logistics.TransportCompaniesSettings/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportCompaniesSettingsClient) Update(ctx context.Context, in *TransportCompanySettings, opts ...grpc.CallOption) (*TransportCompanySettings, error) {
	out := new(TransportCompanySettings)
	err := c.cc.Invoke(ctx, "/logistics.TransportCompaniesSettings/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportCompaniesSettingsClient) Delete(ctx context.Context, in *TransportCompanySettingsId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.TransportCompaniesSettings/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportCompaniesSettingsServer is the server API for TransportCompaniesSettings service.
// All implementations must embed UnimplementedTransportCompaniesSettingsServer
// for forward compatibility
type TransportCompaniesSettingsServer interface {
	Create(context.Context, *TransportCompanySettings) (*TransportCompanySettingsId, error)
	Get(context.Context, *TransportCompanySettingsId) (*TransportCompanySettings, error)
	List(context.Context, *ListTransportCompanySettingsRequest) (*ListTransportCompanySettingsResponse, error)
	Update(context.Context, *TransportCompanySettings) (*TransportCompanySettings, error)
	Delete(context.Context, *TransportCompanySettingsId) (*emptypb.Empty, error)
	mustEmbedUnimplementedTransportCompaniesSettingsServer()
}

// UnimplementedTransportCompaniesSettingsServer must be embedded to have forward compatible implementations.
type UnimplementedTransportCompaniesSettingsServer struct {
}

func (UnimplementedTransportCompaniesSettingsServer) Create(context.Context, *TransportCompanySettings) (*TransportCompanySettingsId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTransportCompaniesSettingsServer) Get(context.Context, *TransportCompanySettingsId) (*TransportCompanySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTransportCompaniesSettingsServer) List(context.Context, *ListTransportCompanySettingsRequest) (*ListTransportCompanySettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTransportCompaniesSettingsServer) Update(context.Context, *TransportCompanySettings) (*TransportCompanySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTransportCompaniesSettingsServer) Delete(context.Context, *TransportCompanySettingsId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTransportCompaniesSettingsServer) mustEmbedUnimplementedTransportCompaniesSettingsServer() {
}

// UnsafeTransportCompaniesSettingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportCompaniesSettingsServer will
// result in compilation errors.
type UnsafeTransportCompaniesSettingsServer interface {
	mustEmbedUnimplementedTransportCompaniesSettingsServer()
}

func RegisterTransportCompaniesSettingsServer(s grpc.ServiceRegistrar, srv TransportCompaniesSettingsServer) {
	s.RegisterService(&_TransportCompaniesSettings_serviceDesc, srv)
}

func _TransportCompaniesSettings_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportCompanySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCompaniesSettingsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.TransportCompaniesSettings/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCompaniesSettingsServer).Create(ctx, req.(*TransportCompanySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportCompaniesSettings_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportCompanySettingsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCompaniesSettingsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.TransportCompaniesSettings/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCompaniesSettingsServer).Get(ctx, req.(*TransportCompanySettingsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportCompaniesSettings_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransportCompanySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCompaniesSettingsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.TransportCompaniesSettings/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCompaniesSettingsServer).List(ctx, req.(*ListTransportCompanySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportCompaniesSettings_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportCompanySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCompaniesSettingsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.TransportCompaniesSettings/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCompaniesSettingsServer).Update(ctx, req.(*TransportCompanySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportCompaniesSettings_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportCompanySettingsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCompaniesSettingsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.TransportCompaniesSettings/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCompaniesSettingsServer).Delete(ctx, req.(*TransportCompanySettingsId))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransportCompaniesSettings_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.TransportCompaniesSettings",
	HandlerType: (*TransportCompaniesSettingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TransportCompaniesSettings_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TransportCompaniesSettings_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TransportCompaniesSettings_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TransportCompaniesSettings_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TransportCompaniesSettings_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logistics/transport_company_settings.proto",
}
