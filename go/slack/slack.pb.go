// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/slack.proto

package slack

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StatusChangeTicketParams struct {
	TicketKey            string   `protobuf:"bytes,1,opt,name=ticket_key,json=ticketKey,proto3" json:"ticket_key,omitempty"`
	SlackChannel         string   `protobuf:"bytes,2,opt,name=slack_channel,json=slackChannel,proto3" json:"slack_channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusChangeTicketParams) Reset()         { *m = StatusChangeTicketParams{} }
func (m *StatusChangeTicketParams) String() string { return proto.CompactTextString(m) }
func (*StatusChangeTicketParams) ProtoMessage()    {}
func (*StatusChangeTicketParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3384307aa0bf6f50, []int{0}
}

func (m *StatusChangeTicketParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusChangeTicketParams.Unmarshal(m, b)
}
func (m *StatusChangeTicketParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusChangeTicketParams.Marshal(b, m, deterministic)
}
func (m *StatusChangeTicketParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusChangeTicketParams.Merge(m, src)
}
func (m *StatusChangeTicketParams) XXX_Size() int {
	return xxx_messageInfo_StatusChangeTicketParams.Size(m)
}
func (m *StatusChangeTicketParams) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusChangeTicketParams.DiscardUnknown(m)
}

var xxx_messageInfo_StatusChangeTicketParams proto.InternalMessageInfo

func (m *StatusChangeTicketParams) GetTicketKey() string {
	if m != nil {
		return m.TicketKey
	}
	return ""
}

func (m *StatusChangeTicketParams) GetSlackChannel() string {
	if m != nil {
		return m.SlackChannel
	}
	return ""
}

type StatusChangeTicketResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusChangeTicketResponse) Reset()         { *m = StatusChangeTicketResponse{} }
func (m *StatusChangeTicketResponse) String() string { return proto.CompactTextString(m) }
func (*StatusChangeTicketResponse) ProtoMessage()    {}
func (*StatusChangeTicketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3384307aa0bf6f50, []int{1}
}

func (m *StatusChangeTicketResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusChangeTicketResponse.Unmarshal(m, b)
}
func (m *StatusChangeTicketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusChangeTicketResponse.Marshal(b, m, deterministic)
}
func (m *StatusChangeTicketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusChangeTicketResponse.Merge(m, src)
}
func (m *StatusChangeTicketResponse) XXX_Size() int {
	return xxx_messageInfo_StatusChangeTicketResponse.Size(m)
}
func (m *StatusChangeTicketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusChangeTicketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusChangeTicketResponse proto.InternalMessageInfo

func (m *StatusChangeTicketResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type SendParams struct {
	Channel              string   `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	From                 string   `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	ThreadTs             string   `protobuf:"bytes,5,opt,name=thread_ts,json=threadTs,proto3" json:"thread_ts,omitempty"`
	Type                 string   `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendParams) Reset()         { *m = SendParams{} }
func (m *SendParams) String() string { return proto.CompactTextString(m) }
func (*SendParams) ProtoMessage()    {}
func (*SendParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3384307aa0bf6f50, []int{2}
}

func (m *SendParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendParams.Unmarshal(m, b)
}
func (m *SendParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendParams.Marshal(b, m, deterministic)
}
func (m *SendParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendParams.Merge(m, src)
}
func (m *SendParams) XXX_Size() int {
	return xxx_messageInfo_SendParams.Size(m)
}
func (m *SendParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SendParams.DiscardUnknown(m)
}

var xxx_messageInfo_SendParams proto.InternalMessageInfo

func (m *SendParams) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *SendParams) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SendParams) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SendParams) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *SendParams) GetThreadTs() string {
	if m != nil {
		return m.ThreadTs
	}
	return ""
}

func (m *SendParams) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type SendResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	RespChannel          string   `protobuf:"bytes,2,opt,name=resp_channel,json=respChannel,proto3" json:"resp_channel,omitempty"`
	RespTimestamp        string   `protobuf:"bytes,3,opt,name=resp_timestamp,json=respTimestamp,proto3" json:"resp_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendResponse) Reset()         { *m = SendResponse{} }
func (m *SendResponse) String() string { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()    {}
func (*SendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3384307aa0bf6f50, []int{3}
}

func (m *SendResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendResponse.Unmarshal(m, b)
}
func (m *SendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendResponse.Marshal(b, m, deterministic)
}
func (m *SendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendResponse.Merge(m, src)
}
func (m *SendResponse) XXX_Size() int {
	return xxx_messageInfo_SendResponse.Size(m)
}
func (m *SendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendResponse proto.InternalMessageInfo

func (m *SendResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *SendResponse) GetRespChannel() string {
	if m != nil {
		return m.RespChannel
	}
	return ""
}

func (m *SendResponse) GetRespTimestamp() string {
	if m != nil {
		return m.RespTimestamp
	}
	return ""
}

func init() {
	proto.RegisterType((*StatusChangeTicketParams)(nil), "slack.StatusChangeTicketParams")
	proto.RegisterType((*StatusChangeTicketResponse)(nil), "slack.StatusChangeTicketResponse")
	proto.RegisterType((*SendParams)(nil), "slack.SendParams")
	proto.RegisterType((*SendResponse)(nil), "slack.SendResponse")
}

func init() { proto.RegisterFile("proto/slack.proto", fileDescriptor_3384307aa0bf6f50) }

var fileDescriptor_3384307aa0bf6f50 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x4f, 0x02, 0x31,
	0x10, 0xc5, 0x05, 0x59, 0xfe, 0x8c, 0x40, 0xc2, 0xe8, 0xa1, 0xc1, 0x18, 0x65, 0x8d, 0x89, 0x07,
	0x83, 0x06, 0x4f, 0x5e, 0xe5, 0xe8, 0xc5, 0xc0, 0x9e, 0x38, 0x48, 0xea, 0x32, 0xb2, 0x64, 0xd9,
	0x3f, 0x69, 0xeb, 0x81, 0xcf, 0xe2, 0x97, 0x35, 0x9d, 0x6e, 0xd5, 0x48, 0xb8, 0xf5, 0xfd, 0xf6,
	0xcd, 0xf4, 0xed, 0x4c, 0x61, 0x50, 0xaa, 0xc2, 0x14, 0xf7, 0x7a, 0x2b, 0xe3, 0x74, 0xcc, 0x67,
	0x0c, 0x58, 0x84, 0x6f, 0x20, 0xe6, 0x46, 0x9a, 0x4f, 0x3d, 0x4d, 0x64, 0xbe, 0xa6, 0x68, 0x13,
	0xa7, 0x64, 0x5e, 0xa5, 0x92, 0x99, 0xc6, 0x0b, 0x00, 0xc3, 0x7a, 0x99, 0xd2, 0x4e, 0xd4, 0xae,
	0x6a, 0xb7, 0x9d, 0x59, 0xc7, 0x91, 0x17, 0xda, 0xe1, 0x35, 0xf4, 0xb8, 0xc7, 0x32, 0x4e, 0x64,
	0x9e, 0xd3, 0x56, 0xd4, 0xd9, 0xd1, 0x65, 0x38, 0x75, 0x2c, 0xbc, 0x83, 0xe1, 0x7e, 0xff, 0x19,
	0xe9, 0xb2, 0xc8, 0x35, 0x61, 0x1f, 0xea, 0x45, 0xca, 0x9d, 0xdb, 0xb3, 0x7a, 0x91, 0x86, 0x5f,
	0x35, 0x80, 0x39, 0xe5, 0xab, 0x2a, 0x80, 0x80, 0x96, 0xef, 0xed, 0x6e, 0xf7, 0x12, 0xcf, 0x20,
	0xa0, 0x4c, 0x6e, 0xfc, 0x9d, 0x4e, 0x58, 0x7f, 0x46, 0x5a, 0xcb, 0x35, 0x89, 0x63, 0xe7, 0xaf,
	0x24, 0x22, 0x34, 0x3e, 0x54, 0x91, 0x89, 0x06, 0x63, 0x3e, 0xe3, 0x39, 0x74, 0x4c, 0xa2, 0x48,
	0xae, 0x96, 0x46, 0x8b, 0x80, 0x3f, 0xb4, 0x1d, 0x88, 0xb4, 0x2d, 0x30, 0xbb, 0x92, 0x44, 0xd3,
	0x15, 0xd8, 0x73, 0x98, 0x40, 0xd7, 0x86, 0x3b, 0x94, 0x1e, 0x47, 0xd0, 0x55, 0xa4, 0xcb, 0x7f,
	0xf3, 0x38, 0xb1, 0xac, 0x1a, 0x07, 0xde, 0x40, 0x9f, 0x2d, 0x66, 0x93, 0x91, 0x36, 0x32, 0x2b,
	0xab, 0xa0, 0x3d, 0x4b, 0x23, 0x0f, 0x27, 0x04, 0xad, 0x48, 0xc9, 0x38, 0x25, 0x85, 0x0b, 0xc0,
	0xfd, 0x01, 0xe2, 0xe5, 0xd8, 0xed, 0xf2, 0xd0, 0xee, 0x86, 0xa3, 0x83, 0x06, 0x1f, 0x3f, 0x3c,
	0x9a, 0x3c, 0x41, 0x30, 0xb7, 0x2e, 0x7c, 0x80, 0x86, 0xfd, 0x33, 0x1c, 0xf8, 0xaa, 0x9f, 0x1d,
	0x0c, 0x4f, 0xff, 0xa0, 0xdf, 0xd2, 0x67, 0x58, 0xb4, 0xd7, 0xd5, 0x83, 0x7a, 0x6f, 0xf2, 0x8b,
	0x7a, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x9d, 0xdc, 0xc6, 0xaa, 0x66, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TrackerClient is the client API for Tracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrackerClient interface {
	StatusChangeTicket(ctx context.Context, in *StatusChangeTicketParams, opts ...grpc.CallOption) (*StatusChangeTicketResponse, error)
}

type trackerClient struct {
	cc *grpc.ClientConn
}

func NewTrackerClient(cc *grpc.ClientConn) TrackerClient {
	return &trackerClient{cc}
}

func (c *trackerClient) StatusChangeTicket(ctx context.Context, in *StatusChangeTicketParams, opts ...grpc.CallOption) (*StatusChangeTicketResponse, error) {
	out := new(StatusChangeTicketResponse)
	err := c.cc.Invoke(ctx, "/slack.Tracker/StatusChangeTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerServer is the server API for Tracker service.
type TrackerServer interface {
	StatusChangeTicket(context.Context, *StatusChangeTicketParams) (*StatusChangeTicketResponse, error)
}

// UnimplementedTrackerServer can be embedded to have forward compatible implementations.
type UnimplementedTrackerServer struct {
}

func (*UnimplementedTrackerServer) StatusChangeTicket(ctx context.Context, req *StatusChangeTicketParams) (*StatusChangeTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusChangeTicket not implemented")
}

func RegisterTrackerServer(s *grpc.Server, srv TrackerServer) {
	s.RegisterService(&_Tracker_serviceDesc, srv)
}

func _Tracker_StatusChangeTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusChangeTicketParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).StatusChangeTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slack.Tracker/StatusChangeTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).StatusChangeTicket(ctx, req.(*StatusChangeTicketParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tracker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slack.Tracker",
	HandlerType: (*TrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StatusChangeTicket",
			Handler:    _Tracker_StatusChangeTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/slack.proto",
}

// SlackClient is the client API for Slack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SlackClient interface {
	Send(ctx context.Context, in *SendParams, opts ...grpc.CallOption) (*SendResponse, error)
}

type slackClient struct {
	cc *grpc.ClientConn
}

func NewSlackClient(cc *grpc.ClientConn) SlackClient {
	return &slackClient{cc}
}

func (c *slackClient) Send(ctx context.Context, in *SendParams, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/slack.Slack/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlackServer is the server API for Slack service.
type SlackServer interface {
	Send(context.Context, *SendParams) (*SendResponse, error)
}

// UnimplementedSlackServer can be embedded to have forward compatible implementations.
type UnimplementedSlackServer struct {
}

func (*UnimplementedSlackServer) Send(ctx context.Context, req *SendParams) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterSlackServer(s *grpc.Server, srv SlackServer) {
	s.RegisterService(&_Slack_serviceDesc, srv)
}

func _Slack_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slack.Slack/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackServer).Send(ctx, req.(*SendParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Slack_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slack.Slack",
	HandlerType: (*SlackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Slack_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/slack.proto",
}
