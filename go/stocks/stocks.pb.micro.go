// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/internal/stocks.proto

package stocks

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Stocks service

func NewStocksEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Stocks service

type StocksService interface {
	Upsert(ctx context.Context, in *ListStocks, opts ...client.CallOption) (*SuccessResponse, error)
	Get(ctx context.Context, in *GetParams, opts ...client.CallOption) (*ListStocks, error)
	GetPagination(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type stocksService struct {
	c    client.Client
	name string
}

func NewStocksService(name string, c client.Client) StocksService {
	return &stocksService{
		c:    c,
		name: name,
	}
}

func (c *stocksService) Upsert(ctx context.Context, in *ListStocks, opts ...client.CallOption) (*SuccessResponse, error) {
	req := c.c.NewRequest(c.name, "Stocks.Upsert", in)
	out := new(SuccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stocksService) Get(ctx context.Context, in *GetParams, opts ...client.CallOption) (*ListStocks, error) {
	req := c.c.NewRequest(c.name, "Stocks.Get", in)
	out := new(ListStocks)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stocksService) GetPagination(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Stocks.GetPagination", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stocks service

type StocksHandler interface {
	Upsert(context.Context, *ListStocks, *SuccessResponse) error
	Get(context.Context, *GetParams, *ListStocks) error
	GetPagination(context.Context, *Request, *Response) error
}

func RegisterStocksHandler(s server.Server, hdlr StocksHandler, opts ...server.HandlerOption) error {
	type stocks interface {
		Upsert(ctx context.Context, in *ListStocks, out *SuccessResponse) error
		Get(ctx context.Context, in *GetParams, out *ListStocks) error
		GetPagination(ctx context.Context, in *Request, out *Response) error
	}
	type Stocks struct {
		stocks
	}
	h := &stocksHandler{hdlr}
	return s.Handle(s.NewHandler(&Stocks{h}, opts...))
}

type stocksHandler struct {
	StocksHandler
}

func (h *stocksHandler) Upsert(ctx context.Context, in *ListStocks, out *SuccessResponse) error {
	return h.StocksHandler.Upsert(ctx, in, out)
}

func (h *stocksHandler) Get(ctx context.Context, in *GetParams, out *ListStocks) error {
	return h.StocksHandler.Get(ctx, in, out)
}

func (h *stocksHandler) GetPagination(ctx context.Context, in *Request, out *Response) error {
	return h.StocksHandler.GetPagination(ctx, in, out)
}
