// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: store_delivery_type_pickup.proto

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StoreDeliveryTypeService_List_FullMethodName    = "/logistics.StoreDeliveryTypeService/List"
	StoreDeliveryTypeService_Create_FullMethodName  = "/logistics.StoreDeliveryTypeService/Create"
	StoreDeliveryTypeService_Get_FullMethodName     = "/logistics.StoreDeliveryTypeService/Get"
	StoreDeliveryTypeService_Update_FullMethodName  = "/logistics.StoreDeliveryTypeService/Update"
	StoreDeliveryTypeService_Delete_FullMethodName  = "/logistics.StoreDeliveryTypeService/Delete"
	StoreDeliveryTypeService_Suggest_FullMethodName = "/logistics.StoreDeliveryTypeService/Suggest"
)

// StoreDeliveryTypeServiceClient is the client API for StoreDeliveryTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreDeliveryTypeServiceClient interface {
	List(ctx context.Context, in *ListStoreDeliveryTypeRequest, opts ...grpc.CallOption) (*ListStoreDeliveryTypeResponse, error)
	Create(ctx context.Context, in *CreateStoreDeliveryType, opts ...grpc.CallOption) (*StoreDeliveryType, error)
	Get(ctx context.Context, in *StoreDeliveryTypeId, opts ...grpc.CallOption) (*StoreDeliveryType, error)
	Update(ctx context.Context, in *UpdateStoreDeliveryType, opts ...grpc.CallOption) (*StoreDeliveryType, error)
	Delete(ctx context.Context, in *StoreDeliveryTypeId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Suggest(ctx context.Context, in *SuggestStoreDeliveryTypeRequest, opts ...grpc.CallOption) (*SuggestStoreDeliveryTypeResponse, error)
}

type storeDeliveryTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreDeliveryTypeServiceClient(cc grpc.ClientConnInterface) StoreDeliveryTypeServiceClient {
	return &storeDeliveryTypeServiceClient{cc}
}

func (c *storeDeliveryTypeServiceClient) List(ctx context.Context, in *ListStoreDeliveryTypeRequest, opts ...grpc.CallOption) (*ListStoreDeliveryTypeResponse, error) {
	out := new(ListStoreDeliveryTypeResponse)
	err := c.cc.Invoke(ctx, StoreDeliveryTypeService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeDeliveryTypeServiceClient) Create(ctx context.Context, in *CreateStoreDeliveryType, opts ...grpc.CallOption) (*StoreDeliveryType, error) {
	out := new(StoreDeliveryType)
	err := c.cc.Invoke(ctx, StoreDeliveryTypeService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeDeliveryTypeServiceClient) Get(ctx context.Context, in *StoreDeliveryTypeId, opts ...grpc.CallOption) (*StoreDeliveryType, error) {
	out := new(StoreDeliveryType)
	err := c.cc.Invoke(ctx, StoreDeliveryTypeService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeDeliveryTypeServiceClient) Update(ctx context.Context, in *UpdateStoreDeliveryType, opts ...grpc.CallOption) (*StoreDeliveryType, error) {
	out := new(StoreDeliveryType)
	err := c.cc.Invoke(ctx, StoreDeliveryTypeService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeDeliveryTypeServiceClient) Delete(ctx context.Context, in *StoreDeliveryTypeId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StoreDeliveryTypeService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeDeliveryTypeServiceClient) Suggest(ctx context.Context, in *SuggestStoreDeliveryTypeRequest, opts ...grpc.CallOption) (*SuggestStoreDeliveryTypeResponse, error) {
	out := new(SuggestStoreDeliveryTypeResponse)
	err := c.cc.Invoke(ctx, StoreDeliveryTypeService_Suggest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreDeliveryTypeServiceServer is the server API for StoreDeliveryTypeService service.
// All implementations should embed UnimplementedStoreDeliveryTypeServiceServer
// for forward compatibility
type StoreDeliveryTypeServiceServer interface {
	List(context.Context, *ListStoreDeliveryTypeRequest) (*ListStoreDeliveryTypeResponse, error)
	Create(context.Context, *CreateStoreDeliveryType) (*StoreDeliveryType, error)
	Get(context.Context, *StoreDeliveryTypeId) (*StoreDeliveryType, error)
	Update(context.Context, *UpdateStoreDeliveryType) (*StoreDeliveryType, error)
	Delete(context.Context, *StoreDeliveryTypeId) (*emptypb.Empty, error)
	Suggest(context.Context, *SuggestStoreDeliveryTypeRequest) (*SuggestStoreDeliveryTypeResponse, error)
}

// UnimplementedStoreDeliveryTypeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStoreDeliveryTypeServiceServer struct {
}

func (UnimplementedStoreDeliveryTypeServiceServer) List(context.Context, *ListStoreDeliveryTypeRequest) (*ListStoreDeliveryTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStoreDeliveryTypeServiceServer) Create(context.Context, *CreateStoreDeliveryType) (*StoreDeliveryType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStoreDeliveryTypeServiceServer) Get(context.Context, *StoreDeliveryTypeId) (*StoreDeliveryType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStoreDeliveryTypeServiceServer) Update(context.Context, *UpdateStoreDeliveryType) (*StoreDeliveryType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStoreDeliveryTypeServiceServer) Delete(context.Context, *StoreDeliveryTypeId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStoreDeliveryTypeServiceServer) Suggest(context.Context, *SuggestStoreDeliveryTypeRequest) (*SuggestStoreDeliveryTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suggest not implemented")
}

// UnsafeStoreDeliveryTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreDeliveryTypeServiceServer will
// result in compilation errors.
type UnsafeStoreDeliveryTypeServiceServer interface {
	mustEmbedUnimplementedStoreDeliveryTypeServiceServer()
}

func RegisterStoreDeliveryTypeServiceServer(s grpc.ServiceRegistrar, srv StoreDeliveryTypeServiceServer) {
	s.RegisterService(&StoreDeliveryTypeService_ServiceDesc, srv)
}

func _StoreDeliveryTypeService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoreDeliveryTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreDeliveryTypeServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreDeliveryTypeService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreDeliveryTypeServiceServer).List(ctx, req.(*ListStoreDeliveryTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreDeliveryTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoreDeliveryType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreDeliveryTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreDeliveryTypeService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreDeliveryTypeServiceServer).Create(ctx, req.(*CreateStoreDeliveryType))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreDeliveryTypeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreDeliveryTypeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreDeliveryTypeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreDeliveryTypeService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreDeliveryTypeServiceServer).Get(ctx, req.(*StoreDeliveryTypeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreDeliveryTypeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoreDeliveryType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreDeliveryTypeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreDeliveryTypeService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreDeliveryTypeServiceServer).Update(ctx, req.(*UpdateStoreDeliveryType))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreDeliveryTypeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreDeliveryTypeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreDeliveryTypeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreDeliveryTypeService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreDeliveryTypeServiceServer).Delete(ctx, req.(*StoreDeliveryTypeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreDeliveryTypeService_Suggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestStoreDeliveryTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreDeliveryTypeServiceServer).Suggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreDeliveryTypeService_Suggest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreDeliveryTypeServiceServer).Suggest(ctx, req.(*SuggestStoreDeliveryTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreDeliveryTypeService_ServiceDesc is the grpc.ServiceDesc for StoreDeliveryTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreDeliveryTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.StoreDeliveryTypeService",
	HandlerType: (*StoreDeliveryTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _StoreDeliveryTypeService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _StoreDeliveryTypeService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StoreDeliveryTypeService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StoreDeliveryTypeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StoreDeliveryTypeService_Delete_Handler,
		},
		{
			MethodName: "Suggest",
			Handler:    _StoreDeliveryTypeService_Suggest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store_delivery_type_pickup.proto",
}
