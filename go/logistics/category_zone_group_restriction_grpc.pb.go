// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: category_zone_group_restriction.proto

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CategoryZoneGroupRestrictionService_List_FullMethodName   = "/logistics.CategoryZoneGroupRestrictionService/List"
	CategoryZoneGroupRestrictionService_Create_FullMethodName = "/logistics.CategoryZoneGroupRestrictionService/Create"
	CategoryZoneGroupRestrictionService_Update_FullMethodName = "/logistics.CategoryZoneGroupRestrictionService/Update"
	CategoryZoneGroupRestrictionService_Get_FullMethodName    = "/logistics.CategoryZoneGroupRestrictionService/Get"
	CategoryZoneGroupRestrictionService_Delete_FullMethodName = "/logistics.CategoryZoneGroupRestrictionService/Delete"
)

// CategoryZoneGroupRestrictionServiceClient is the client API for CategoryZoneGroupRestrictionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryZoneGroupRestrictionServiceClient interface {
	List(ctx context.Context, in *ListCategoryZoneGroupRestrictionRequest, opts ...grpc.CallOption) (*ListCategoryZoneGroupRestrictionResponse, error)
	Create(ctx context.Context, in *CreateCategoryZoneGroupRestriction, opts ...grpc.CallOption) (*CategoryZoneGroupRestriction, error)
	Update(ctx context.Context, in *UpdateCategoryZoneGroupRestriction, opts ...grpc.CallOption) (*CategoryZoneGroupRestriction, error)
	Get(ctx context.Context, in *CategoryZoneGroupRestrictionId, opts ...grpc.CallOption) (*CategoryZoneGroupRestriction, error)
	Delete(ctx context.Context, in *CategoryZoneGroupRestrictionId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type categoryZoneGroupRestrictionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryZoneGroupRestrictionServiceClient(cc grpc.ClientConnInterface) CategoryZoneGroupRestrictionServiceClient {
	return &categoryZoneGroupRestrictionServiceClient{cc}
}

func (c *categoryZoneGroupRestrictionServiceClient) List(ctx context.Context, in *ListCategoryZoneGroupRestrictionRequest, opts ...grpc.CallOption) (*ListCategoryZoneGroupRestrictionResponse, error) {
	out := new(ListCategoryZoneGroupRestrictionResponse)
	err := c.cc.Invoke(ctx, CategoryZoneGroupRestrictionService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryZoneGroupRestrictionServiceClient) Create(ctx context.Context, in *CreateCategoryZoneGroupRestriction, opts ...grpc.CallOption) (*CategoryZoneGroupRestriction, error) {
	out := new(CategoryZoneGroupRestriction)
	err := c.cc.Invoke(ctx, CategoryZoneGroupRestrictionService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryZoneGroupRestrictionServiceClient) Update(ctx context.Context, in *UpdateCategoryZoneGroupRestriction, opts ...grpc.CallOption) (*CategoryZoneGroupRestriction, error) {
	out := new(CategoryZoneGroupRestriction)
	err := c.cc.Invoke(ctx, CategoryZoneGroupRestrictionService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryZoneGroupRestrictionServiceClient) Get(ctx context.Context, in *CategoryZoneGroupRestrictionId, opts ...grpc.CallOption) (*CategoryZoneGroupRestriction, error) {
	out := new(CategoryZoneGroupRestriction)
	err := c.cc.Invoke(ctx, CategoryZoneGroupRestrictionService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryZoneGroupRestrictionServiceClient) Delete(ctx context.Context, in *CategoryZoneGroupRestrictionId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CategoryZoneGroupRestrictionService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryZoneGroupRestrictionServiceServer is the server API for CategoryZoneGroupRestrictionService service.
// All implementations should embed UnimplementedCategoryZoneGroupRestrictionServiceServer
// for forward compatibility
type CategoryZoneGroupRestrictionServiceServer interface {
	List(context.Context, *ListCategoryZoneGroupRestrictionRequest) (*ListCategoryZoneGroupRestrictionResponse, error)
	Create(context.Context, *CreateCategoryZoneGroupRestriction) (*CategoryZoneGroupRestriction, error)
	Update(context.Context, *UpdateCategoryZoneGroupRestriction) (*CategoryZoneGroupRestriction, error)
	Get(context.Context, *CategoryZoneGroupRestrictionId) (*CategoryZoneGroupRestriction, error)
	Delete(context.Context, *CategoryZoneGroupRestrictionId) (*emptypb.Empty, error)
}

// UnimplementedCategoryZoneGroupRestrictionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCategoryZoneGroupRestrictionServiceServer struct {
}

func (UnimplementedCategoryZoneGroupRestrictionServiceServer) List(context.Context, *ListCategoryZoneGroupRestrictionRequest) (*ListCategoryZoneGroupRestrictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCategoryZoneGroupRestrictionServiceServer) Create(context.Context, *CreateCategoryZoneGroupRestriction) (*CategoryZoneGroupRestriction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCategoryZoneGroupRestrictionServiceServer) Update(context.Context, *UpdateCategoryZoneGroupRestriction) (*CategoryZoneGroupRestriction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCategoryZoneGroupRestrictionServiceServer) Get(context.Context, *CategoryZoneGroupRestrictionId) (*CategoryZoneGroupRestriction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCategoryZoneGroupRestrictionServiceServer) Delete(context.Context, *CategoryZoneGroupRestrictionId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeCategoryZoneGroupRestrictionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryZoneGroupRestrictionServiceServer will
// result in compilation errors.
type UnsafeCategoryZoneGroupRestrictionServiceServer interface {
	mustEmbedUnimplementedCategoryZoneGroupRestrictionServiceServer()
}

func RegisterCategoryZoneGroupRestrictionServiceServer(s grpc.ServiceRegistrar, srv CategoryZoneGroupRestrictionServiceServer) {
	s.RegisterService(&CategoryZoneGroupRestrictionService_ServiceDesc, srv)
}

func _CategoryZoneGroupRestrictionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoryZoneGroupRestrictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryZoneGroupRestrictionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryZoneGroupRestrictionService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryZoneGroupRestrictionServiceServer).List(ctx, req.(*ListCategoryZoneGroupRestrictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryZoneGroupRestrictionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryZoneGroupRestriction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryZoneGroupRestrictionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryZoneGroupRestrictionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryZoneGroupRestrictionServiceServer).Create(ctx, req.(*CreateCategoryZoneGroupRestriction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryZoneGroupRestrictionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryZoneGroupRestriction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryZoneGroupRestrictionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryZoneGroupRestrictionService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryZoneGroupRestrictionServiceServer).Update(ctx, req.(*UpdateCategoryZoneGroupRestriction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryZoneGroupRestrictionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryZoneGroupRestrictionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryZoneGroupRestrictionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryZoneGroupRestrictionService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryZoneGroupRestrictionServiceServer).Get(ctx, req.(*CategoryZoneGroupRestrictionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryZoneGroupRestrictionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryZoneGroupRestrictionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryZoneGroupRestrictionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryZoneGroupRestrictionService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryZoneGroupRestrictionServiceServer).Delete(ctx, req.(*CategoryZoneGroupRestrictionId))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryZoneGroupRestrictionService_ServiceDesc is the grpc.ServiceDesc for CategoryZoneGroupRestrictionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryZoneGroupRestrictionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.CategoryZoneGroupRestrictionService",
	HandlerType: (*CategoryZoneGroupRestrictionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CategoryZoneGroupRestrictionService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CategoryZoneGroupRestrictionService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CategoryZoneGroupRestrictionService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CategoryZoneGroupRestrictionService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CategoryZoneGroupRestrictionService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "category_zone_group_restriction.proto",
}
