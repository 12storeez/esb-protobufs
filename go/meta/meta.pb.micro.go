// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/meta.proto

package meta

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Meta service

type MetaService interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*PingResponse, error)
	AllOfflineStoresInfo(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseAllOfflineStoresInfo, error)
	OfflineStoreInfoByID(ctx context.Context, in *ParamsOfflineStoreInfoByID, opts ...client.CallOption) (*ResponseOfflineStoreInfoByID, error)
	MobileAPIContacts(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseMobileAPIContacts, error)
	MobileApiAbout(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseMobileApiAbout, error)
}

type metaService struct {
	c    client.Client
	name string
}

func NewMetaService(name string, c client.Client) MetaService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "meta"
	}
	return &metaService{
		c:    c,
		name: name,
	}
}

func (c *metaService) Ping(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*PingResponse, error) {
	req := c.c.NewRequest(c.name, "Meta.Ping", in)
	out := new(PingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaService) AllOfflineStoresInfo(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseAllOfflineStoresInfo, error) {
	req := c.c.NewRequest(c.name, "Meta.AllOfflineStoresInfo", in)
	out := new(ResponseAllOfflineStoresInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaService) OfflineStoreInfoByID(ctx context.Context, in *ParamsOfflineStoreInfoByID, opts ...client.CallOption) (*ResponseOfflineStoreInfoByID, error) {
	req := c.c.NewRequest(c.name, "Meta.OfflineStoreInfoByID", in)
	out := new(ResponseOfflineStoreInfoByID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaService) MobileAPIContacts(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseMobileAPIContacts, error) {
	req := c.c.NewRequest(c.name, "Meta.MobileAPIContacts", in)
	out := new(ResponseMobileAPIContacts)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaService) MobileApiAbout(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseMobileApiAbout, error) {
	req := c.c.NewRequest(c.name, "Meta.MobileApiAbout", in)
	out := new(ResponseMobileApiAbout)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Meta service

type MetaHandler interface {
	Ping(context.Context, *empty.Empty, *PingResponse) error
	AllOfflineStoresInfo(context.Context, *empty.Empty, *ResponseAllOfflineStoresInfo) error
	OfflineStoreInfoByID(context.Context, *ParamsOfflineStoreInfoByID, *ResponseOfflineStoreInfoByID) error
	MobileAPIContacts(context.Context, *empty.Empty, *ResponseMobileAPIContacts) error
	MobileApiAbout(context.Context, *empty.Empty, *ResponseMobileApiAbout) error
}

func RegisterMetaHandler(s server.Server, hdlr MetaHandler, opts ...server.HandlerOption) error {
	type meta interface {
		Ping(ctx context.Context, in *empty.Empty, out *PingResponse) error
		AllOfflineStoresInfo(ctx context.Context, in *empty.Empty, out *ResponseAllOfflineStoresInfo) error
		OfflineStoreInfoByID(ctx context.Context, in *ParamsOfflineStoreInfoByID, out *ResponseOfflineStoreInfoByID) error
		MobileAPIContacts(ctx context.Context, in *empty.Empty, out *ResponseMobileAPIContacts) error
		MobileApiAbout(ctx context.Context, in *empty.Empty, out *ResponseMobileApiAbout) error
	}
	type Meta struct {
		meta
	}
	h := &metaHandler{hdlr}
	return s.Handle(s.NewHandler(&Meta{h}, opts...))
}

type metaHandler struct {
	MetaHandler
}

func (h *metaHandler) Ping(ctx context.Context, in *empty.Empty, out *PingResponse) error {
	return h.MetaHandler.Ping(ctx, in, out)
}

func (h *metaHandler) AllOfflineStoresInfo(ctx context.Context, in *empty.Empty, out *ResponseAllOfflineStoresInfo) error {
	return h.MetaHandler.AllOfflineStoresInfo(ctx, in, out)
}

func (h *metaHandler) OfflineStoreInfoByID(ctx context.Context, in *ParamsOfflineStoreInfoByID, out *ResponseOfflineStoreInfoByID) error {
	return h.MetaHandler.OfflineStoreInfoByID(ctx, in, out)
}

func (h *metaHandler) MobileAPIContacts(ctx context.Context, in *empty.Empty, out *ResponseMobileAPIContacts) error {
	return h.MetaHandler.MobileAPIContacts(ctx, in, out)
}

func (h *metaHandler) MobileApiAbout(ctx context.Context, in *empty.Empty, out *ResponseMobileApiAbout) error {
	return h.MetaHandler.MobileApiAbout(ctx, in, out)
}
