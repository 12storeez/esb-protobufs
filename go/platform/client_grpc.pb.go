// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package platform

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientsClient is the client API for Clients service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientsClient interface {
	Create(ctx context.Context, in *Client, opts ...grpc.CallOption) (*ClientId, error)
	Get(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Client, error)
	List(ctx context.Context, in *ListClientRequest, opts ...grpc.CallOption) (*ListClientResponse, error)
	Update(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error)
	Upsert(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error)
	Delete(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*empty.Empty, error)
}

type clientsClient struct {
	cc grpc.ClientConnInterface
}

func NewClientsClient(cc grpc.ClientConnInterface) ClientsClient {
	return &clientsClient{cc}
}

func (c *clientsClient) Create(ctx context.Context, in *Client, opts ...grpc.CallOption) (*ClientId, error) {
	out := new(ClientId)
	err := c.cc.Invoke(ctx, "/platform.Clients/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Get(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/platform.Clients/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) List(ctx context.Context, in *ListClientRequest, opts ...grpc.CallOption) (*ListClientResponse, error) {
	out := new(ListClientResponse)
	err := c.cc.Invoke(ctx, "/platform.Clients/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Update(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/platform.Clients/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Upsert(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/platform.Clients/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Delete(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/platform.Clients/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientsServer is the server API for Clients service.
// All implementations should embed UnimplementedClientsServer
// for forward compatibility
type ClientsServer interface {
	Create(context.Context, *Client) (*ClientId, error)
	Get(context.Context, *ClientId) (*Client, error)
	List(context.Context, *ListClientRequest) (*ListClientResponse, error)
	Update(context.Context, *Client) (*Client, error)
	Upsert(context.Context, *Client) (*Client, error)
	Delete(context.Context, *ClientId) (*empty.Empty, error)
}

// UnimplementedClientsServer should be embedded to have forward compatible implementations.
type UnimplementedClientsServer struct {
}

func (UnimplementedClientsServer) Create(context.Context, *Client) (*ClientId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedClientsServer) Get(context.Context, *ClientId) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedClientsServer) List(context.Context, *ListClientRequest) (*ListClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedClientsServer) Update(context.Context, *Client) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedClientsServer) Upsert(context.Context, *Client) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedClientsServer) Delete(context.Context, *ClientId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeClientsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientsServer will
// result in compilation errors.
type UnsafeClientsServer interface {
	mustEmbedUnimplementedClientsServer()
}

func RegisterClientsServer(s grpc.ServiceRegistrar, srv ClientsServer) {
	s.RegisterService(&Clients_ServiceDesc, srv)
}

func _Clients_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.Clients/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Create(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.Clients/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Get(ctx, req.(*ClientId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.Clients/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).List(ctx, req.(*ListClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.Clients/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Update(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.Clients/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Upsert(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.Clients/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Delete(ctx, req.(*ClientId))
	}
	return interceptor(ctx, in, info, handler)
}

// Clients_ServiceDesc is the grpc.ServiceDesc for Clients service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Clients_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "platform.Clients",
	HandlerType: (*ClientsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Clients_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Clients_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Clients_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Clients_Update_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _Clients_Upsert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Clients_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/platform/client.proto",
}
