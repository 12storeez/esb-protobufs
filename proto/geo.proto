syntax = "proto3";

option go_package = "go/geo";

package geo;

import "google/protobuf/empty.proto";

service geo {
  // Suggest по странам. Возвращет страны из БД
  rpc SuggestCountry(SuggestCountryParams) returns (SuggestCountryResponse) {
  }
  // Детальная информация по стране из БД
  rpc CountryDetails(CountryDetailsParams) returns (Country) {
  }
  // Suggest по городам. Если ничего не найдено - возвращает список городов по умолчанию (см. DefaultCityList)
  rpc SuggestCity(SuggestCityParams) returns (SuggestCityResponse) {
  }
  // Детали города (используется нормализация дадаты)
  rpc CityDetails(CityDetailsParams) returns (City) {
  }
  // Детали города по GeoID
  rpc CityDetailsByGeoID(CityDetailsByGeoIDParams) returns (City) {
  }
  // Метод возвращает список городов по-умолчанию, в зависимости от количества заказов
  rpc DefaultCityList(google.protobuf.Empty) returns (SuggestCity) {
  }
  // Определение города по IP (MaxMind & Dadata + cache)
  rpc CityByIP(CityByIPParams) returns (CityByIPResponse) {
  }
  // Suggest по адресам
  rpc SuggestAddress(SuggestAddressParams) returns (SuggestAddressResponse) {
  }
  // Нормализация адреса
  rpc AddressDetails(AddressDetailsParams) returns (Address) {
  }
  // Детали адреса по GeoID
  rpc AddressDetailsByGeoID(AddressDetailsByGeoIDParams) returns (Address) {
  }
  // используется в логистике для поиска geoID родительских зон
  rpc AddressZones(AddressZonesParams) returns (AddressZonesResponse) {
  }
}

enum LanguageType {
  ru = 0;
  en = 1;
}

// Country ...
message SuggestCountryParams {
  LanguageType language = 1;
  string search = 2;
  int32  limit = 3;
  int32  offset = 4;
}

message SuggestCountryResponse {
  bool success = 1;
  int32 total = 2;
  repeated SuggestCountry result = 3;
}

message SuggestCountry {
  string iso_code = 1;
  string name = 2;
  Continent continent = 3;
  Phone phone = 4;
}

message CountryDetailsParams {
  LanguageType language = 1;
  string iso_code = 2;
}

message Country {
  string iso_code = 1;
  string name = 2;
  Continent continent = 3;
  Capital capital = 4;
  string postal_code_format = 5;
  string currency_code = 6;
  Phone phone = 7;
}

message Phone  {
  int32 prefix= 1;
  repeated string masks = 2;
  string primary_mask = 3;
}

message Continent {
  string code = 1;
  string name = 2;
}

message Capital {
  string name = 1;
  Location location = 2;
  string postal_code = 3;
}

// City ...
message SuggestCityParams {
  LanguageType language = 1;
  string country_iso_code = 2;
  string search = 3;
  int32 limit = 4;
  int32 offset = 5;
}

message SuggestCityResponse {
  bool success = 1;
  int32 total = 2;
  repeated SuggestCity result = 3;
}

message SuggestCity {
  string id = 1;
  string suggest = 2;
  string name = 3;
  string subtitle = 4;
  string type = 5;
}

message CityDetailsParams {
  LanguageType language = 1;
  string country_iso_code = 2;

  // для России передавать полученный suggest из SuggestCity. Метод использует нормализацию Dadata
  // для остальных передавать id
  string query = 3;
}

message CityDetailsByGeoIDParams {
  LanguageType language = 1;
  string country_iso_code = 2;
  string id = 3; // fiasID или geoID
}

message City {
  string id = 1;
  string name = 2;
  string country_iso_code = 3;
  string postal_code = 4;
  string type = 5;
  Region region = 6;
  State state = 7;
  Location location = 8;
  CityAdditional additional = 9;
}

message State {
  string name = 1;
  string iso_code = 2;
}

message Region {
  string id = 1;
  string name = 2;
  string iso_code = 3;
  string type = 5;
}

message Location  {
  double latitude = 1;
  double longitude = 2;
}

message CityByIPParams {
  LanguageType language = 1;
  string ip = 2;
}

// maxmind или dadata (+кэшируем данные в базе по geoID)
message CityByIPResponse {
  string id = 1;
  string name = 2;
  string subtitle = 3;
  string type = 4;
  string country_iso_code = 5;
  string country_name = 6;
  Location location = 7;
}

// Address ...
message SuggestAddressParams {
  LanguageType language = 1;
  string       country_iso_code = 2;
  string       city_id = 3;
  string       search = 4;
  int32        limit = 5;
  int32        offset = 6;
}

message SuggestAddressResponse {
  bool success = 1;
  int32 total = 2;
  repeated SuggestAddress result = 3;
}

message SuggestAddress {
  string id = 1;  // fiasID или geoID
  string suggest = 2;
  string title = 3;
  string subtitle = 4;
  string query_for_details = 5;  // полная строка адреса, которую можно отправить в нормализацию
}

// нормализация
message AddressDetailsParams {
  LanguageType language = 1;
  string country_iso_code = 2;
  string query = 3;
}

message AddressDetailsByGeoIDParams {
  LanguageType language = 1;
  string country_iso_code = 2;
  string id = 3;
}

message Address {
  // fias_id for dadata and place_id for google
  string id = 1;
  string country_iso_code = 2;
  Region region = 3;
  State state = 4;
  string city = 5;
  string street = 6;
  string house = 7;
  string block = 8;
  string postal_code = 9;
  Location location = 10;
  // fias_level for dadata
  AddressAdditional additional = 11;
}

message AddressAdditional {
  bool is_in_mkad = 1;
  bool is_in_kad = 2;
  string fias_level = 3;
}

message CityAdditional {
  string kladr_id = 1;
  bool is_crimea = 2;
}

message AddressZonesParams {
  LanguageType language = 1;
  string country_iso_code = 2;
  string query = 3;
}

message AddressZonesResponse {
  string id = 1;
  string region_id = 2;
  string area_id = 3;
  string city_id = 4;
  string settlement_id = 5;
  string street_id = 6;
  string house_id = 7;
  string flat_id = 8;
}
