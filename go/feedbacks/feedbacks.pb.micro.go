// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/feedbacks.proto

package feedbacks

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Mobile service

type MobileService interface {
	App(ctx context.Context, in *RequestApp, opts ...client.CallOption) (*ResponseOk, error)
	Store(ctx context.Context, in *RequestStore, opts ...client.CallOption) (*ResponseOk, error)
	Order(ctx context.Context, in *RequestOrder, opts ...client.CallOption) (*ResponseOk, error)
	AnswersStore(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseAnswersStore, error)
	AnswersPickupBoxberry(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseAnswersPickupBoxberry, error)
	AnswersPickupStore(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseAnswersPickupStore, error)
	AnswersExpressDelivery(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseAnswersExpressDelivery, error)
}

type mobileService struct {
	c    client.Client
	name string
}

func NewMobileService(name string, c client.Client) MobileService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "feedbacks"
	}
	return &mobileService{
		c:    c,
		name: name,
	}
}

func (c *mobileService) App(ctx context.Context, in *RequestApp, opts ...client.CallOption) (*ResponseOk, error) {
	req := c.c.NewRequest(c.name, "Mobile.App", in)
	out := new(ResponseOk)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileService) Store(ctx context.Context, in *RequestStore, opts ...client.CallOption) (*ResponseOk, error) {
	req := c.c.NewRequest(c.name, "Mobile.Store", in)
	out := new(ResponseOk)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileService) Order(ctx context.Context, in *RequestOrder, opts ...client.CallOption) (*ResponseOk, error) {
	req := c.c.NewRequest(c.name, "Mobile.Order", in)
	out := new(ResponseOk)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileService) AnswersStore(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseAnswersStore, error) {
	req := c.c.NewRequest(c.name, "Mobile.AnswersStore", in)
	out := new(ResponseAnswersStore)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileService) AnswersPickupBoxberry(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseAnswersPickupBoxberry, error) {
	req := c.c.NewRequest(c.name, "Mobile.AnswersPickupBoxberry", in)
	out := new(ResponseAnswersPickupBoxberry)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileService) AnswersPickupStore(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseAnswersPickupStore, error) {
	req := c.c.NewRequest(c.name, "Mobile.AnswersPickupStore", in)
	out := new(ResponseAnswersPickupStore)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileService) AnswersExpressDelivery(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ResponseAnswersExpressDelivery, error) {
	req := c.c.NewRequest(c.name, "Mobile.AnswersExpressDelivery", in)
	out := new(ResponseAnswersExpressDelivery)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mobile service

type MobileHandler interface {
	App(context.Context, *RequestApp, *ResponseOk) error
	Store(context.Context, *RequestStore, *ResponseOk) error
	Order(context.Context, *RequestOrder, *ResponseOk) error
	AnswersStore(context.Context, *empty.Empty, *ResponseAnswersStore) error
	AnswersPickupBoxberry(context.Context, *empty.Empty, *ResponseAnswersPickupBoxberry) error
	AnswersPickupStore(context.Context, *empty.Empty, *ResponseAnswersPickupStore) error
	AnswersExpressDelivery(context.Context, *empty.Empty, *ResponseAnswersExpressDelivery) error
}

func RegisterMobileHandler(s server.Server, hdlr MobileHandler, opts ...server.HandlerOption) error {
	type mobile interface {
		App(ctx context.Context, in *RequestApp, out *ResponseOk) error
		Store(ctx context.Context, in *RequestStore, out *ResponseOk) error
		Order(ctx context.Context, in *RequestOrder, out *ResponseOk) error
		AnswersStore(ctx context.Context, in *empty.Empty, out *ResponseAnswersStore) error
		AnswersPickupBoxberry(ctx context.Context, in *empty.Empty, out *ResponseAnswersPickupBoxberry) error
		AnswersPickupStore(ctx context.Context, in *empty.Empty, out *ResponseAnswersPickupStore) error
		AnswersExpressDelivery(ctx context.Context, in *empty.Empty, out *ResponseAnswersExpressDelivery) error
	}
	type Mobile struct {
		mobile
	}
	h := &mobileHandler{hdlr}
	return s.Handle(s.NewHandler(&Mobile{h}, opts...))
}

type mobileHandler struct {
	MobileHandler
}

func (h *mobileHandler) App(ctx context.Context, in *RequestApp, out *ResponseOk) error {
	return h.MobileHandler.App(ctx, in, out)
}

func (h *mobileHandler) Store(ctx context.Context, in *RequestStore, out *ResponseOk) error {
	return h.MobileHandler.Store(ctx, in, out)
}

func (h *mobileHandler) Order(ctx context.Context, in *RequestOrder, out *ResponseOk) error {
	return h.MobileHandler.Order(ctx, in, out)
}

func (h *mobileHandler) AnswersStore(ctx context.Context, in *empty.Empty, out *ResponseAnswersStore) error {
	return h.MobileHandler.AnswersStore(ctx, in, out)
}

func (h *mobileHandler) AnswersPickupBoxberry(ctx context.Context, in *empty.Empty, out *ResponseAnswersPickupBoxberry) error {
	return h.MobileHandler.AnswersPickupBoxberry(ctx, in, out)
}

func (h *mobileHandler) AnswersPickupStore(ctx context.Context, in *empty.Empty, out *ResponseAnswersPickupStore) error {
	return h.MobileHandler.AnswersPickupStore(ctx, in, out)
}

func (h *mobileHandler) AnswersExpressDelivery(ctx context.Context, in *empty.Empty, out *ResponseAnswersExpressDelivery) error {
	return h.MobileHandler.AnswersExpressDelivery(ctx, in, out)
}
