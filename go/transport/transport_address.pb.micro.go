// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/transport_address.proto

package transport

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Address service

func NewAddressEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Address service

type AddressService interface {
	GetFias(ctx context.Context, in *Address, opts ...client.CallOption) (*AddressId, error)
	GetGeonameId(ctx context.Context, in *Address, opts ...client.CallOption) (*AddressId, error)
	GetAddressId(ctx context.Context, in *Address, opts ...client.CallOption) (*AddressId, error)
}

type addressService struct {
	c    client.Client
	name string
}

func NewAddressService(name string, c client.Client) AddressService {
	return &addressService{
		c:    c,
		name: name,
	}
}

func (c *addressService) GetFias(ctx context.Context, in *Address, opts ...client.CallOption) (*AddressId, error) {
	req := c.c.NewRequest(c.name, "Address.getFias", in)
	out := new(AddressId)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressService) GetGeonameId(ctx context.Context, in *Address, opts ...client.CallOption) (*AddressId, error) {
	req := c.c.NewRequest(c.name, "Address.getGeonameId", in)
	out := new(AddressId)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressService) GetAddressId(ctx context.Context, in *Address, opts ...client.CallOption) (*AddressId, error) {
	req := c.c.NewRequest(c.name, "Address.getAddressId", in)
	out := new(AddressId)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Address service

type AddressHandler interface {
	GetFias(context.Context, *Address, *AddressId) error
	GetGeonameId(context.Context, *Address, *AddressId) error
	GetAddressId(context.Context, *Address, *AddressId) error
}

func RegisterAddressHandler(s server.Server, hdlr AddressHandler, opts ...server.HandlerOption) error {
	type address interface {
		GetFias(ctx context.Context, in *Address, out *AddressId) error
		GetGeonameId(ctx context.Context, in *Address, out *AddressId) error
		GetAddressId(ctx context.Context, in *Address, out *AddressId) error
	}
	type Address struct {
		address
	}
	h := &addressHandler{hdlr}
	return s.Handle(s.NewHandler(&Address{h}, opts...))
}

type addressHandler struct {
	AddressHandler
}

func (h *addressHandler) GetFias(ctx context.Context, in *Address, out *AddressId) error {
	return h.AddressHandler.GetFias(ctx, in, out)
}

func (h *addressHandler) GetGeonameId(ctx context.Context, in *Address, out *AddressId) error {
	return h.AddressHandler.GetGeonameId(ctx, in, out)
}

func (h *addressHandler) GetAddressId(ctx context.Context, in *Address, out *AddressId) error {
	return h.AddressHandler.GetAddressId(ctx, in, out)
}
