// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeliveryMethodsClient is the client API for DeliveryMethods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryMethodsClient interface {
	Create(ctx context.Context, in *DeliveryMethod, opts ...grpc.CallOption) (*DeliveryMethodId, error)
	Get(ctx context.Context, in *DeliveryMethodId, opts ...grpc.CallOption) (*DeliveryMethod, error)
	List(ctx context.Context, in *ListDeliveryMethodsRequest, opts ...grpc.CallOption) (*ListDeliveryMethodsResponse, error)
	Update(ctx context.Context, in *DeliveryMethod, opts ...grpc.CallOption) (*DeliveryMethod, error)
	Delete(ctx context.Context, in *DeliveryMethodId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deliveryMethodsClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryMethodsClient(cc grpc.ClientConnInterface) DeliveryMethodsClient {
	return &deliveryMethodsClient{cc}
}

func (c *deliveryMethodsClient) Create(ctx context.Context, in *DeliveryMethod, opts ...grpc.CallOption) (*DeliveryMethodId, error) {
	out := new(DeliveryMethodId)
	err := c.cc.Invoke(ctx, "/logistics.DeliveryMethods/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryMethodsClient) Get(ctx context.Context, in *DeliveryMethodId, opts ...grpc.CallOption) (*DeliveryMethod, error) {
	out := new(DeliveryMethod)
	err := c.cc.Invoke(ctx, "/logistics.DeliveryMethods/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryMethodsClient) List(ctx context.Context, in *ListDeliveryMethodsRequest, opts ...grpc.CallOption) (*ListDeliveryMethodsResponse, error) {
	out := new(ListDeliveryMethodsResponse)
	err := c.cc.Invoke(ctx, "/logistics.DeliveryMethods/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryMethodsClient) Update(ctx context.Context, in *DeliveryMethod, opts ...grpc.CallOption) (*DeliveryMethod, error) {
	out := new(DeliveryMethod)
	err := c.cc.Invoke(ctx, "/logistics.DeliveryMethods/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryMethodsClient) Delete(ctx context.Context, in *DeliveryMethodId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.DeliveryMethods/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryMethodsServer is the server API for DeliveryMethods service.
// All implementations must embed UnimplementedDeliveryMethodsServer
// for forward compatibility
type DeliveryMethodsServer interface {
	Create(context.Context, *DeliveryMethod) (*DeliveryMethodId, error)
	Get(context.Context, *DeliveryMethodId) (*DeliveryMethod, error)
	List(context.Context, *ListDeliveryMethodsRequest) (*ListDeliveryMethodsResponse, error)
	Update(context.Context, *DeliveryMethod) (*DeliveryMethod, error)
	Delete(context.Context, *DeliveryMethodId) (*emptypb.Empty, error)
	mustEmbedUnimplementedDeliveryMethodsServer()
}

// UnimplementedDeliveryMethodsServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveryMethodsServer struct {
}

func (UnimplementedDeliveryMethodsServer) Create(context.Context, *DeliveryMethod) (*DeliveryMethodId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDeliveryMethodsServer) Get(context.Context, *DeliveryMethodId) (*DeliveryMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDeliveryMethodsServer) List(context.Context, *ListDeliveryMethodsRequest) (*ListDeliveryMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDeliveryMethodsServer) Update(context.Context, *DeliveryMethod) (*DeliveryMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDeliveryMethodsServer) Delete(context.Context, *DeliveryMethodId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeliveryMethodsServer) mustEmbedUnimplementedDeliveryMethodsServer() {}

// UnsafeDeliveryMethodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryMethodsServer will
// result in compilation errors.
type UnsafeDeliveryMethodsServer interface {
	mustEmbedUnimplementedDeliveryMethodsServer()
}

func RegisterDeliveryMethodsServer(s grpc.ServiceRegistrar, srv DeliveryMethodsServer) {
	s.RegisterService(&DeliveryMethods_ServiceDesc, srv)
}

func _DeliveryMethods_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryMethodsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.DeliveryMethods/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryMethodsServer).Create(ctx, req.(*DeliveryMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryMethods_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryMethodId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryMethodsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.DeliveryMethods/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryMethodsServer).Get(ctx, req.(*DeliveryMethodId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryMethods_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeliveryMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryMethodsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.DeliveryMethods/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryMethodsServer).List(ctx, req.(*ListDeliveryMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryMethods_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryMethodsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.DeliveryMethods/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryMethodsServer).Update(ctx, req.(*DeliveryMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryMethods_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryMethodId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryMethodsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.DeliveryMethods/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryMethodsServer).Delete(ctx, req.(*DeliveryMethodId))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryMethods_ServiceDesc is the grpc.ServiceDesc for DeliveryMethods service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryMethods_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.DeliveryMethods",
	HandlerType: (*DeliveryMethodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DeliveryMethods_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DeliveryMethods_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DeliveryMethods_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DeliveryMethods_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeliveryMethods_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logistics/delivery_method.proto",
}
