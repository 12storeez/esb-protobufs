// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/transport_address.proto

package transport

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Address struct {
	CountryCode          string   `protobuf:"bytes,1,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Locality             string   `protobuf:"bytes,2,opt,name=locality,proto3" json:"locality,omitempty"`
	Street               string   `protobuf:"bytes,3,opt,name=street,proto3" json:"street,omitempty"`
	HouseNumber          string   `protobuf:"bytes,4,opt,name=house_number,json=houseNumber,proto3" json:"house_number,omitempty"`
	PostalCode           string   `protobuf:"bytes,5,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffa28b5de6950894, []int{0}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *Address) GetLocality() string {
	if m != nil {
		return m.Locality
	}
	return ""
}

func (m *Address) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *Address) GetHouseNumber() string {
	if m != nil {
		return m.HouseNumber
	}
	return ""
}

func (m *Address) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

type AddressId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressId) Reset()         { *m = AddressId{} }
func (m *AddressId) String() string { return proto.CompactTextString(m) }
func (*AddressId) ProtoMessage()    {}
func (*AddressId) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffa28b5de6950894, []int{1}
}

func (m *AddressId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressId.Unmarshal(m, b)
}
func (m *AddressId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressId.Marshal(b, m, deterministic)
}
func (m *AddressId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressId.Merge(m, src)
}
func (m *AddressId) XXX_Size() int {
	return xxx_messageInfo_AddressId.Size(m)
}
func (m *AddressId) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressId.DiscardUnknown(m)
}

var xxx_messageInfo_AddressId proto.InternalMessageInfo

func (m *AddressId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Address)(nil), "transport.Address")
	proto.RegisterType((*AddressId)(nil), "transport.addressId")
}

func init() { proto.RegisterFile("proto/transport_address.proto", fileDescriptor_ffa28b5de6950894) }

var fileDescriptor_ffa28b5de6950894 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xb1, 0x4a, 0xfc, 0x40,
	0x10, 0xc6, 0xff, 0xc9, 0x5f, 0x2f, 0x66, 0x2e, 0x5c, 0x31, 0x88, 0x84, 0x13, 0x51, 0x53, 0x59,
	0x45, 0x50, 0x6c, 0xec, 0x4e, 0x41, 0xb9, 0xc6, 0xc2, 0xd2, 0x26, 0xec, 0x65, 0x87, 0x18, 0xc8,
	0x65, 0xc2, 0xee, 0xa4, 0xb8, 0xf7, 0xf1, 0x21, 0x7c, 0x3c, 0xb9, 0xcd, 0xb2, 0x5c, 0xab, 0xe5,
	0xfc, 0xbe, 0x99, 0x6f, 0xe6, 0x63, 0xe0, 0x62, 0x30, 0x2c, 0x7c, 0x2b, 0x46, 0xf5, 0x76, 0x60,
	0x23, 0x95, 0xd2, 0xda, 0x90, 0xb5, 0xa5, 0xe3, 0x98, 0x06, 0xa1, 0xf8, 0x8a, 0x20, 0x59, 0x4d,
	0x22, 0x5e, 0x43, 0x56, 0xf3, 0xd8, 0x8b, 0xd9, 0x55, 0x35, 0x6b, 0xca, 0xa3, 0xab, 0xe8, 0x26,
	0x7d, 0x9f, 0x7b, 0xf6, 0xcc, 0x9a, 0x70, 0x09, 0x27, 0x1d, 0xd7, 0xaa, 0x6b, 0x65, 0x97, 0xc7,
	0x4e, 0x0e, 0x35, 0x9e, 0xc1, 0xcc, 0x8a, 0x21, 0x92, 0xfc, 0xbf, 0x53, 0x7c, 0xb5, 0xb7, 0xfd,
	0xe4, 0xd1, 0x52, 0xd5, 0x8f, 0xdb, 0x0d, 0x99, 0xfc, 0x68, 0xb2, 0x75, 0xec, 0xcd, 0x21, 0xbc,
	0x84, 0xf9, 0xc0, 0x56, 0x54, 0x37, 0x2d, 0x3e, 0x76, 0x1d, 0x30, 0xa1, 0xfd, 0xde, 0xe2, 0x1c,
	0x52, 0x1f, 0x61, 0xad, 0x71, 0x01, 0x71, 0xab, 0xfd, 0x75, 0x71, 0xab, 0xef, 0xbe, 0x23, 0x48,
	0xbc, 0x8a, 0x0f, 0x90, 0x34, 0x24, 0x2f, 0xad, 0xb2, 0x88, 0x65, 0x88, 0x59, 0xfa, 0x88, 0xcb,
	0xd3, 0x03, 0x16, 0x0c, 0x8b, 0x7f, 0xf8, 0x08, 0x59, 0x43, 0xf2, 0x4a, 0xdc, 0xab, 0x2d, 0xad,
	0xf5, 0x1f, 0x66, 0x57, 0xe1, 0xbc, 0x5f, 0xcc, 0x3e, 0x2d, 0x3e, 0xb2, 0xe6, 0xe0, 0x4f, 0x9b,
	0x99, 0x7b, 0xd0, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0xc4, 0x21, 0x9f, 0xc1, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AddressClient is the client API for Address service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AddressClient interface {
	GetFias(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AddressId, error)
	GetGeonameId(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AddressId, error)
	GetAddressId(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AddressId, error)
}

type addressClient struct {
	cc *grpc.ClientConn
}

func NewAddressClient(cc *grpc.ClientConn) AddressClient {
	return &addressClient{cc}
}

func (c *addressClient) GetFias(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AddressId, error) {
	out := new(AddressId)
	err := c.cc.Invoke(ctx, "/transport.address/getFias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressClient) GetGeonameId(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AddressId, error) {
	out := new(AddressId)
	err := c.cc.Invoke(ctx, "/transport.address/getGeonameId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressClient) GetAddressId(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AddressId, error) {
	out := new(AddressId)
	err := c.cc.Invoke(ctx, "/transport.address/getAddressId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressServer is the server API for Address service.
type AddressServer interface {
	GetFias(context.Context, *Address) (*AddressId, error)
	GetGeonameId(context.Context, *Address) (*AddressId, error)
	GetAddressId(context.Context, *Address) (*AddressId, error)
}

// UnimplementedAddressServer can be embedded to have forward compatible implementations.
type UnimplementedAddressServer struct {
}

func (*UnimplementedAddressServer) GetFias(ctx context.Context, req *Address) (*AddressId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFias not implemented")
}
func (*UnimplementedAddressServer) GetGeonameId(ctx context.Context, req *Address) (*AddressId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeonameId not implemented")
}
func (*UnimplementedAddressServer) GetAddressId(ctx context.Context, req *Address) (*AddressId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressId not implemented")
}

func RegisterAddressServer(s *grpc.Server, srv AddressServer) {
	s.RegisterService(&_Address_serviceDesc, srv)
}

func _Address_GetFias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).GetFias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport.address/GetFias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).GetFias(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _Address_GetGeonameId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).GetGeonameId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport.address/GetGeonameId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).GetGeonameId(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _Address_GetAddressId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).GetAddressId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport.address/GetAddressId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).GetAddressId(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

var _Address_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transport.address",
	HandlerType: (*AddressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getFias",
			Handler:    _Address_GetFias_Handler,
		},
		{
			MethodName: "getGeonameId",
			Handler:    _Address_GetGeonameId_Handler,
		},
		{
			MethodName: "getAddressId",
			Handler:    _Address_GetAddressId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/transport_address.proto",
}
