// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: popup.proto

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PopupService_List_FullMethodName    = "/logistics.PopupService/List"
	PopupService_Create_FullMethodName  = "/logistics.PopupService/Create"
	PopupService_Get_FullMethodName     = "/logistics.PopupService/Get"
	PopupService_Update_FullMethodName  = "/logistics.PopupService/Update"
	PopupService_Delete_FullMethodName  = "/logistics.PopupService/Delete"
	PopupService_Suggest_FullMethodName = "/logistics.PopupService/Suggest"
)

// PopupServiceClient is the client API for PopupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PopupServiceClient interface {
	List(ctx context.Context, in *ListPopupRequest, opts ...grpc.CallOption) (*ListPopupResponse, error)
	Create(ctx context.Context, in *Popup, opts ...grpc.CallOption) (*Popup, error)
	Get(ctx context.Context, in *PopupId, opts ...grpc.CallOption) (*Popup, error)
	Update(ctx context.Context, in *Popup, opts ...grpc.CallOption) (*Popup, error)
	Delete(ctx context.Context, in *PopupId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Suggest(ctx context.Context, in *SuggestPopupRequest, opts ...grpc.CallOption) (*SuggestPopupResponse, error)
}

type popupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPopupServiceClient(cc grpc.ClientConnInterface) PopupServiceClient {
	return &popupServiceClient{cc}
}

func (c *popupServiceClient) List(ctx context.Context, in *ListPopupRequest, opts ...grpc.CallOption) (*ListPopupResponse, error) {
	out := new(ListPopupResponse)
	err := c.cc.Invoke(ctx, PopupService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *popupServiceClient) Create(ctx context.Context, in *Popup, opts ...grpc.CallOption) (*Popup, error) {
	out := new(Popup)
	err := c.cc.Invoke(ctx, PopupService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *popupServiceClient) Get(ctx context.Context, in *PopupId, opts ...grpc.CallOption) (*Popup, error) {
	out := new(Popup)
	err := c.cc.Invoke(ctx, PopupService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *popupServiceClient) Update(ctx context.Context, in *Popup, opts ...grpc.CallOption) (*Popup, error) {
	out := new(Popup)
	err := c.cc.Invoke(ctx, PopupService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *popupServiceClient) Delete(ctx context.Context, in *PopupId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PopupService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *popupServiceClient) Suggest(ctx context.Context, in *SuggestPopupRequest, opts ...grpc.CallOption) (*SuggestPopupResponse, error) {
	out := new(SuggestPopupResponse)
	err := c.cc.Invoke(ctx, PopupService_Suggest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PopupServiceServer is the server API for PopupService service.
// All implementations should embed UnimplementedPopupServiceServer
// for forward compatibility
type PopupServiceServer interface {
	List(context.Context, *ListPopupRequest) (*ListPopupResponse, error)
	Create(context.Context, *Popup) (*Popup, error)
	Get(context.Context, *PopupId) (*Popup, error)
	Update(context.Context, *Popup) (*Popup, error)
	Delete(context.Context, *PopupId) (*emptypb.Empty, error)
	Suggest(context.Context, *SuggestPopupRequest) (*SuggestPopupResponse, error)
}

// UnimplementedPopupServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPopupServiceServer struct {
}

func (UnimplementedPopupServiceServer) List(context.Context, *ListPopupRequest) (*ListPopupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPopupServiceServer) Create(context.Context, *Popup) (*Popup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPopupServiceServer) Get(context.Context, *PopupId) (*Popup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPopupServiceServer) Update(context.Context, *Popup) (*Popup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPopupServiceServer) Delete(context.Context, *PopupId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPopupServiceServer) Suggest(context.Context, *SuggestPopupRequest) (*SuggestPopupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suggest not implemented")
}

// UnsafePopupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PopupServiceServer will
// result in compilation errors.
type UnsafePopupServiceServer interface {
	mustEmbedUnimplementedPopupServiceServer()
}

func RegisterPopupServiceServer(s grpc.ServiceRegistrar, srv PopupServiceServer) {
	s.RegisterService(&PopupService_ServiceDesc, srv)
}

func _PopupService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PopupServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PopupService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PopupServiceServer).List(ctx, req.(*ListPopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PopupService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Popup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PopupServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PopupService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PopupServiceServer).Create(ctx, req.(*Popup))
	}
	return interceptor(ctx, in, info, handler)
}

func _PopupService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PopupServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PopupService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PopupServiceServer).Get(ctx, req.(*PopupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PopupService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Popup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PopupServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PopupService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PopupServiceServer).Update(ctx, req.(*Popup))
	}
	return interceptor(ctx, in, info, handler)
}

func _PopupService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PopupServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PopupService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PopupServiceServer).Delete(ctx, req.(*PopupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PopupService_Suggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestPopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PopupServiceServer).Suggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PopupService_Suggest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PopupServiceServer).Suggest(ctx, req.(*SuggestPopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PopupService_ServiceDesc is the grpc.ServiceDesc for PopupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PopupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.PopupService",
	HandlerType: (*PopupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PopupService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PopupService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PopupService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PopupService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PopupService_Delete_Handler,
		},
		{
			MethodName: "Suggest",
			Handler:    _PopupService_Suggest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "popup.proto",
}
