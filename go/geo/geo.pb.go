// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: proto/geo.proto

package geo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LanguageType int32

const (
	LanguageType_ru LanguageType = 0
	LanguageType_en LanguageType = 1
)

// Enum value maps for LanguageType.
var (
	LanguageType_name = map[int32]string{
		0: "ru",
		1: "en",
	}
	LanguageType_value = map[string]int32{
		"ru": 0,
		"en": 1,
	}
)

func (x LanguageType) Enum() *LanguageType {
	p := new(LanguageType)
	*p = x
	return p
}

func (x LanguageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanguageType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_geo_proto_enumTypes[0].Descriptor()
}

func (LanguageType) Type() protoreflect.EnumType {
	return &file_proto_geo_proto_enumTypes[0]
}

func (x LanguageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LanguageType.Descriptor instead.
func (LanguageType) EnumDescriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{0}
}

// Country ...
type CountryByCodeParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language LanguageType `protobuf:"varint,1,opt,name=language,proto3,enum=geo.LanguageType" json:"language,omitempty"`
	IsoCode  string       `protobuf:"bytes,2,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Limit    int32        `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CountryByCodeParams) Reset() {
	*x = CountryByCodeParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryByCodeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryByCodeParams) ProtoMessage() {}

func (x *CountryByCodeParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryByCodeParams.ProtoReflect.Descriptor instead.
func (*CountryByCodeParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{0}
}

func (x *CountryByCodeParams) GetLanguage() LanguageType {
	if x != nil {
		return x.Language
	}
	return LanguageType_ru
}

func (x *CountryByCodeParams) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *CountryByCodeParams) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsoCode          string     `protobuf:"bytes,1,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Name             string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Continent        *Continent `protobuf:"bytes,3,opt,name=continent,proto3" json:"continent,omitempty"`
	Capital          *Capital   `protobuf:"bytes,4,opt,name=capital,proto3" json:"capital,omitempty"`
	PostalCodeFormat string     `protobuf:"bytes,5,opt,name=postal_code_format,json=postalCodeFormat,proto3" json:"postal_code_format,omitempty"`
	CurrencyCode     string     `protobuf:"bytes,6,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	PhonePrefix      string     `protobuf:"bytes,7,opt,name=phone_prefix,json=phonePrefix,proto3" json:"phone_prefix,omitempty"`
	PhoneMasks       []string   `protobuf:"bytes,8,rep,name=phone_masks,json=phoneMasks,proto3" json:"phone_masks,omitempty"`
}

func (x *Country) Reset() {
	*x = Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{1}
}

func (x *Country) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *Country) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Country) GetContinent() *Continent {
	if x != nil {
		return x.Continent
	}
	return nil
}

func (x *Country) GetCapital() *Capital {
	if x != nil {
		return x.Capital
	}
	return nil
}

func (x *Country) GetPostalCodeFormat() string {
	if x != nil {
		return x.PostalCodeFormat
	}
	return ""
}

func (x *Country) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Country) GetPhonePrefix() string {
	if x != nil {
		return x.PhonePrefix
	}
	return ""
}

func (x *Country) GetPhoneMasks() []string {
	if x != nil {
		return x.PhoneMasks
	}
	return nil
}

type Continent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Continent) Reset() {
	*x = Continent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Continent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Continent) ProtoMessage() {}

func (x *Continent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Continent.ProtoReflect.Descriptor instead.
func (*Continent) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{2}
}

func (x *Continent) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Continent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Capital struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Location   *Location `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	PostalCode string    `protobuf:"bytes,3,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
}

func (x *Capital) Reset() {
	*x = Capital{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capital) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capital) ProtoMessage() {}

func (x *Capital) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capital.ProtoReflect.Descriptor instead.
func (*Capital) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{3}
}

func (x *Capital) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Capital) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Capital) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

type SuggestCountryParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language LanguageType `protobuf:"varint,1,opt,name=language,proto3,enum=geo.LanguageType" json:"language,omitempty"`
	Name     string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Limit    int32        `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SuggestCountryParams) Reset() {
	*x = SuggestCountryParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestCountryParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestCountryParams) ProtoMessage() {}

func (x *SuggestCountryParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestCountryParams.ProtoReflect.Descriptor instead.
func (*SuggestCountryParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{4}
}

func (x *SuggestCountryParams) GetLanguage() LanguageType {
	if x != nil {
		return x.Language
	}
	return LanguageType_ru
}

func (x *SuggestCountryParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SuggestCountryParams) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SuggestCountryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Country `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Total   int32      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SuggestCountryResponse) Reset() {
	*x = SuggestCountryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestCountryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestCountryResponse) ProtoMessage() {}

func (x *SuggestCountryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestCountryResponse.ProtoReflect.Descriptor instead.
func (*SuggestCountryResponse) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{5}
}

func (x *SuggestCountryResponse) GetResults() []*Country {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SuggestCountryResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// City ...
type SuggestCityParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language       LanguageType `protobuf:"varint,1,opt,name=language,proto3,enum=geo.LanguageType" json:"language,omitempty"`
	CountryIsoCode string       `protobuf:"bytes,2,opt,name=country_iso_code,json=countryIsoCode,proto3" json:"country_iso_code,omitempty"`
	CityName       string       `protobuf:"bytes,3,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	Limit          int32        `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SuggestCityParams) Reset() {
	*x = SuggestCityParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestCityParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestCityParams) ProtoMessage() {}

func (x *SuggestCityParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestCityParams.ProtoReflect.Descriptor instead.
func (*SuggestCityParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{6}
}

func (x *SuggestCityParams) GetLanguage() LanguageType {
	if x != nil {
		return x.Language
	}
	return LanguageType_ru
}

func (x *SuggestCityParams) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *SuggestCityParams) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *SuggestCityParams) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SuggestCityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SuggestCity `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Total   int32          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SuggestCityResponse) Reset() {
	*x = SuggestCityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestCityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestCityResponse) ProtoMessage() {}

func (x *SuggestCityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestCityResponse.ProtoReflect.Descriptor instead.
func (*SuggestCityResponse) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{7}
}

func (x *SuggestCityResponse) GetResults() []*SuggestCity {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SuggestCityResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SuggestCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Suggest  string `protobuf:"bytes,2,opt,name=suggest,proto3" json:"suggest,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Subtitle string `protobuf:"bytes,4,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Origin   string `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
	Type     string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *SuggestCity) Reset() {
	*x = SuggestCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestCity) ProtoMessage() {}

func (x *SuggestCity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestCity.ProtoReflect.Descriptor instead.
func (*SuggestCity) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{8}
}

func (x *SuggestCity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SuggestCity) GetSuggest() string {
	if x != nil {
		return x.Suggest
	}
	return ""
}

func (x *SuggestCity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SuggestCity) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *SuggestCity) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *SuggestCity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type CityByIDParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language       LanguageType `protobuf:"varint,1,opt,name=language,proto3,enum=geo.LanguageType" json:"language,omitempty"`
	CountryIsoCode string       `protobuf:"bytes,2,opt,name=country_iso_code,json=countryIsoCode,proto3" json:"country_iso_code,omitempty"`
	CityId         string       `protobuf:"bytes,3,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
}

func (x *CityByIDParams) Reset() {
	*x = CityByIDParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityByIDParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityByIDParams) ProtoMessage() {}

func (x *CityByIDParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityByIDParams.ProtoReflect.Descriptor instead.
func (*CityByIDParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{9}
}

func (x *CityByIDParams) GetLanguage() LanguageType {
	if x != nil {
		return x.Language
	}
	return LanguageType_ru
}

func (x *CityByIDParams) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *CityByIDParams) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

type City struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	KladrId        string    `protobuf:"bytes,3,opt,name=kladr_id,json=kladrId,proto3" json:"kladr_id,omitempty"`
	CountryIsoCode string    `protobuf:"bytes,4,opt,name=country_iso_code,json=countryIsoCode,proto3" json:"country_iso_code,omitempty"`
	PostalCode     string    `protobuf:"bytes,5,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	Region         *Region   `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	Location       *Location `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *City) Reset() {
	*x = City{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *City) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*City) ProtoMessage() {}

func (x *City) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use City.ProtoReflect.Descriptor instead.
func (*City) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{10}
}

func (x *City) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *City) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *City) GetKladrId() string {
	if x != nil {
		return x.KladrId
	}
	return ""
}

func (x *City) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *City) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *City) GetRegion() *Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *City) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsoCode string `protobuf:"bytes,3,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	KladrId string `protobuf:"bytes,4,opt,name=kladr_id,json=kladrId,proto3" json:"kladr_id,omitempty"`
	Type    string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Region) Reset() {
	*x = Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{11}
}

func (x *Region) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Region) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Region) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *Region) GetKladrId() string {
	if x != nil {
		return x.KladrId
	}
	return ""
}

func (x *Region) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{12}
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type CityByIPParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language LanguageType `protobuf:"varint,1,opt,name=language,proto3,enum=geo.LanguageType" json:"language,omitempty"`
	Ip       string       `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *CityByIPParams) Reset() {
	*x = CityByIPParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityByIPParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityByIPParams) ProtoMessage() {}

func (x *CityByIPParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityByIPParams.ProtoReflect.Descriptor instead.
func (*CityByIPParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{13}
}

func (x *CityByIPParams) GetLanguage() LanguageType {
	if x != nil {
		return x.Language
	}
	return LanguageType_ru
}

func (x *CityByIPParams) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type CityByIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Continent *Continent `protobuf:"bytes,2,opt,name=continent,proto3" json:"continent,omitempty"`
	Country   *Country   `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Location  *Location  `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *CityByIPResponse) Reset() {
	*x = CityByIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityByIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityByIPResponse) ProtoMessage() {}

func (x *CityByIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityByIPResponse.ProtoReflect.Descriptor instead.
func (*CityByIPResponse) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{14}
}

func (x *CityByIPResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CityByIPResponse) GetContinent() *Continent {
	if x != nil {
		return x.Continent
	}
	return nil
}

func (x *CityByIPResponse) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *CityByIPResponse) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

// Address ...
type SuggestAddressParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language       LanguageType `protobuf:"varint,1,opt,name=language,proto3,enum=geo.LanguageType" json:"language,omitempty"`
	CountryIsoCode string       `protobuf:"bytes,2,opt,name=country_iso_code,json=countryIsoCode,proto3" json:"country_iso_code,omitempty"`
	CityId         string       `protobuf:"bytes,3,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	Address        string       `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Limit          int32        `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SuggestAddressParams) Reset() {
	*x = SuggestAddressParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestAddressParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestAddressParams) ProtoMessage() {}

func (x *SuggestAddressParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestAddressParams.ProtoReflect.Descriptor instead.
func (*SuggestAddressParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{15}
}

func (x *SuggestAddressParams) GetLanguage() LanguageType {
	if x != nil {
		return x.Language
	}
	return LanguageType_ru
}

func (x *SuggestAddressParams) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *SuggestAddressParams) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *SuggestAddressParams) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SuggestAddressParams) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SuggestAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SuggestAddress `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Total   int32             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SuggestAddressResponse) Reset() {
	*x = SuggestAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestAddressResponse) ProtoMessage() {}

func (x *SuggestAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestAddressResponse.ProtoReflect.Descriptor instead.
func (*SuggestAddressResponse) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{16}
}

func (x *SuggestAddressResponse) GetResults() []*SuggestAddress {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SuggestAddressResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SuggestAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Suggest string   `protobuf:"bytes,2,opt,name=suggest,proto3" json:"suggest,omitempty"`
	Region  *Region  `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	City    string   `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	CityId  string   `protobuf:"bytes,7,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	Country *Country `protobuf:"bytes,8,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *SuggestAddress) Reset() {
	*x = SuggestAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestAddress) ProtoMessage() {}

func (x *SuggestAddress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestAddress.ProtoReflect.Descriptor instead.
func (*SuggestAddress) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{17}
}

func (x *SuggestAddress) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SuggestAddress) GetSuggest() string {
	if x != nil {
		return x.Suggest
	}
	return ""
}

func (x *SuggestAddress) GetRegion() *Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *SuggestAddress) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *SuggestAddress) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *SuggestAddress) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

type AddressDetailsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language       LanguageType `protobuf:"varint,1,opt,name=language,proto3,enum=geo.LanguageType" json:"language,omitempty"`
	CountryIsoCode string       `protobuf:"bytes,2,opt,name=country_iso_code,json=countryIsoCode,proto3" json:"country_iso_code,omitempty"`
	Query          string       `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *AddressDetailsParams) Reset() {
	*x = AddressDetailsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressDetailsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressDetailsParams) ProtoMessage() {}

func (x *AddressDetailsParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressDetailsParams.ProtoReflect.Descriptor instead.
func (*AddressDetailsParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{18}
}

func (x *AddressDetailsParams) GetLanguage() LanguageType {
	if x != nil {
		return x.Language
	}
	return LanguageType_ru
}

func (x *AddressDetailsParams) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *AddressDetailsParams) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fias_id for dadata and place_id for google
	Id         string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Country    *Country  `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Region     *Region   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	City       string    `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	StreetType string    `protobuf:"bytes,5,opt,name=street_type,json=streetType,proto3" json:"street_type,omitempty"`
	Street     string    `protobuf:"bytes,6,opt,name=street,proto3" json:"street,omitempty"`
	HouseType  string    `protobuf:"bytes,7,opt,name=house_type,json=houseType,proto3" json:"house_type,omitempty"`
	House      string    `protobuf:"bytes,8,opt,name=house,proto3" json:"house,omitempty"`
	BlockType  string    `protobuf:"bytes,9,opt,name=block_type,json=blockType,proto3" json:"block_type,omitempty"`
	Block      string    `protobuf:"bytes,10,opt,name=block,proto3" json:"block,omitempty"`
	PostalCode string    `protobuf:"bytes,11,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	Location   *Location `protobuf:"bytes,12,opt,name=location,proto3" json:"location,omitempty"`
	// fias_level for dadata
	Level string `protobuf:"bytes,13,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{19}
}

func (x *Address) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Address) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *Address) GetRegion() *Region {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetStreetType() string {
	if x != nil {
		return x.StreetType
	}
	return ""
}

func (x *Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Address) GetHouseType() string {
	if x != nil {
		return x.HouseType
	}
	return ""
}

func (x *Address) GetHouse() string {
	if x != nil {
		return x.House
	}
	return ""
}

func (x *Address) GetBlockType() string {
	if x != nil {
		return x.BlockType
	}
	return ""
}

func (x *Address) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

func (x *Address) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Address) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Address) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

var File_proto_geo_proto protoreflect.FileDescriptor

var file_proto_geo_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x67, 0x65, 0x6f, 0x22, 0x75, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa5, 0x02,
	0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x6f,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x65,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x07, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x33, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x07, 0x43, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x65,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6f, 0x0a, 0x14, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x56, 0x0a, 0x16, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x9f,
	0x01, 0x0a, 0x11, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x57, 0x0a, 0x13, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x93, 0x01, 0x0a, 0x0b, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x82, 0x01, 0x0a, 0x0e, 0x43, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x6c, 0x61, 0x64, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6b, 0x6c, 0x61, 0x64, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x44, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x4f, 0x0a, 0x0e, 0x43, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49,
	0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x65, 0x6f, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0xa7, 0x01, 0x0a, 0x10, 0x43, 0x69, 0x74, 0x79, 0x42,
	0x79, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xb8, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x65,
	0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5d, 0x0a, 0x16, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x65, 0x6f,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67,
	0x65, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xff, 0x02, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x67, 0x65, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67,
	0x65, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2a, 0x1e, 0x0a, 0x0c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x72,
	0x75, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x65, 0x6e, 0x10, 0x01, 0x32, 0xc0, 0x03, 0x0a, 0x03,
	0x67, 0x65, 0x6f, 0x12, 0x39, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0c,
	0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x0e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x19, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x65,
	0x6f, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x65, 0x6f, 0x2e,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x18, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a,
	0x08, 0x43, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x44, 0x12, 0x13, 0x2e, 0x67, 0x65, 0x6f, 0x2e,
	0x43, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x09,
	0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x08, 0x43,
	0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x50, 0x12, 0x13, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x69,
	0x74, 0x79, 0x42, 0x79, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x15, 0x2e, 0x67,
	0x65, 0x6f, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3b, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0c,
	0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x42, 0x08,
	0x5a, 0x06, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_geo_proto_rawDescOnce sync.Once
	file_proto_geo_proto_rawDescData = file_proto_geo_proto_rawDesc
)

func file_proto_geo_proto_rawDescGZIP() []byte {
	file_proto_geo_proto_rawDescOnce.Do(func() {
		file_proto_geo_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_geo_proto_rawDescData)
	})
	return file_proto_geo_proto_rawDescData
}

var file_proto_geo_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_geo_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_proto_geo_proto_goTypes = []interface{}{
	(LanguageType)(0),              // 0: geo.LanguageType
	(*CountryByCodeParams)(nil),    // 1: geo.CountryByCodeParams
	(*Country)(nil),                // 2: geo.Country
	(*Continent)(nil),              // 3: geo.Continent
	(*Capital)(nil),                // 4: geo.Capital
	(*SuggestCountryParams)(nil),   // 5: geo.SuggestCountryParams
	(*SuggestCountryResponse)(nil), // 6: geo.SuggestCountryResponse
	(*SuggestCityParams)(nil),      // 7: geo.SuggestCityParams
	(*SuggestCityResponse)(nil),    // 8: geo.SuggestCityResponse
	(*SuggestCity)(nil),            // 9: geo.SuggestCity
	(*CityByIDParams)(nil),         // 10: geo.CityByIDParams
	(*City)(nil),                   // 11: geo.City
	(*Region)(nil),                 // 12: geo.Region
	(*Location)(nil),               // 13: geo.Location
	(*CityByIPParams)(nil),         // 14: geo.CityByIPParams
	(*CityByIPResponse)(nil),       // 15: geo.CityByIPResponse
	(*SuggestAddressParams)(nil),   // 16: geo.SuggestAddressParams
	(*SuggestAddressResponse)(nil), // 17: geo.SuggestAddressResponse
	(*SuggestAddress)(nil),         // 18: geo.SuggestAddress
	(*AddressDetailsParams)(nil),   // 19: geo.AddressDetailsParams
	(*Address)(nil),                // 20: geo.Address
}
var file_proto_geo_proto_depIdxs = []int32{
	0,  // 0: geo.CountryByCodeParams.language:type_name -> geo.LanguageType
	3,  // 1: geo.Country.continent:type_name -> geo.Continent
	4,  // 2: geo.Country.capital:type_name -> geo.Capital
	13, // 3: geo.Capital.location:type_name -> geo.Location
	0,  // 4: geo.SuggestCountryParams.language:type_name -> geo.LanguageType
	2,  // 5: geo.SuggestCountryResponse.results:type_name -> geo.Country
	0,  // 6: geo.SuggestCityParams.language:type_name -> geo.LanguageType
	9,  // 7: geo.SuggestCityResponse.results:type_name -> geo.SuggestCity
	0,  // 8: geo.CityByIDParams.language:type_name -> geo.LanguageType
	12, // 9: geo.City.region:type_name -> geo.Region
	13, // 10: geo.City.location:type_name -> geo.Location
	0,  // 11: geo.CityByIPParams.language:type_name -> geo.LanguageType
	3,  // 12: geo.CityByIPResponse.continent:type_name -> geo.Continent
	2,  // 13: geo.CityByIPResponse.country:type_name -> geo.Country
	13, // 14: geo.CityByIPResponse.location:type_name -> geo.Location
	0,  // 15: geo.SuggestAddressParams.language:type_name -> geo.LanguageType
	18, // 16: geo.SuggestAddressResponse.results:type_name -> geo.SuggestAddress
	12, // 17: geo.SuggestAddress.region:type_name -> geo.Region
	2,  // 18: geo.SuggestAddress.country:type_name -> geo.Country
	0,  // 19: geo.AddressDetailsParams.language:type_name -> geo.LanguageType
	2,  // 20: geo.Address.country:type_name -> geo.Country
	12, // 21: geo.Address.region:type_name -> geo.Region
	13, // 22: geo.Address.location:type_name -> geo.Location
	1,  // 23: geo.geo.CountryByCode:input_type -> geo.CountryByCodeParams
	5,  // 24: geo.geo.SuggestCountry:input_type -> geo.SuggestCountryParams
	7,  // 25: geo.geo.SuggestCity:input_type -> geo.SuggestCityParams
	10, // 26: geo.geo.CityByID:input_type -> geo.CityByIDParams
	14, // 27: geo.geo.CityByIP:input_type -> geo.CityByIPParams
	16, // 28: geo.geo.SuggestAddress:input_type -> geo.SuggestAddressParams
	19, // 29: geo.geo.AddressDetails:input_type -> geo.AddressDetailsParams
	2,  // 30: geo.geo.CountryByCode:output_type -> geo.Country
	6,  // 31: geo.geo.SuggestCountry:output_type -> geo.SuggestCountryResponse
	8,  // 32: geo.geo.SuggestCity:output_type -> geo.SuggestCityResponse
	11, // 33: geo.geo.CityByID:output_type -> geo.City
	15, // 34: geo.geo.CityByIP:output_type -> geo.CityByIPResponse
	17, // 35: geo.geo.SuggestAddress:output_type -> geo.SuggestAddressResponse
	20, // 36: geo.geo.AddressDetails:output_type -> geo.Address
	30, // [30:37] is the sub-list for method output_type
	23, // [23:30] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_proto_geo_proto_init() }
func file_proto_geo_proto_init() {
	if File_proto_geo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_geo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryByCodeParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Continent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capital); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestCountryParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestCountryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestCityParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestCityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityByIDParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*City); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityByIPParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityByIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestAddressParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressDetailsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_geo_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_geo_proto_goTypes,
		DependencyIndexes: file_proto_geo_proto_depIdxs,
		EnumInfos:         file_proto_geo_proto_enumTypes,
		MessageInfos:      file_proto_geo_proto_msgTypes,
	}.Build()
	File_proto_geo_proto = out.File
	file_proto_geo_proto_rawDesc = nil
	file_proto_geo_proto_goTypes = nil
	file_proto_geo_proto_depIdxs = nil
}
