// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/transport_delivery_method.proto

package transport

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DeliveryMethod service

func NewDeliveryMethodEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DeliveryMethod service

type DeliveryMethodService interface {
	Create(ctx context.Context, in *DeliveryMethodAddParams, opts ...client.CallOption) (*DeliveryMethodID, error)
	Get(ctx context.Context, in *DeliveryMethodID, opts ...client.CallOption) (*DeliveryMethodGetResponse, error)
	Update(ctx context.Context, in *DeliveryMethodUpdateParams, opts ...client.CallOption) (*DeliveryMethodOkResponse, error)
	Delete(ctx context.Context, in *DeliveryMethodID, opts ...client.CallOption) (*DeliveryMethodOkResponse, error)
	Toggle(ctx context.Context, in *DeliveryMethodToggleParams, opts ...client.CallOption) (*DeliveryMethodOkResponse, error)
}

type deliveryMethodService struct {
	c    client.Client
	name string
}

func NewDeliveryMethodService(name string, c client.Client) DeliveryMethodService {
	return &deliveryMethodService{
		c:    c,
		name: name,
	}
}

func (c *deliveryMethodService) Create(ctx context.Context, in *DeliveryMethodAddParams, opts ...client.CallOption) (*DeliveryMethodID, error) {
	req := c.c.NewRequest(c.name, "DeliveryMethod.Create", in)
	out := new(DeliveryMethodID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryMethodService) Get(ctx context.Context, in *DeliveryMethodID, opts ...client.CallOption) (*DeliveryMethodGetResponse, error) {
	req := c.c.NewRequest(c.name, "DeliveryMethod.Get", in)
	out := new(DeliveryMethodGetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryMethodService) Update(ctx context.Context, in *DeliveryMethodUpdateParams, opts ...client.CallOption) (*DeliveryMethodOkResponse, error) {
	req := c.c.NewRequest(c.name, "DeliveryMethod.Update", in)
	out := new(DeliveryMethodOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryMethodService) Delete(ctx context.Context, in *DeliveryMethodID, opts ...client.CallOption) (*DeliveryMethodOkResponse, error) {
	req := c.c.NewRequest(c.name, "DeliveryMethod.Delete", in)
	out := new(DeliveryMethodOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryMethodService) Toggle(ctx context.Context, in *DeliveryMethodToggleParams, opts ...client.CallOption) (*DeliveryMethodOkResponse, error) {
	req := c.c.NewRequest(c.name, "DeliveryMethod.Toggle", in)
	out := new(DeliveryMethodOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeliveryMethod service

type DeliveryMethodHandler interface {
	Create(context.Context, *DeliveryMethodAddParams, *DeliveryMethodID) error
	Get(context.Context, *DeliveryMethodID, *DeliveryMethodGetResponse) error
	Update(context.Context, *DeliveryMethodUpdateParams, *DeliveryMethodOkResponse) error
	Delete(context.Context, *DeliveryMethodID, *DeliveryMethodOkResponse) error
	Toggle(context.Context, *DeliveryMethodToggleParams, *DeliveryMethodOkResponse) error
}

func RegisterDeliveryMethodHandler(s server.Server, hdlr DeliveryMethodHandler, opts ...server.HandlerOption) error {
	type deliveryMethod interface {
		Create(ctx context.Context, in *DeliveryMethodAddParams, out *DeliveryMethodID) error
		Get(ctx context.Context, in *DeliveryMethodID, out *DeliveryMethodGetResponse) error
		Update(ctx context.Context, in *DeliveryMethodUpdateParams, out *DeliveryMethodOkResponse) error
		Delete(ctx context.Context, in *DeliveryMethodID, out *DeliveryMethodOkResponse) error
		Toggle(ctx context.Context, in *DeliveryMethodToggleParams, out *DeliveryMethodOkResponse) error
	}
	type DeliveryMethod struct {
		deliveryMethod
	}
	h := &deliveryMethodHandler{hdlr}
	return s.Handle(s.NewHandler(&DeliveryMethod{h}, opts...))
}

type deliveryMethodHandler struct {
	DeliveryMethodHandler
}

func (h *deliveryMethodHandler) Create(ctx context.Context, in *DeliveryMethodAddParams, out *DeliveryMethodID) error {
	return h.DeliveryMethodHandler.Create(ctx, in, out)
}

func (h *deliveryMethodHandler) Get(ctx context.Context, in *DeliveryMethodID, out *DeliveryMethodGetResponse) error {
	return h.DeliveryMethodHandler.Get(ctx, in, out)
}

func (h *deliveryMethodHandler) Update(ctx context.Context, in *DeliveryMethodUpdateParams, out *DeliveryMethodOkResponse) error {
	return h.DeliveryMethodHandler.Update(ctx, in, out)
}

func (h *deliveryMethodHandler) Delete(ctx context.Context, in *DeliveryMethodID, out *DeliveryMethodOkResponse) error {
	return h.DeliveryMethodHandler.Delete(ctx, in, out)
}

func (h *deliveryMethodHandler) Toggle(ctx context.Context, in *DeliveryMethodToggleParams, out *DeliveryMethodOkResponse) error {
	return h.DeliveryMethodHandler.Toggle(ctx, in, out)
}
