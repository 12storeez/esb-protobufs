// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DeliveryClient is the client API for Delivery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryClient interface {
	Create(ctx context.Context, in *CreateDeliveryRequest, opts ...grpc.CallOption) (*DeliveryId, error)
	Get(ctx context.Context, in *DeliveryId, opts ...grpc.CallOption) (*DeliveryResponse, error)
	List(ctx context.Context, in *ListDeliveryRequest, opts ...grpc.CallOption) (*ListDeliveryResponse, error)
	Update(ctx context.Context, in *UpdateDeliveryRequest, opts ...grpc.CallOption) (*DeliveryResponse, error)
	Delete(ctx context.Context, in *DeliveryId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddInterval(ctx context.Context, in *DeliveryInterval, opts ...grpc.CallOption) (*DeliveryInterval, error)
	DeleteInterval(ctx context.Context, in *DeliveryInterval, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deliveryClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryClient(cc grpc.ClientConnInterface) DeliveryClient {
	return &deliveryClient{cc}
}

func (c *deliveryClient) Create(ctx context.Context, in *CreateDeliveryRequest, opts ...grpc.CallOption) (*DeliveryId, error) {
	out := new(DeliveryId)
	err := c.cc.Invoke(ctx, "/logistics.Delivery/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) Get(ctx context.Context, in *DeliveryId, opts ...grpc.CallOption) (*DeliveryResponse, error) {
	out := new(DeliveryResponse)
	err := c.cc.Invoke(ctx, "/logistics.Delivery/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) List(ctx context.Context, in *ListDeliveryRequest, opts ...grpc.CallOption) (*ListDeliveryResponse, error) {
	out := new(ListDeliveryResponse)
	err := c.cc.Invoke(ctx, "/logistics.Delivery/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) Update(ctx context.Context, in *UpdateDeliveryRequest, opts ...grpc.CallOption) (*DeliveryResponse, error) {
	out := new(DeliveryResponse)
	err := c.cc.Invoke(ctx, "/logistics.Delivery/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) Delete(ctx context.Context, in *DeliveryId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.Delivery/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) AddInterval(ctx context.Context, in *DeliveryInterval, opts ...grpc.CallOption) (*DeliveryInterval, error) {
	out := new(DeliveryInterval)
	err := c.cc.Invoke(ctx, "/logistics.Delivery/AddInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryClient) DeleteInterval(ctx context.Context, in *DeliveryInterval, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.Delivery/DeleteInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryServer is the server API for Delivery service.
// All implementations must embed UnimplementedDeliveryServer
// for forward compatibility
type DeliveryServer interface {
	Create(context.Context, *CreateDeliveryRequest) (*DeliveryId, error)
	Get(context.Context, *DeliveryId) (*DeliveryResponse, error)
	List(context.Context, *ListDeliveryRequest) (*ListDeliveryResponse, error)
	Update(context.Context, *UpdateDeliveryRequest) (*DeliveryResponse, error)
	Delete(context.Context, *DeliveryId) (*emptypb.Empty, error)
	AddInterval(context.Context, *DeliveryInterval) (*DeliveryInterval, error)
	DeleteInterval(context.Context, *DeliveryInterval) (*emptypb.Empty, error)
	mustEmbedUnimplementedDeliveryServer()
}

// UnimplementedDeliveryServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveryServer struct {
}

func (UnimplementedDeliveryServer) Create(context.Context, *CreateDeliveryRequest) (*DeliveryId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDeliveryServer) Get(context.Context, *DeliveryId) (*DeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDeliveryServer) List(context.Context, *ListDeliveryRequest) (*ListDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDeliveryServer) Update(context.Context, *UpdateDeliveryRequest) (*DeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDeliveryServer) Delete(context.Context, *DeliveryId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeliveryServer) AddInterval(context.Context, *DeliveryInterval) (*DeliveryInterval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterval not implemented")
}
func (UnimplementedDeliveryServer) DeleteInterval(context.Context, *DeliveryInterval) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterval not implemented")
}
func (UnimplementedDeliveryServer) mustEmbedUnimplementedDeliveryServer() {}

// UnsafeDeliveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryServer will
// result in compilation errors.
type UnsafeDeliveryServer interface {
	mustEmbedUnimplementedDeliveryServer()
}

func RegisterDeliveryServer(s grpc.ServiceRegistrar, srv DeliveryServer) {
	s.RegisterService(&_Delivery_serviceDesc, srv)
}

func _Delivery_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Delivery/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).Create(ctx, req.(*CreateDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Delivery/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).Get(ctx, req.(*DeliveryId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Delivery/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).List(ctx, req.(*ListDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Delivery/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).Update(ctx, req.(*UpdateDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Delivery/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).Delete(ctx, req.(*DeliveryId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_AddInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryInterval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).AddInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Delivery/AddInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).AddInterval(ctx, req.(*DeliveryInterval))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delivery_DeleteInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryInterval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServer).DeleteInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Delivery/DeleteInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServer).DeleteInterval(ctx, req.(*DeliveryInterval))
	}
	return interceptor(ctx, in, info, handler)
}

var _Delivery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.Delivery",
	HandlerType: (*DeliveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Delivery_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Delivery_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Delivery_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Delivery_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Delivery_Delete_Handler,
		},
		{
			MethodName: "AddInterval",
			Handler:    _Delivery_AddInterval_Handler,
		},
		{
			MethodName: "DeleteInterval",
			Handler:    _Delivery_DeleteInterval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logistics/delivery.proto",
}
