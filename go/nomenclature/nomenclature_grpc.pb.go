// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/nomenclature.proto

package nomenclature

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NomenclatureServiceClient is the client API for NomenclatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NomenclatureServiceClient interface {
	GetNomenclatureList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetNomenclatureListResponse, error)
	GetNomenclatureByArticle(ctx context.Context, in *GetNomenclatureByArticleRequest, opts ...grpc.CallOption) (*GetNomenclatureByArticleResponse, error)
	GetPhotoModelList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetPhotoModelListResponse, error)
	GetPhotoModelByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error)
	CreatePhotoModel(ctx context.Context, in *PhotoModelWithoutID, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error)
	UpdatePhotoModel(ctx context.Context, in *PhotoModel, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error)
	GetDictionarySizeList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetDictionarySizeListResponse, error)
	GetDictionarySizeByGUID(ctx context.Context, in *GetByGUID, opts ...grpc.CallOption) (*GetDictionarySizeByGUIDResponse, error)
	UpdateDictionarySize(ctx context.Context, in *DictionarySize, opts ...grpc.CallOption) (*GetDictionarySizeByGUIDResponse, error)
}

type nomenclatureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNomenclatureServiceClient(cc grpc.ClientConnInterface) NomenclatureServiceClient {
	return &nomenclatureServiceClient{cc}
}

func (c *nomenclatureServiceClient) GetNomenclatureList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetNomenclatureListResponse, error) {
	out := new(GetNomenclatureListResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.NomenclatureService/GetNomenclatureList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nomenclatureServiceClient) GetNomenclatureByArticle(ctx context.Context, in *GetNomenclatureByArticleRequest, opts ...grpc.CallOption) (*GetNomenclatureByArticleResponse, error) {
	out := new(GetNomenclatureByArticleResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.NomenclatureService/GetNomenclatureByArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nomenclatureServiceClient) GetPhotoModelList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetPhotoModelListResponse, error) {
	out := new(GetPhotoModelListResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.NomenclatureService/GetPhotoModelList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nomenclatureServiceClient) GetPhotoModelByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error) {
	out := new(GetPhotoModelByIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.NomenclatureService/GetPhotoModelByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nomenclatureServiceClient) CreatePhotoModel(ctx context.Context, in *PhotoModelWithoutID, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error) {
	out := new(GetPhotoModelByIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.NomenclatureService/CreatePhotoModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nomenclatureServiceClient) UpdatePhotoModel(ctx context.Context, in *PhotoModel, opts ...grpc.CallOption) (*GetPhotoModelByIDResponse, error) {
	out := new(GetPhotoModelByIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.NomenclatureService/UpdatePhotoModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nomenclatureServiceClient) GetDictionarySizeList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetDictionarySizeListResponse, error) {
	out := new(GetDictionarySizeListResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.NomenclatureService/GetDictionarySizeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nomenclatureServiceClient) GetDictionarySizeByGUID(ctx context.Context, in *GetByGUID, opts ...grpc.CallOption) (*GetDictionarySizeByGUIDResponse, error) {
	out := new(GetDictionarySizeByGUIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.NomenclatureService/GetDictionarySizeByGUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nomenclatureServiceClient) UpdateDictionarySize(ctx context.Context, in *DictionarySize, opts ...grpc.CallOption) (*GetDictionarySizeByGUIDResponse, error) {
	out := new(GetDictionarySizeByGUIDResponse)
	err := c.cc.Invoke(ctx, "/nomenclature.NomenclatureService/UpdateDictionarySize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NomenclatureServiceServer is the server API for NomenclatureService service.
// All implementations should embed UnimplementedNomenclatureServiceServer
// for forward compatibility
type NomenclatureServiceServer interface {
	GetNomenclatureList(context.Context, *GetListRequest) (*GetNomenclatureListResponse, error)
	GetNomenclatureByArticle(context.Context, *GetNomenclatureByArticleRequest) (*GetNomenclatureByArticleResponse, error)
	GetPhotoModelList(context.Context, *GetListRequest) (*GetPhotoModelListResponse, error)
	GetPhotoModelByID(context.Context, *GetByIDRequest) (*GetPhotoModelByIDResponse, error)
	CreatePhotoModel(context.Context, *PhotoModelWithoutID) (*GetPhotoModelByIDResponse, error)
	UpdatePhotoModel(context.Context, *PhotoModel) (*GetPhotoModelByIDResponse, error)
	GetDictionarySizeList(context.Context, *GetListRequest) (*GetDictionarySizeListResponse, error)
	GetDictionarySizeByGUID(context.Context, *GetByGUID) (*GetDictionarySizeByGUIDResponse, error)
	UpdateDictionarySize(context.Context, *DictionarySize) (*GetDictionarySizeByGUIDResponse, error)
}

// UnimplementedNomenclatureServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNomenclatureServiceServer struct {
}

func (UnimplementedNomenclatureServiceServer) GetNomenclatureList(context.Context, *GetListRequest) (*GetNomenclatureListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNomenclatureList not implemented")
}
func (UnimplementedNomenclatureServiceServer) GetNomenclatureByArticle(context.Context, *GetNomenclatureByArticleRequest) (*GetNomenclatureByArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNomenclatureByArticle not implemented")
}
func (UnimplementedNomenclatureServiceServer) GetPhotoModelList(context.Context, *GetListRequest) (*GetPhotoModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhotoModelList not implemented")
}
func (UnimplementedNomenclatureServiceServer) GetPhotoModelByID(context.Context, *GetByIDRequest) (*GetPhotoModelByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhotoModelByID not implemented")
}
func (UnimplementedNomenclatureServiceServer) CreatePhotoModel(context.Context, *PhotoModelWithoutID) (*GetPhotoModelByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhotoModel not implemented")
}
func (UnimplementedNomenclatureServiceServer) UpdatePhotoModel(context.Context, *PhotoModel) (*GetPhotoModelByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhotoModel not implemented")
}
func (UnimplementedNomenclatureServiceServer) GetDictionarySizeList(context.Context, *GetListRequest) (*GetDictionarySizeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionarySizeList not implemented")
}
func (UnimplementedNomenclatureServiceServer) GetDictionarySizeByGUID(context.Context, *GetByGUID) (*GetDictionarySizeByGUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionarySizeByGUID not implemented")
}
func (UnimplementedNomenclatureServiceServer) UpdateDictionarySize(context.Context, *DictionarySize) (*GetDictionarySizeByGUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictionarySize not implemented")
}

// UnsafeNomenclatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NomenclatureServiceServer will
// result in compilation errors.
type UnsafeNomenclatureServiceServer interface {
	mustEmbedUnimplementedNomenclatureServiceServer()
}

func RegisterNomenclatureServiceServer(s grpc.ServiceRegistrar, srv NomenclatureServiceServer) {
	s.RegisterService(&NomenclatureService_ServiceDesc, srv)
}

func _NomenclatureService_GetNomenclatureList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomenclatureServiceServer).GetNomenclatureList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.NomenclatureService/GetNomenclatureList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomenclatureServiceServer).GetNomenclatureList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NomenclatureService_GetNomenclatureByArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNomenclatureByArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomenclatureServiceServer).GetNomenclatureByArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.NomenclatureService/GetNomenclatureByArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomenclatureServiceServer).GetNomenclatureByArticle(ctx, req.(*GetNomenclatureByArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NomenclatureService_GetPhotoModelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomenclatureServiceServer).GetPhotoModelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.NomenclatureService/GetPhotoModelList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomenclatureServiceServer).GetPhotoModelList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NomenclatureService_GetPhotoModelByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomenclatureServiceServer).GetPhotoModelByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.NomenclatureService/GetPhotoModelByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomenclatureServiceServer).GetPhotoModelByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NomenclatureService_CreatePhotoModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoModelWithoutID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomenclatureServiceServer).CreatePhotoModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.NomenclatureService/CreatePhotoModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomenclatureServiceServer).CreatePhotoModel(ctx, req.(*PhotoModelWithoutID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NomenclatureService_UpdatePhotoModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomenclatureServiceServer).UpdatePhotoModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.NomenclatureService/UpdatePhotoModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomenclatureServiceServer).UpdatePhotoModel(ctx, req.(*PhotoModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _NomenclatureService_GetDictionarySizeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomenclatureServiceServer).GetDictionarySizeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.NomenclatureService/GetDictionarySizeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomenclatureServiceServer).GetDictionarySizeList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NomenclatureService_GetDictionarySizeByGUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByGUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomenclatureServiceServer).GetDictionarySizeByGUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.NomenclatureService/GetDictionarySizeByGUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomenclatureServiceServer).GetDictionarySizeByGUID(ctx, req.(*GetByGUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NomenclatureService_UpdateDictionarySize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionarySize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomenclatureServiceServer).UpdateDictionarySize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomenclature.NomenclatureService/UpdateDictionarySize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomenclatureServiceServer).UpdateDictionarySize(ctx, req.(*DictionarySize))
	}
	return interceptor(ctx, in, info, handler)
}

// NomenclatureService_ServiceDesc is the grpc.ServiceDesc for NomenclatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NomenclatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomenclature.NomenclatureService",
	HandlerType: (*NomenclatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNomenclatureList",
			Handler:    _NomenclatureService_GetNomenclatureList_Handler,
		},
		{
			MethodName: "GetNomenclatureByArticle",
			Handler:    _NomenclatureService_GetNomenclatureByArticle_Handler,
		},
		{
			MethodName: "GetPhotoModelList",
			Handler:    _NomenclatureService_GetPhotoModelList_Handler,
		},
		{
			MethodName: "GetPhotoModelByID",
			Handler:    _NomenclatureService_GetPhotoModelByID_Handler,
		},
		{
			MethodName: "CreatePhotoModel",
			Handler:    _NomenclatureService_CreatePhotoModel_Handler,
		},
		{
			MethodName: "UpdatePhotoModel",
			Handler:    _NomenclatureService_UpdatePhotoModel_Handler,
		},
		{
			MethodName: "GetDictionarySizeList",
			Handler:    _NomenclatureService_GetDictionarySizeList_Handler,
		},
		{
			MethodName: "GetDictionarySizeByGUID",
			Handler:    _NomenclatureService_GetDictionarySizeByGUID_Handler,
		},
		{
			MethodName: "UpdateDictionarySize",
			Handler:    _NomenclatureService_UpdateDictionarySize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nomenclature.proto",
}
