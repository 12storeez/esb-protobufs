// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: pickup_points.proto

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PickupPointsService_PickupList_FullMethodName = "/logistics.PickupPointsService/PickupList"
)

// PickupPointsServiceClient is the client API for PickupPointsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PickupPointsServiceClient interface {
	PickupList(ctx context.Context, in *PickUpPointsRequest, opts ...grpc.CallOption) (*UnifiedResponse, error)
}

type pickupPointsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPickupPointsServiceClient(cc grpc.ClientConnInterface) PickupPointsServiceClient {
	return &pickupPointsServiceClient{cc}
}

func (c *pickupPointsServiceClient) PickupList(ctx context.Context, in *PickUpPointsRequest, opts ...grpc.CallOption) (*UnifiedResponse, error) {
	out := new(UnifiedResponse)
	err := c.cc.Invoke(ctx, PickupPointsService_PickupList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PickupPointsServiceServer is the server API for PickupPointsService service.
// All implementations should embed UnimplementedPickupPointsServiceServer
// for forward compatibility
type PickupPointsServiceServer interface {
	PickupList(context.Context, *PickUpPointsRequest) (*UnifiedResponse, error)
}

// UnimplementedPickupPointsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPickupPointsServiceServer struct {
}

func (UnimplementedPickupPointsServiceServer) PickupList(context.Context, *PickUpPointsRequest) (*UnifiedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickupList not implemented")
}

// UnsafePickupPointsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PickupPointsServiceServer will
// result in compilation errors.
type UnsafePickupPointsServiceServer interface {
	mustEmbedUnimplementedPickupPointsServiceServer()
}

func RegisterPickupPointsServiceServer(s grpc.ServiceRegistrar, srv PickupPointsServiceServer) {
	s.RegisterService(&PickupPointsService_ServiceDesc, srv)
}

func _PickupPointsService_PickupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickUpPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PickupPointsServiceServer).PickupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PickupPointsService_PickupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PickupPointsServiceServer).PickupList(ctx, req.(*PickUpPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PickupPointsService_ServiceDesc is the grpc.ServiceDesc for PickupPointsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PickupPointsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.PickupPointsService",
	HandlerType: (*PickupPointsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PickupList",
			Handler:    _PickupPointsService_PickupList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pickup_points.proto",
}
