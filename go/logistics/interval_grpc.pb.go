// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// IntervalsClient is the client API for Intervals service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntervalsClient interface {
	Create(ctx context.Context, in *CreateIntervalsRequest, opts ...grpc.CallOption) (*CreateIntervalsResponse, error)
	Get(ctx context.Context, in *GetIntervalsRequest, opts ...grpc.CallOption) (*Interval, error)
	List(ctx context.Context, in *ListIntervalsRequest, opts ...grpc.CallOption) (*ListIntervalsResponse, error)
	Update(ctx context.Context, in *UpdateIntervalsRequest, opts ...grpc.CallOption) (*Interval, error)
	Delete(ctx context.Context, in *GetIntervalsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type intervalsClient struct {
	cc grpc.ClientConnInterface
}

func NewIntervalsClient(cc grpc.ClientConnInterface) IntervalsClient {
	return &intervalsClient{cc}
}

func (c *intervalsClient) Create(ctx context.Context, in *CreateIntervalsRequest, opts ...grpc.CallOption) (*CreateIntervalsResponse, error) {
	out := new(CreateIntervalsResponse)
	err := c.cc.Invoke(ctx, "/logistics.Intervals/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intervalsClient) Get(ctx context.Context, in *GetIntervalsRequest, opts ...grpc.CallOption) (*Interval, error) {
	out := new(Interval)
	err := c.cc.Invoke(ctx, "/logistics.Intervals/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intervalsClient) List(ctx context.Context, in *ListIntervalsRequest, opts ...grpc.CallOption) (*ListIntervalsResponse, error) {
	out := new(ListIntervalsResponse)
	err := c.cc.Invoke(ctx, "/logistics.Intervals/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intervalsClient) Update(ctx context.Context, in *UpdateIntervalsRequest, opts ...grpc.CallOption) (*Interval, error) {
	out := new(Interval)
	err := c.cc.Invoke(ctx, "/logistics.Intervals/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intervalsClient) Delete(ctx context.Context, in *GetIntervalsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.Intervals/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntervalsServer is the server API for Intervals service.
// All implementations must embed UnimplementedIntervalsServer
// for forward compatibility
type IntervalsServer interface {
	Create(context.Context, *CreateIntervalsRequest) (*CreateIntervalsResponse, error)
	Get(context.Context, *GetIntervalsRequest) (*Interval, error)
	List(context.Context, *ListIntervalsRequest) (*ListIntervalsResponse, error)
	Update(context.Context, *UpdateIntervalsRequest) (*Interval, error)
	Delete(context.Context, *GetIntervalsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedIntervalsServer()
}

// UnimplementedIntervalsServer must be embedded to have forward compatible implementations.
type UnimplementedIntervalsServer struct {
}

func (UnimplementedIntervalsServer) Create(context.Context, *CreateIntervalsRequest) (*CreateIntervalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIntervalsServer) Get(context.Context, *GetIntervalsRequest) (*Interval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIntervalsServer) List(context.Context, *ListIntervalsRequest) (*ListIntervalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIntervalsServer) Update(context.Context, *UpdateIntervalsRequest) (*Interval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedIntervalsServer) Delete(context.Context, *GetIntervalsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIntervalsServer) mustEmbedUnimplementedIntervalsServer() {}

// UnsafeIntervalsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntervalsServer will
// result in compilation errors.
type UnsafeIntervalsServer interface {
	mustEmbedUnimplementedIntervalsServer()
}

func RegisterIntervalsServer(s grpc.ServiceRegistrar, srv IntervalsServer) {
	s.RegisterService(&_Intervals_serviceDesc, srv)
}

func _Intervals_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIntervalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntervalsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Intervals/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntervalsServer).Create(ctx, req.(*CreateIntervalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intervals_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntervalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntervalsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Intervals/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntervalsServer).Get(ctx, req.(*GetIntervalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intervals_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntervalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntervalsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Intervals/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntervalsServer).List(ctx, req.(*ListIntervalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intervals_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIntervalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntervalsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Intervals/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntervalsServer).Update(ctx, req.(*UpdateIntervalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intervals_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntervalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntervalsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Intervals/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntervalsServer).Delete(ctx, req.(*GetIntervalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Intervals_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.Intervals",
	HandlerType: (*IntervalsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Intervals_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Intervals_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Intervals_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Intervals_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Intervals_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logistics/interval.proto",
}
