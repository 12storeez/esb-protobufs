// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/transport_zone.proto

package transport

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Zones service

func NewZonesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Zones service

type ZonesService interface {
	Create(ctx context.Context, in *ZonesCreateParams, opts ...client.CallOption) (*ZonesID, error)
	GetByZoneID(ctx context.Context, in *ZonesZoneID, opts ...client.CallOption) (*ZonesZone, error)
	GetAll(ctx context.Context, in *ZonesGetAllParams, opts ...client.CallOption) (*ZonesGetAllResponse, error)
	Update(ctx context.Context, in *ZonesUpdateParams, opts ...client.CallOption) (*ZonesOkResponse, error)
	Delete(ctx context.Context, in *ZonesZoneID, opts ...client.CallOption) (*ZonesOkResponse, error)
	GetByDadataID(ctx context.Context, in *ZonesDadata, opts ...client.CallOption) (*ZonesZone, error)
	GetByGeonameID(ctx context.Context, in *ZonesGeoname, opts ...client.CallOption) (*ZonesZone, error)
	AddDeliveryInterval(ctx context.Context, in *ZonesAddDeliveryIntervalParams, opts ...client.CallOption) (*ZonesOkResponse, error)
	AddDeliveryMatrix(ctx context.Context, in *ZonesAddDeliveryMatrixParams, opts ...client.CallOption) (*ZonesOkResponse, error)
	GetDeliveryMatrix(ctx context.Context, in *ZonesZoneID, opts ...client.CallOption) (*ZonesGetDeliveryMatrixResponse, error)
	UpdateDeliveryMatrix(ctx context.Context, in *ZonesZoneDeliveryMatrixModel, opts ...client.CallOption) (*ZonesOkResponse, error)
	DeleteDeliveryMatrix(ctx context.Context, in *ZonesID, opts ...client.CallOption) (*ZonesOkResponse, error)
	AddManualPriority(ctx context.Context, in *ZonesAddManualPriorityParams, opts ...client.CallOption) (*ZonesOkResponse, error)
	GetManualPriority(ctx context.Context, in *ZonesZoneID, opts ...client.CallOption) (*ZonesManualPriorityList, error)
	UpdateManualPriority(ctx context.Context, in *ZonesManualPriorityParams, opts ...client.CallOption) (*ZonesOkResponse, error)
	DeleteManualPriority(ctx context.Context, in *ZonesID, opts ...client.CallOption) (*ZonesOkResponse, error)
	AddPaymentMethod(ctx context.Context, in *ZonesAddPaymentMethodParams, opts ...client.CallOption) (*ZonesOkResponse, error)
	GetPaymentMethod(ctx context.Context, in *ZonesZoneID, opts ...client.CallOption) (*ZonesZonePaymentMethodResponse, error)
	UpdatePaymentMethod(ctx context.Context, in *ZonesUpdateZonePaymentMethodParams, opts ...client.CallOption) (*ZonesOkResponse, error)
	DeletePaymentMethod(ctx context.Context, in *ZonesID, opts ...client.CallOption) (*ZonesOkResponse, error)
}

type zonesService struct {
	c    client.Client
	name string
}

func NewZonesService(name string, c client.Client) ZonesService {
	return &zonesService{
		c:    c,
		name: name,
	}
}

func (c *zonesService) Create(ctx context.Context, in *ZonesCreateParams, opts ...client.CallOption) (*ZonesID, error) {
	req := c.c.NewRequest(c.name, "Zones.Create", in)
	out := new(ZonesID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) GetByZoneID(ctx context.Context, in *ZonesZoneID, opts ...client.CallOption) (*ZonesZone, error) {
	req := c.c.NewRequest(c.name, "Zones.GetByZoneID", in)
	out := new(ZonesZone)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) GetAll(ctx context.Context, in *ZonesGetAllParams, opts ...client.CallOption) (*ZonesGetAllResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.GetAll", in)
	out := new(ZonesGetAllResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) Update(ctx context.Context, in *ZonesUpdateParams, opts ...client.CallOption) (*ZonesOkResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.Update", in)
	out := new(ZonesOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) Delete(ctx context.Context, in *ZonesZoneID, opts ...client.CallOption) (*ZonesOkResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.Delete", in)
	out := new(ZonesOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) GetByDadataID(ctx context.Context, in *ZonesDadata, opts ...client.CallOption) (*ZonesZone, error) {
	req := c.c.NewRequest(c.name, "Zones.GetByDadataID", in)
	out := new(ZonesZone)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) GetByGeonameID(ctx context.Context, in *ZonesGeoname, opts ...client.CallOption) (*ZonesZone, error) {
	req := c.c.NewRequest(c.name, "Zones.GetByGeonameID", in)
	out := new(ZonesZone)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) AddDeliveryInterval(ctx context.Context, in *ZonesAddDeliveryIntervalParams, opts ...client.CallOption) (*ZonesOkResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.AddDeliveryInterval", in)
	out := new(ZonesOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) AddDeliveryMatrix(ctx context.Context, in *ZonesAddDeliveryMatrixParams, opts ...client.CallOption) (*ZonesOkResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.AddDeliveryMatrix", in)
	out := new(ZonesOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) GetDeliveryMatrix(ctx context.Context, in *ZonesZoneID, opts ...client.CallOption) (*ZonesGetDeliveryMatrixResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.GetDeliveryMatrix", in)
	out := new(ZonesGetDeliveryMatrixResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) UpdateDeliveryMatrix(ctx context.Context, in *ZonesZoneDeliveryMatrixModel, opts ...client.CallOption) (*ZonesOkResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.UpdateDeliveryMatrix", in)
	out := new(ZonesOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) DeleteDeliveryMatrix(ctx context.Context, in *ZonesID, opts ...client.CallOption) (*ZonesOkResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.DeleteDeliveryMatrix", in)
	out := new(ZonesOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) AddManualPriority(ctx context.Context, in *ZonesAddManualPriorityParams, opts ...client.CallOption) (*ZonesOkResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.AddManualPriority", in)
	out := new(ZonesOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) GetManualPriority(ctx context.Context, in *ZonesZoneID, opts ...client.CallOption) (*ZonesManualPriorityList, error) {
	req := c.c.NewRequest(c.name, "Zones.GetManualPriority", in)
	out := new(ZonesManualPriorityList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) UpdateManualPriority(ctx context.Context, in *ZonesManualPriorityParams, opts ...client.CallOption) (*ZonesOkResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.UpdateManualPriority", in)
	out := new(ZonesOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) DeleteManualPriority(ctx context.Context, in *ZonesID, opts ...client.CallOption) (*ZonesOkResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.DeleteManualPriority", in)
	out := new(ZonesOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) AddPaymentMethod(ctx context.Context, in *ZonesAddPaymentMethodParams, opts ...client.CallOption) (*ZonesOkResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.AddPaymentMethod", in)
	out := new(ZonesOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) GetPaymentMethod(ctx context.Context, in *ZonesZoneID, opts ...client.CallOption) (*ZonesZonePaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.GetPaymentMethod", in)
	out := new(ZonesZonePaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) UpdatePaymentMethod(ctx context.Context, in *ZonesUpdateZonePaymentMethodParams, opts ...client.CallOption) (*ZonesOkResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.UpdatePaymentMethod", in)
	out := new(ZonesOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesService) DeletePaymentMethod(ctx context.Context, in *ZonesID, opts ...client.CallOption) (*ZonesOkResponse, error) {
	req := c.c.NewRequest(c.name, "Zones.DeletePaymentMethod", in)
	out := new(ZonesOkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Zones service

type ZonesHandler interface {
	Create(context.Context, *ZonesCreateParams, *ZonesID) error
	GetByZoneID(context.Context, *ZonesZoneID, *ZonesZone) error
	GetAll(context.Context, *ZonesGetAllParams, *ZonesGetAllResponse) error
	Update(context.Context, *ZonesUpdateParams, *ZonesOkResponse) error
	Delete(context.Context, *ZonesZoneID, *ZonesOkResponse) error
	GetByDadataID(context.Context, *ZonesDadata, *ZonesZone) error
	GetByGeonameID(context.Context, *ZonesGeoname, *ZonesZone) error
	AddDeliveryInterval(context.Context, *ZonesAddDeliveryIntervalParams, *ZonesOkResponse) error
	AddDeliveryMatrix(context.Context, *ZonesAddDeliveryMatrixParams, *ZonesOkResponse) error
	GetDeliveryMatrix(context.Context, *ZonesZoneID, *ZonesGetDeliveryMatrixResponse) error
	UpdateDeliveryMatrix(context.Context, *ZonesZoneDeliveryMatrixModel, *ZonesOkResponse) error
	DeleteDeliveryMatrix(context.Context, *ZonesID, *ZonesOkResponse) error
	AddManualPriority(context.Context, *ZonesAddManualPriorityParams, *ZonesOkResponse) error
	GetManualPriority(context.Context, *ZonesZoneID, *ZonesManualPriorityList) error
	UpdateManualPriority(context.Context, *ZonesManualPriorityParams, *ZonesOkResponse) error
	DeleteManualPriority(context.Context, *ZonesID, *ZonesOkResponse) error
	AddPaymentMethod(context.Context, *ZonesAddPaymentMethodParams, *ZonesOkResponse) error
	GetPaymentMethod(context.Context, *ZonesZoneID, *ZonesZonePaymentMethodResponse) error
	UpdatePaymentMethod(context.Context, *ZonesUpdateZonePaymentMethodParams, *ZonesOkResponse) error
	DeletePaymentMethod(context.Context, *ZonesID, *ZonesOkResponse) error
}

func RegisterZonesHandler(s server.Server, hdlr ZonesHandler, opts ...server.HandlerOption) error {
	type zones interface {
		Create(ctx context.Context, in *ZonesCreateParams, out *ZonesID) error
		GetByZoneID(ctx context.Context, in *ZonesZoneID, out *ZonesZone) error
		GetAll(ctx context.Context, in *ZonesGetAllParams, out *ZonesGetAllResponse) error
		Update(ctx context.Context, in *ZonesUpdateParams, out *ZonesOkResponse) error
		Delete(ctx context.Context, in *ZonesZoneID, out *ZonesOkResponse) error
		GetByDadataID(ctx context.Context, in *ZonesDadata, out *ZonesZone) error
		GetByGeonameID(ctx context.Context, in *ZonesGeoname, out *ZonesZone) error
		AddDeliveryInterval(ctx context.Context, in *ZonesAddDeliveryIntervalParams, out *ZonesOkResponse) error
		AddDeliveryMatrix(ctx context.Context, in *ZonesAddDeliveryMatrixParams, out *ZonesOkResponse) error
		GetDeliveryMatrix(ctx context.Context, in *ZonesZoneID, out *ZonesGetDeliveryMatrixResponse) error
		UpdateDeliveryMatrix(ctx context.Context, in *ZonesZoneDeliveryMatrixModel, out *ZonesOkResponse) error
		DeleteDeliveryMatrix(ctx context.Context, in *ZonesID, out *ZonesOkResponse) error
		AddManualPriority(ctx context.Context, in *ZonesAddManualPriorityParams, out *ZonesOkResponse) error
		GetManualPriority(ctx context.Context, in *ZonesZoneID, out *ZonesManualPriorityList) error
		UpdateManualPriority(ctx context.Context, in *ZonesManualPriorityParams, out *ZonesOkResponse) error
		DeleteManualPriority(ctx context.Context, in *ZonesID, out *ZonesOkResponse) error
		AddPaymentMethod(ctx context.Context, in *ZonesAddPaymentMethodParams, out *ZonesOkResponse) error
		GetPaymentMethod(ctx context.Context, in *ZonesZoneID, out *ZonesZonePaymentMethodResponse) error
		UpdatePaymentMethod(ctx context.Context, in *ZonesUpdateZonePaymentMethodParams, out *ZonesOkResponse) error
		DeletePaymentMethod(ctx context.Context, in *ZonesID, out *ZonesOkResponse) error
	}
	type Zones struct {
		zones
	}
	h := &zonesHandler{hdlr}
	return s.Handle(s.NewHandler(&Zones{h}, opts...))
}

type zonesHandler struct {
	ZonesHandler
}

func (h *zonesHandler) Create(ctx context.Context, in *ZonesCreateParams, out *ZonesID) error {
	return h.ZonesHandler.Create(ctx, in, out)
}

func (h *zonesHandler) GetByZoneID(ctx context.Context, in *ZonesZoneID, out *ZonesZone) error {
	return h.ZonesHandler.GetByZoneID(ctx, in, out)
}

func (h *zonesHandler) GetAll(ctx context.Context, in *ZonesGetAllParams, out *ZonesGetAllResponse) error {
	return h.ZonesHandler.GetAll(ctx, in, out)
}

func (h *zonesHandler) Update(ctx context.Context, in *ZonesUpdateParams, out *ZonesOkResponse) error {
	return h.ZonesHandler.Update(ctx, in, out)
}

func (h *zonesHandler) Delete(ctx context.Context, in *ZonesZoneID, out *ZonesOkResponse) error {
	return h.ZonesHandler.Delete(ctx, in, out)
}

func (h *zonesHandler) GetByDadataID(ctx context.Context, in *ZonesDadata, out *ZonesZone) error {
	return h.ZonesHandler.GetByDadataID(ctx, in, out)
}

func (h *zonesHandler) GetByGeonameID(ctx context.Context, in *ZonesGeoname, out *ZonesZone) error {
	return h.ZonesHandler.GetByGeonameID(ctx, in, out)
}

func (h *zonesHandler) AddDeliveryInterval(ctx context.Context, in *ZonesAddDeliveryIntervalParams, out *ZonesOkResponse) error {
	return h.ZonesHandler.AddDeliveryInterval(ctx, in, out)
}

func (h *zonesHandler) AddDeliveryMatrix(ctx context.Context, in *ZonesAddDeliveryMatrixParams, out *ZonesOkResponse) error {
	return h.ZonesHandler.AddDeliveryMatrix(ctx, in, out)
}

func (h *zonesHandler) GetDeliveryMatrix(ctx context.Context, in *ZonesZoneID, out *ZonesGetDeliveryMatrixResponse) error {
	return h.ZonesHandler.GetDeliveryMatrix(ctx, in, out)
}

func (h *zonesHandler) UpdateDeliveryMatrix(ctx context.Context, in *ZonesZoneDeliveryMatrixModel, out *ZonesOkResponse) error {
	return h.ZonesHandler.UpdateDeliveryMatrix(ctx, in, out)
}

func (h *zonesHandler) DeleteDeliveryMatrix(ctx context.Context, in *ZonesID, out *ZonesOkResponse) error {
	return h.ZonesHandler.DeleteDeliveryMatrix(ctx, in, out)
}

func (h *zonesHandler) AddManualPriority(ctx context.Context, in *ZonesAddManualPriorityParams, out *ZonesOkResponse) error {
	return h.ZonesHandler.AddManualPriority(ctx, in, out)
}

func (h *zonesHandler) GetManualPriority(ctx context.Context, in *ZonesZoneID, out *ZonesManualPriorityList) error {
	return h.ZonesHandler.GetManualPriority(ctx, in, out)
}

func (h *zonesHandler) UpdateManualPriority(ctx context.Context, in *ZonesManualPriorityParams, out *ZonesOkResponse) error {
	return h.ZonesHandler.UpdateManualPriority(ctx, in, out)
}

func (h *zonesHandler) DeleteManualPriority(ctx context.Context, in *ZonesID, out *ZonesOkResponse) error {
	return h.ZonesHandler.DeleteManualPriority(ctx, in, out)
}

func (h *zonesHandler) AddPaymentMethod(ctx context.Context, in *ZonesAddPaymentMethodParams, out *ZonesOkResponse) error {
	return h.ZonesHandler.AddPaymentMethod(ctx, in, out)
}

func (h *zonesHandler) GetPaymentMethod(ctx context.Context, in *ZonesZoneID, out *ZonesZonePaymentMethodResponse) error {
	return h.ZonesHandler.GetPaymentMethod(ctx, in, out)
}

func (h *zonesHandler) UpdatePaymentMethod(ctx context.Context, in *ZonesUpdateZonePaymentMethodParams, out *ZonesOkResponse) error {
	return h.ZonesHandler.UpdatePaymentMethod(ctx, in, out)
}

func (h *zonesHandler) DeletePaymentMethod(ctx context.Context, in *ZonesID, out *ZonesOkResponse) error {
	return h.ZonesHandler.DeletePaymentMethod(ctx, in, out)
}
