// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: transport_company_mode.proto

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransportCompanyModeServiceClient is the client API for TransportCompanyModeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportCompanyModeServiceClient interface {
	List(ctx context.Context, in *ListTransportCompanyModeRequest, opts ...grpc.CallOption) (*ListTransportCompanyModeResponse, error)
	Create(ctx context.Context, in *CreateTransportCompanyModeRequest, opts ...grpc.CallOption) (*TransportCompanyMode, error)
	Get(ctx context.Context, in *TransportCompanyModeId, opts ...grpc.CallOption) (*TransportCompanyMode, error)
	Update(ctx context.Context, in *TransportCompanyMode, opts ...grpc.CallOption) (*TransportCompanyMode, error)
	Delete(ctx context.Context, in *TransportCompanyModeId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// intervals for transport-company-mode
	GetIntervalList(ctx context.Context, in *TransportCompanyModeId, opts ...grpc.CallOption) (*ListIntervalResponse, error)
	CreateInterval(ctx context.Context, in *TransportCompanyModeIntervalRequest, opts ...grpc.CallOption) (*Interval, error)
	Suggest(ctx context.Context, in *SuggestTransportCompanyModeRequest, opts ...grpc.CallOption) (*SuggestTransportCompanyModeResponse, error)
}

type transportCompanyModeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportCompanyModeServiceClient(cc grpc.ClientConnInterface) TransportCompanyModeServiceClient {
	return &transportCompanyModeServiceClient{cc}
}

func (c *transportCompanyModeServiceClient) List(ctx context.Context, in *ListTransportCompanyModeRequest, opts ...grpc.CallOption) (*ListTransportCompanyModeResponse, error) {
	out := new(ListTransportCompanyModeResponse)
	err := c.cc.Invoke(ctx, "/logistics.TransportCompanyModeService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportCompanyModeServiceClient) Create(ctx context.Context, in *CreateTransportCompanyModeRequest, opts ...grpc.CallOption) (*TransportCompanyMode, error) {
	out := new(TransportCompanyMode)
	err := c.cc.Invoke(ctx, "/logistics.TransportCompanyModeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportCompanyModeServiceClient) Get(ctx context.Context, in *TransportCompanyModeId, opts ...grpc.CallOption) (*TransportCompanyMode, error) {
	out := new(TransportCompanyMode)
	err := c.cc.Invoke(ctx, "/logistics.TransportCompanyModeService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportCompanyModeServiceClient) Update(ctx context.Context, in *TransportCompanyMode, opts ...grpc.CallOption) (*TransportCompanyMode, error) {
	out := new(TransportCompanyMode)
	err := c.cc.Invoke(ctx, "/logistics.TransportCompanyModeService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportCompanyModeServiceClient) Delete(ctx context.Context, in *TransportCompanyModeId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.TransportCompanyModeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportCompanyModeServiceClient) GetIntervalList(ctx context.Context, in *TransportCompanyModeId, opts ...grpc.CallOption) (*ListIntervalResponse, error) {
	out := new(ListIntervalResponse)
	err := c.cc.Invoke(ctx, "/logistics.TransportCompanyModeService/GetIntervalList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportCompanyModeServiceClient) CreateInterval(ctx context.Context, in *TransportCompanyModeIntervalRequest, opts ...grpc.CallOption) (*Interval, error) {
	out := new(Interval)
	err := c.cc.Invoke(ctx, "/logistics.TransportCompanyModeService/CreateInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportCompanyModeServiceClient) Suggest(ctx context.Context, in *SuggestTransportCompanyModeRequest, opts ...grpc.CallOption) (*SuggestTransportCompanyModeResponse, error) {
	out := new(SuggestTransportCompanyModeResponse)
	err := c.cc.Invoke(ctx, "/logistics.TransportCompanyModeService/Suggest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportCompanyModeServiceServer is the server API for TransportCompanyModeService service.
// All implementations should embed UnimplementedTransportCompanyModeServiceServer
// for forward compatibility
type TransportCompanyModeServiceServer interface {
	List(context.Context, *ListTransportCompanyModeRequest) (*ListTransportCompanyModeResponse, error)
	Create(context.Context, *CreateTransportCompanyModeRequest) (*TransportCompanyMode, error)
	Get(context.Context, *TransportCompanyModeId) (*TransportCompanyMode, error)
	Update(context.Context, *TransportCompanyMode) (*TransportCompanyMode, error)
	Delete(context.Context, *TransportCompanyModeId) (*emptypb.Empty, error)
	// intervals for transport-company-mode
	GetIntervalList(context.Context, *TransportCompanyModeId) (*ListIntervalResponse, error)
	CreateInterval(context.Context, *TransportCompanyModeIntervalRequest) (*Interval, error)
	Suggest(context.Context, *SuggestTransportCompanyModeRequest) (*SuggestTransportCompanyModeResponse, error)
}

// UnimplementedTransportCompanyModeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTransportCompanyModeServiceServer struct {
}

func (UnimplementedTransportCompanyModeServiceServer) List(context.Context, *ListTransportCompanyModeRequest) (*ListTransportCompanyModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTransportCompanyModeServiceServer) Create(context.Context, *CreateTransportCompanyModeRequest) (*TransportCompanyMode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTransportCompanyModeServiceServer) Get(context.Context, *TransportCompanyModeId) (*TransportCompanyMode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTransportCompanyModeServiceServer) Update(context.Context, *TransportCompanyMode) (*TransportCompanyMode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTransportCompanyModeServiceServer) Delete(context.Context, *TransportCompanyModeId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTransportCompanyModeServiceServer) GetIntervalList(context.Context, *TransportCompanyModeId) (*ListIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntervalList not implemented")
}
func (UnimplementedTransportCompanyModeServiceServer) CreateInterval(context.Context, *TransportCompanyModeIntervalRequest) (*Interval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterval not implemented")
}
func (UnimplementedTransportCompanyModeServiceServer) Suggest(context.Context, *SuggestTransportCompanyModeRequest) (*SuggestTransportCompanyModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suggest not implemented")
}

// UnsafeTransportCompanyModeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportCompanyModeServiceServer will
// result in compilation errors.
type UnsafeTransportCompanyModeServiceServer interface {
	mustEmbedUnimplementedTransportCompanyModeServiceServer()
}

func RegisterTransportCompanyModeServiceServer(s grpc.ServiceRegistrar, srv TransportCompanyModeServiceServer) {
	s.RegisterService(&TransportCompanyModeService_ServiceDesc, srv)
}

func _TransportCompanyModeService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransportCompanyModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCompanyModeServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.TransportCompanyModeService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCompanyModeServiceServer).List(ctx, req.(*ListTransportCompanyModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportCompanyModeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransportCompanyModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCompanyModeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.TransportCompanyModeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCompanyModeServiceServer).Create(ctx, req.(*CreateTransportCompanyModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportCompanyModeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportCompanyModeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCompanyModeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.TransportCompanyModeService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCompanyModeServiceServer).Get(ctx, req.(*TransportCompanyModeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportCompanyModeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportCompanyMode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCompanyModeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.TransportCompanyModeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCompanyModeServiceServer).Update(ctx, req.(*TransportCompanyMode))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportCompanyModeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportCompanyModeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCompanyModeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.TransportCompanyModeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCompanyModeServiceServer).Delete(ctx, req.(*TransportCompanyModeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportCompanyModeService_GetIntervalList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportCompanyModeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCompanyModeServiceServer).GetIntervalList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.TransportCompanyModeService/GetIntervalList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCompanyModeServiceServer).GetIntervalList(ctx, req.(*TransportCompanyModeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportCompanyModeService_CreateInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportCompanyModeIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCompanyModeServiceServer).CreateInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.TransportCompanyModeService/CreateInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCompanyModeServiceServer).CreateInterval(ctx, req.(*TransportCompanyModeIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportCompanyModeService_Suggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestTransportCompanyModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportCompanyModeServiceServer).Suggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.TransportCompanyModeService/Suggest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportCompanyModeServiceServer).Suggest(ctx, req.(*SuggestTransportCompanyModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransportCompanyModeService_ServiceDesc is the grpc.ServiceDesc for TransportCompanyModeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportCompanyModeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.TransportCompanyModeService",
	HandlerType: (*TransportCompanyModeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TransportCompanyModeService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TransportCompanyModeService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TransportCompanyModeService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TransportCompanyModeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TransportCompanyModeService_Delete_Handler,
		},
		{
			MethodName: "GetIntervalList",
			Handler:    _TransportCompanyModeService_GetIntervalList_Handler,
		},
		{
			MethodName: "CreateInterval",
			Handler:    _TransportCompanyModeService_CreateInterval_Handler,
		},
		{
			MethodName: "Suggest",
			Handler:    _TransportCompanyModeService_Suggest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport_company_mode.proto",
}
