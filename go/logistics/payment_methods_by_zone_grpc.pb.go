// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentMethodsByZoneClient is the client API for PaymentMethodsByZone service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentMethodsByZoneClient interface {
	Create(ctx context.Context, in *PaymentMethodByZone, opts ...grpc.CallOption) (*PaymentMethodByZoneId, error)
	Get(ctx context.Context, in *PaymentMethodByZoneId, opts ...grpc.CallOption) (*PaymentMethodByZone, error)
	List(ctx context.Context, in *ListPaymentMethodsByZoneRequest, opts ...grpc.CallOption) (*ListPaymentMethodsByZoneResponse, error)
	Update(ctx context.Context, in *PaymentMethodByZone, opts ...grpc.CallOption) (*PaymentMethodByZone, error)
	Upsert(ctx context.Context, in *PaymentMethodByZone, opts ...grpc.CallOption) (*PaymentMethodByZone, error)
	Delete(ctx context.Context, in *PaymentMethodByZoneId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type paymentMethodsByZoneClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentMethodsByZoneClient(cc grpc.ClientConnInterface) PaymentMethodsByZoneClient {
	return &paymentMethodsByZoneClient{cc}
}

func (c *paymentMethodsByZoneClient) Create(ctx context.Context, in *PaymentMethodByZone, opts ...grpc.CallOption) (*PaymentMethodByZoneId, error) {
	out := new(PaymentMethodByZoneId)
	err := c.cc.Invoke(ctx, "/logistics.PaymentMethodsByZone/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodsByZoneClient) Get(ctx context.Context, in *PaymentMethodByZoneId, opts ...grpc.CallOption) (*PaymentMethodByZone, error) {
	out := new(PaymentMethodByZone)
	err := c.cc.Invoke(ctx, "/logistics.PaymentMethodsByZone/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodsByZoneClient) List(ctx context.Context, in *ListPaymentMethodsByZoneRequest, opts ...grpc.CallOption) (*ListPaymentMethodsByZoneResponse, error) {
	out := new(ListPaymentMethodsByZoneResponse)
	err := c.cc.Invoke(ctx, "/logistics.PaymentMethodsByZone/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodsByZoneClient) Update(ctx context.Context, in *PaymentMethodByZone, opts ...grpc.CallOption) (*PaymentMethodByZone, error) {
	out := new(PaymentMethodByZone)
	err := c.cc.Invoke(ctx, "/logistics.PaymentMethodsByZone/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodsByZoneClient) Upsert(ctx context.Context, in *PaymentMethodByZone, opts ...grpc.CallOption) (*PaymentMethodByZone, error) {
	out := new(PaymentMethodByZone)
	err := c.cc.Invoke(ctx, "/logistics.PaymentMethodsByZone/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodsByZoneClient) Delete(ctx context.Context, in *PaymentMethodByZoneId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.PaymentMethodsByZone/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentMethodsByZoneServer is the server API for PaymentMethodsByZone service.
// All implementations must embed UnimplementedPaymentMethodsByZoneServer
// for forward compatibility
type PaymentMethodsByZoneServer interface {
	Create(context.Context, *PaymentMethodByZone) (*PaymentMethodByZoneId, error)
	Get(context.Context, *PaymentMethodByZoneId) (*PaymentMethodByZone, error)
	List(context.Context, *ListPaymentMethodsByZoneRequest) (*ListPaymentMethodsByZoneResponse, error)
	Update(context.Context, *PaymentMethodByZone) (*PaymentMethodByZone, error)
	Upsert(context.Context, *PaymentMethodByZone) (*PaymentMethodByZone, error)
	Delete(context.Context, *PaymentMethodByZoneId) (*emptypb.Empty, error)
	mustEmbedUnimplementedPaymentMethodsByZoneServer()
}

// UnimplementedPaymentMethodsByZoneServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentMethodsByZoneServer struct {
}

func (UnimplementedPaymentMethodsByZoneServer) Create(context.Context, *PaymentMethodByZone) (*PaymentMethodByZoneId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPaymentMethodsByZoneServer) Get(context.Context, *PaymentMethodByZoneId) (*PaymentMethodByZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPaymentMethodsByZoneServer) List(context.Context, *ListPaymentMethodsByZoneRequest) (*ListPaymentMethodsByZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPaymentMethodsByZoneServer) Update(context.Context, *PaymentMethodByZone) (*PaymentMethodByZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPaymentMethodsByZoneServer) Upsert(context.Context, *PaymentMethodByZone) (*PaymentMethodByZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedPaymentMethodsByZoneServer) Delete(context.Context, *PaymentMethodByZoneId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPaymentMethodsByZoneServer) mustEmbedUnimplementedPaymentMethodsByZoneServer() {}

// UnsafePaymentMethodsByZoneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentMethodsByZoneServer will
// result in compilation errors.
type UnsafePaymentMethodsByZoneServer interface {
	mustEmbedUnimplementedPaymentMethodsByZoneServer()
}

func RegisterPaymentMethodsByZoneServer(s grpc.ServiceRegistrar, srv PaymentMethodsByZoneServer) {
	s.RegisterService(&PaymentMethodsByZone_ServiceDesc, srv)
}

func _PaymentMethodsByZone_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethodByZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMethodsByZoneServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.PaymentMethodsByZone/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMethodsByZoneServer).Create(ctx, req.(*PaymentMethodByZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMethodsByZone_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethodByZoneId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMethodsByZoneServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.PaymentMethodsByZone/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMethodsByZoneServer).Get(ctx, req.(*PaymentMethodByZoneId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMethodsByZone_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentMethodsByZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMethodsByZoneServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.PaymentMethodsByZone/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMethodsByZoneServer).List(ctx, req.(*ListPaymentMethodsByZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMethodsByZone_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethodByZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMethodsByZoneServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.PaymentMethodsByZone/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMethodsByZoneServer).Update(ctx, req.(*PaymentMethodByZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMethodsByZone_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethodByZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMethodsByZoneServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.PaymentMethodsByZone/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMethodsByZoneServer).Upsert(ctx, req.(*PaymentMethodByZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMethodsByZone_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethodByZoneId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMethodsByZoneServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.PaymentMethodsByZone/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMethodsByZoneServer).Delete(ctx, req.(*PaymentMethodByZoneId))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentMethodsByZone_ServiceDesc is the grpc.ServiceDesc for PaymentMethodsByZone service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentMethodsByZone_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.PaymentMethodsByZone",
	HandlerType: (*PaymentMethodsByZoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PaymentMethodsByZone_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PaymentMethodsByZone_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PaymentMethodsByZone_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PaymentMethodsByZone_Update_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _PaymentMethodsByZone_Upsert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PaymentMethodsByZone_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logistics/payment_methods_by_zone.proto",
}
