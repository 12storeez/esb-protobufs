// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZonesClient is the client API for Zones service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZonesClient interface {
	Create(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*ZoneId, error)
	Get(ctx context.Context, in *ZoneId, opts ...grpc.CallOption) (*Zone, error)
	List(ctx context.Context, in *ListZonesRequest, opts ...grpc.CallOption) (*ListZonesResponse, error)
	Update(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*Zone, error)
	Delete(ctx context.Context, in *ZoneId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type zonesClient struct {
	cc grpc.ClientConnInterface
}

func NewZonesClient(cc grpc.ClientConnInterface) ZonesClient {
	return &zonesClient{cc}
}

func (c *zonesClient) Create(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*ZoneId, error) {
	out := new(ZoneId)
	err := c.cc.Invoke(ctx, "/logistics.Zones/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesClient) Get(ctx context.Context, in *ZoneId, opts ...grpc.CallOption) (*Zone, error) {
	out := new(Zone)
	err := c.cc.Invoke(ctx, "/logistics.Zones/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesClient) List(ctx context.Context, in *ListZonesRequest, opts ...grpc.CallOption) (*ListZonesResponse, error) {
	out := new(ListZonesResponse)
	err := c.cc.Invoke(ctx, "/logistics.Zones/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesClient) Update(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*Zone, error) {
	out := new(Zone)
	err := c.cc.Invoke(ctx, "/logistics.Zones/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesClient) Delete(ctx context.Context, in *ZoneId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.Zones/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZonesServer is the server API for Zones service.
// All implementations must embed UnimplementedZonesServer
// for forward compatibility
type ZonesServer interface {
	Create(context.Context, *Zone) (*ZoneId, error)
	Get(context.Context, *ZoneId) (*Zone, error)
	List(context.Context, *ListZonesRequest) (*ListZonesResponse, error)
	Update(context.Context, *Zone) (*Zone, error)
	Delete(context.Context, *ZoneId) (*emptypb.Empty, error)
	mustEmbedUnimplementedZonesServer()
}

// UnimplementedZonesServer must be embedded to have forward compatible implementations.
type UnimplementedZonesServer struct {
}

func (UnimplementedZonesServer) Create(context.Context, *Zone) (*ZoneId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedZonesServer) Get(context.Context, *ZoneId) (*Zone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedZonesServer) List(context.Context, *ListZonesRequest) (*ListZonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedZonesServer) Update(context.Context, *Zone) (*Zone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedZonesServer) Delete(context.Context, *ZoneId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedZonesServer) mustEmbedUnimplementedZonesServer() {}

// UnsafeZonesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZonesServer will
// result in compilation errors.
type UnsafeZonesServer interface {
	mustEmbedUnimplementedZonesServer()
}

func RegisterZonesServer(s grpc.ServiceRegistrar, srv ZonesServer) {
	s.RegisterService(&Zones_ServiceDesc, srv)
}

func _Zones_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Zone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Zones/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonesServer).Create(ctx, req.(*Zone))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zones_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Zones/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonesServer).Get(ctx, req.(*ZoneId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zones_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Zones/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonesServer).List(ctx, req.(*ListZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zones_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Zone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Zones/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonesServer).Update(ctx, req.(*Zone))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zones_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Zones/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonesServer).Delete(ctx, req.(*ZoneId))
	}
	return interceptor(ctx, in, info, handler)
}

// Zones_ServiceDesc is the grpc.ServiceDesc for Zones service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zones_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.Zones",
	HandlerType: (*ZonesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Zones_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Zones_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Zones_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Zones_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Zones_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logistics/zone.proto",
}
