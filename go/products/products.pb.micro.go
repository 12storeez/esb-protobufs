// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/internal/products.proto

package products

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Catalog service

func NewCatalogEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Catalog service

type CatalogService interface {
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetByArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*SingleProductResponse, error)
}

type catalogService struct {
	c    client.Client
	name string
}

func NewCatalogService(name string, c client.Client) CatalogService {
	return &catalogService{
		c:    c,
		name: name,
	}
}

func (c *catalogService) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Catalog.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogService) GetByArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*SingleProductResponse, error) {
	req := c.c.NewRequest(c.name, "Catalog.GetByArticle", in)
	out := new(SingleProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Catalog service

type CatalogHandler interface {
	Get(context.Context, *Request, *Response) error
	GetByArticle(context.Context, *Article, *SingleProductResponse) error
}

func RegisterCatalogHandler(s server.Server, hdlr CatalogHandler, opts ...server.HandlerOption) error {
	type catalog interface {
		Get(ctx context.Context, in *Request, out *Response) error
		GetByArticle(ctx context.Context, in *Article, out *SingleProductResponse) error
	}
	type Catalog struct {
		catalog
	}
	h := &catalogHandler{hdlr}
	return s.Handle(s.NewHandler(&Catalog{h}, opts...))
}

type catalogHandler struct {
	CatalogHandler
}

func (h *catalogHandler) Get(ctx context.Context, in *Request, out *Response) error {
	return h.CatalogHandler.Get(ctx, in, out)
}

func (h *catalogHandler) GetByArticle(ctx context.Context, in *Article, out *SingleProductResponse) error {
	return h.CatalogHandler.GetByArticle(ctx, in, out)
}
