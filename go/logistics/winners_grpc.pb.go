// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WinnersClient is the client API for Winners service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WinnersClient interface {
	CalculateWinners(ctx context.Context, in *WinnersParams, opts ...grpc.CallOption) (*WinnersResponse, error)
}

type winnersClient struct {
	cc grpc.ClientConnInterface
}

func NewWinnersClient(cc grpc.ClientConnInterface) WinnersClient {
	return &winnersClient{cc}
}

func (c *winnersClient) CalculateWinners(ctx context.Context, in *WinnersParams, opts ...grpc.CallOption) (*WinnersResponse, error) {
	out := new(WinnersResponse)
	err := c.cc.Invoke(ctx, "/logistics.Winners/CalculateWinners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WinnersServer is the server API for Winners service.
// All implementations should embed UnimplementedWinnersServer
// for forward compatibility
type WinnersServer interface {
	CalculateWinners(context.Context, *WinnersParams) (*WinnersResponse, error)
}

// UnimplementedWinnersServer should be embedded to have forward compatible implementations.
type UnimplementedWinnersServer struct {
}

func (UnimplementedWinnersServer) CalculateWinners(context.Context, *WinnersParams) (*WinnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateWinners not implemented")
}

// UnsafeWinnersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WinnersServer will
// result in compilation errors.
type UnsafeWinnersServer interface {
	mustEmbedUnimplementedWinnersServer()
}

func RegisterWinnersServer(s grpc.ServiceRegistrar, srv WinnersServer) {
	s.RegisterService(&Winners_ServiceDesc, srv)
}

func _Winners_CalculateWinners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WinnersParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WinnersServer).CalculateWinners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Winners/CalculateWinners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WinnersServer).CalculateWinners(ctx, req.(*WinnersParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Winners_ServiceDesc is the grpc.ServiceDesc for Winners service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Winners_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.Winners",
	HandlerType: (*WinnersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateWinners",
			Handler:    _Winners_CalculateWinners_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logistics/winners.proto",
}
