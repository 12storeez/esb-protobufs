// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: proto/slack.proto

package slack

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Slack_Send_FullMethodName            = "/slack.Slack/Send"
	Slack_Update_FullMethodName          = "/slack.Slack/Update"
	Slack_Delete_FullMethodName          = "/slack.Slack/Delete"
	Slack_GetMessageLink_FullMethodName  = "/slack.Slack/GetMessageLink"
	Slack_FileUpload_FullMethodName      = "/slack.Slack/FileUpload"
	Slack_FileDownload_FullMethodName    = "/slack.Slack/FileDownload"
	Slack_FileDelete_FullMethodName      = "/slack.Slack/FileDelete"
	Slack_IsMessageExists_FullMethodName = "/slack.Slack/IsMessageExists"
)

// SlackClient is the client API for Slack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlackClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	Update(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	Delete(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	GetMessageLink(ctx context.Context, in *GetMessageLinkRequest, opts ...grpc.CallOption) (*GetMessageLinkResponse, error)
	FileUpload(ctx context.Context, opts ...grpc.CallOption) (Slack_FileUploadClient, error)
	FileDownload(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (Slack_FileDownloadClient, error)
	FileDelete(ctx context.Context, in *FileDeleteRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	IsMessageExists(ctx context.Context, in *IsMessageExistsRequest, opts ...grpc.CallOption) (*IsMessageExistsResponse, error)
}

type slackClient struct {
	cc grpc.ClientConnInterface
}

func NewSlackClient(cc grpc.ClientConnInterface) SlackClient {
	return &slackClient{cc}
}

func (c *slackClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, Slack_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackClient) Update(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, Slack_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackClient) Delete(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, Slack_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackClient) GetMessageLink(ctx context.Context, in *GetMessageLinkRequest, opts ...grpc.CallOption) (*GetMessageLinkResponse, error) {
	out := new(GetMessageLinkResponse)
	err := c.cc.Invoke(ctx, Slack_GetMessageLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackClient) FileUpload(ctx context.Context, opts ...grpc.CallOption) (Slack_FileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Slack_ServiceDesc.Streams[0], Slack_FileUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &slackFileUploadClient{stream}
	return x, nil
}

type Slack_FileUploadClient interface {
	Send(*FileUploadRequest) error
	CloseAndRecv() (*FileUploadResponse, error)
	grpc.ClientStream
}

type slackFileUploadClient struct {
	grpc.ClientStream
}

func (x *slackFileUploadClient) Send(m *FileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *slackFileUploadClient) CloseAndRecv() (*FileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slackClient) FileDownload(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (Slack_FileDownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Slack_ServiceDesc.Streams[1], Slack_FileDownload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &slackFileDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Slack_FileDownloadClient interface {
	Recv() (*FileDownloadResponse, error)
	grpc.ClientStream
}

type slackFileDownloadClient struct {
	grpc.ClientStream
}

func (x *slackFileDownloadClient) Recv() (*FileDownloadResponse, error) {
	m := new(FileDownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *slackClient) FileDelete(ctx context.Context, in *FileDeleteRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, Slack_FileDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackClient) IsMessageExists(ctx context.Context, in *IsMessageExistsRequest, opts ...grpc.CallOption) (*IsMessageExistsResponse, error) {
	out := new(IsMessageExistsResponse)
	err := c.cc.Invoke(ctx, Slack_IsMessageExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlackServer is the server API for Slack service.
// All implementations should embed UnimplementedSlackServer
// for forward compatibility
type SlackServer interface {
	Send(context.Context, *SendRequest) (*SendResponse, error)
	Update(context.Context, *UpdateMessageRequest) (*BaseResponse, error)
	Delete(context.Context, *DeleteMessageRequest) (*BaseResponse, error)
	GetMessageLink(context.Context, *GetMessageLinkRequest) (*GetMessageLinkResponse, error)
	FileUpload(Slack_FileUploadServer) error
	FileDownload(*FileDownloadRequest, Slack_FileDownloadServer) error
	FileDelete(context.Context, *FileDeleteRequest) (*BaseResponse, error)
	IsMessageExists(context.Context, *IsMessageExistsRequest) (*IsMessageExistsResponse, error)
}

// UnimplementedSlackServer should be embedded to have forward compatible implementations.
type UnimplementedSlackServer struct {
}

func (UnimplementedSlackServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedSlackServer) Update(context.Context, *UpdateMessageRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSlackServer) Delete(context.Context, *DeleteMessageRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSlackServer) GetMessageLink(context.Context, *GetMessageLinkRequest) (*GetMessageLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageLink not implemented")
}
func (UnimplementedSlackServer) FileUpload(Slack_FileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method FileUpload not implemented")
}
func (UnimplementedSlackServer) FileDownload(*FileDownloadRequest, Slack_FileDownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method FileDownload not implemented")
}
func (UnimplementedSlackServer) FileDelete(context.Context, *FileDeleteRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDelete not implemented")
}
func (UnimplementedSlackServer) IsMessageExists(context.Context, *IsMessageExistsRequest) (*IsMessageExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMessageExists not implemented")
}

// UnsafeSlackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlackServer will
// result in compilation errors.
type UnsafeSlackServer interface {
	mustEmbedUnimplementedSlackServer()
}

func RegisterSlackServer(s grpc.ServiceRegistrar, srv SlackServer) {
	s.RegisterService(&Slack_ServiceDesc, srv)
}

func _Slack_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Slack_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slack_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Slack_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackServer).Update(ctx, req.(*UpdateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slack_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Slack_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackServer).Delete(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slack_GetMessageLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackServer).GetMessageLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Slack_GetMessageLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackServer).GetMessageLink(ctx, req.(*GetMessageLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slack_FileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SlackServer).FileUpload(&slackFileUploadServer{stream})
}

type Slack_FileUploadServer interface {
	SendAndClose(*FileUploadResponse) error
	Recv() (*FileUploadRequest, error)
	grpc.ServerStream
}

type slackFileUploadServer struct {
	grpc.ServerStream
}

func (x *slackFileUploadServer) SendAndClose(m *FileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *slackFileUploadServer) Recv() (*FileUploadRequest, error) {
	m := new(FileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Slack_FileDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SlackServer).FileDownload(m, &slackFileDownloadServer{stream})
}

type Slack_FileDownloadServer interface {
	Send(*FileDownloadResponse) error
	grpc.ServerStream
}

type slackFileDownloadServer struct {
	grpc.ServerStream
}

func (x *slackFileDownloadServer) Send(m *FileDownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Slack_FileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackServer).FileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Slack_FileDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackServer).FileDelete(ctx, req.(*FileDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slack_IsMessageExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMessageExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackServer).IsMessageExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Slack_IsMessageExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackServer).IsMessageExists(ctx, req.(*IsMessageExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Slack_ServiceDesc is the grpc.ServiceDesc for Slack service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Slack_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "slack.Slack",
	HandlerType: (*SlackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Slack_Send_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Slack_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Slack_Delete_Handler,
		},
		{
			MethodName: "GetMessageLink",
			Handler:    _Slack_GetMessageLink_Handler,
		},
		{
			MethodName: "FileDelete",
			Handler:    _Slack_FileDelete_Handler,
		},
		{
			MethodName: "IsMessageExists",
			Handler:    _Slack_IsMessageExists_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileUpload",
			Handler:       _Slack_FileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FileDownload",
			Handler:       _Slack_FileDownload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/slack.proto",
}
