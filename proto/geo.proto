syntax = "proto3";

option go_package = "go/geo";

package geo;

service geo {
  rpc CountryDetails(CountryDetailsParams) returns (Country) {
  }
  rpc SuggestCountry(SuggestCountryParams) returns (SuggestCountryResponse) {
  }
  rpc SuggestCity(SuggestCityParams) returns (SuggestCityResponse) {
  }
  rpc CityDetails(CityDetailsParams) returns (City) {
  }
  rpc CityByIP(CityByIPParams) returns (CityByIPResponse) {
  }
  rpc SuggestAddress(SuggestAddressParams) returns (SuggestAddressResponse) {
  }
  rpc AddressDetails(AddressDetailsParams) returns (Address) {
  }
}

enum LanguageType {
  ru = 0;
  en = 1;
}

// Country ...
message CountryDetailsParams {
  LanguageType language = 1;
  string iso_code = 2;
}

message Country {
  string iso_code = 1;
  string name = 2;
  Continent continent = 3;
  Capital capital = 4;
  string postal_code_format = 5;
  string currency_code = 6;
  Phone phone = 7;
}

message Phone  {
  int32 prefix= 1;
  repeated string masks = 2;
}

message Continent {
  string code = 1;
  string name = 2;
}

message Capital {
  string name = 1;
  Location location = 2;
  string postal_code = 3;
}

message SuggestCountryParams {
  LanguageType language = 1;
  string name = 2;
  int32 limit = 3;
  int32 offset = 4;
}

message SuggestCountryResponse {
  repeated SuggestCountry results = 1;
  int32 total = 2;
}

message SuggestCountry {
  string iso_code = 1;
  string name = 2;
  Continent continent = 3;
  Phone phone = 4;
}

// City ...
message SuggestCityParams {
  LanguageType language = 1;
  string country_iso_code = 2;
  string city_name = 3;
  int32 limit = 4;
}

message SuggestCityResponse {
  repeated SuggestCity results = 1;
  int32 total = 2;
}

message SuggestCity {
  string id = 1;
  string suggest = 2;
  string name = 3;
  string subtitle = 4;
  string type = 5;
  string query_for_details = 6;
}

message CityDetailsParams {
  LanguageType language = 1;
  string country_iso_code = 2;

  // для России передавать полученный suggest
  // для остальных передавать id
  string query = 3;
}

message City {
  string id = 1;
  string name = 2;
  string country_iso_code = 3;
  string postal_code = 4;
  string type = 5;
  Region region = 6;
  State state = 7;
  Location location = 8;
  CityAdditional additional = 9;
}

message State {
  string name = 1;
  string iso_code = 2;
}

message Region {
  string id = 1;
  string name = 2;
  string iso_code = 3;
  string type = 5;
}

message Location  {
  double latitude = 1;
  double longitude = 2;
}

message CityByIPParams {
  LanguageType language = 1;
  string ip = 2;
}

message CityByIPResponse {
  string name = 1;
  string country_iso_code = 2;
  string country_name = 3;
  Location location = 4;
}

// Address ...
message SuggestAddressParams {
  LanguageType language = 1;
  string       country_iso_code = 2;
  string       city_id = 3;
  string       address = 4;
  int32        limit = 5;
}

message SuggestAddressResponse {
  repeated SuggestAddress results = 1;
  int32 total = 2;
}

message SuggestAddress {
  string id = 1;
  string suggest = 2;
  string title = 3;
  string subtitle = 4;
  string query_for_details = 5;
}

message AddressDetailsParams {
  LanguageType language = 1;
  string country_iso_code = 2;
  string query = 3;
}

message Address {
  // fias_id for dadata and place_id for google
  string id = 1;
  string country_iso_code = 2;
  Region region = 3;
  State state = 4;
  string city = 5;
  string street = 6;
  string house = 7;
  string block = 8;
  string postal_code = 9;
  Location location = 10;
  // fias_level for dadata
  AddressAdditional additional = 11;
}

message AddressAdditional {
  bool is_in_mkad = 1;
  bool is_in_kad = 2;
  string fias_level = 3;
}

message CityAdditional {
  string kladr_id = 1;
  bool is_crimea = 2;
}
