// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: proto/nomenclature.proto

// Package product describes the gRPC interface of the product-go -ms microservice.
// Warning! it`s not equal internal/products

package nomenclature

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NomenclatureService_GetList_FullMethodName      = "/nomenclature.NomenclatureService/GetList"
	NomenclatureService_GetByArticle_FullMethodName = "/nomenclature.NomenclatureService/GetByArticle"
)

// NomenclatureServiceClient is the client API for NomenclatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NomenclatureServiceClient interface {
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	GetByArticle(ctx context.Context, in *GetByArticleRequest, opts ...grpc.CallOption) (*GetByArticleResponse, error)
}

type nomenclatureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNomenclatureServiceClient(cc grpc.ClientConnInterface) NomenclatureServiceClient {
	return &nomenclatureServiceClient{cc}
}

func (c *nomenclatureServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, NomenclatureService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nomenclatureServiceClient) GetByArticle(ctx context.Context, in *GetByArticleRequest, opts ...grpc.CallOption) (*GetByArticleResponse, error) {
	out := new(GetByArticleResponse)
	err := c.cc.Invoke(ctx, NomenclatureService_GetByArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NomenclatureServiceServer is the server API for NomenclatureService service.
// All implementations should embed UnimplementedNomenclatureServiceServer
// for forward compatibility
type NomenclatureServiceServer interface {
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	GetByArticle(context.Context, *GetByArticleRequest) (*GetByArticleResponse, error)
}

// UnimplementedNomenclatureServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNomenclatureServiceServer struct {
}

func (UnimplementedNomenclatureServiceServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedNomenclatureServiceServer) GetByArticle(context.Context, *GetByArticleRequest) (*GetByArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByArticle not implemented")
}

// UnsafeNomenclatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NomenclatureServiceServer will
// result in compilation errors.
type UnsafeNomenclatureServiceServer interface {
	mustEmbedUnimplementedNomenclatureServiceServer()
}

func RegisterNomenclatureServiceServer(s grpc.ServiceRegistrar, srv NomenclatureServiceServer) {
	s.RegisterService(&NomenclatureService_ServiceDesc, srv)
}

func _NomenclatureService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomenclatureServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NomenclatureService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomenclatureServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NomenclatureService_GetByArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomenclatureServiceServer).GetByArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NomenclatureService_GetByArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomenclatureServiceServer).GetByArticle(ctx, req.(*GetByArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NomenclatureService_ServiceDesc is the grpc.ServiceDesc for NomenclatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NomenclatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nomenclature.NomenclatureService",
	HandlerType: (*NomenclatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _NomenclatureService_GetList_Handler,
		},
		{
			MethodName: "GetByArticle",
			Handler:    _NomenclatureService_GetByArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nomenclature.proto",
}
