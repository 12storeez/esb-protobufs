// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZonesToRegionsClient is the client API for ZonesToRegions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZonesToRegionsClient interface {
	Create(ctx context.Context, in *ZoneToRegion, opts ...grpc.CallOption) (*ZoneToRegionId, error)
	CreateMany(ctx context.Context, in *CreateManyZoneToRegionRequest, opts ...grpc.CallOption) (*CreateManyZoneToRegionResponse, error)
	Get(ctx context.Context, in *ZoneToRegionId, opts ...grpc.CallOption) (*ZoneToRegion, error)
	List(ctx context.Context, in *ListZonesToRegionsRequest, opts ...grpc.CallOption) (*ListZonesToRegionsResponse, error)
	Update(ctx context.Context, in *ZoneToRegion, opts ...grpc.CallOption) (*ZoneToRegion, error)
	Delete(ctx context.Context, in *ZoneToRegionId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type zonesToRegionsClient struct {
	cc grpc.ClientConnInterface
}

func NewZonesToRegionsClient(cc grpc.ClientConnInterface) ZonesToRegionsClient {
	return &zonesToRegionsClient{cc}
}

func (c *zonesToRegionsClient) Create(ctx context.Context, in *ZoneToRegion, opts ...grpc.CallOption) (*ZoneToRegionId, error) {
	out := new(ZoneToRegionId)
	err := c.cc.Invoke(ctx, "/logistics.ZonesToRegions/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesToRegionsClient) CreateMany(ctx context.Context, in *CreateManyZoneToRegionRequest, opts ...grpc.CallOption) (*CreateManyZoneToRegionResponse, error) {
	out := new(CreateManyZoneToRegionResponse)
	err := c.cc.Invoke(ctx, "/logistics.ZonesToRegions/CreateMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesToRegionsClient) Get(ctx context.Context, in *ZoneToRegionId, opts ...grpc.CallOption) (*ZoneToRegion, error) {
	out := new(ZoneToRegion)
	err := c.cc.Invoke(ctx, "/logistics.ZonesToRegions/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesToRegionsClient) List(ctx context.Context, in *ListZonesToRegionsRequest, opts ...grpc.CallOption) (*ListZonesToRegionsResponse, error) {
	out := new(ListZonesToRegionsResponse)
	err := c.cc.Invoke(ctx, "/logistics.ZonesToRegions/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesToRegionsClient) Update(ctx context.Context, in *ZoneToRegion, opts ...grpc.CallOption) (*ZoneToRegion, error) {
	out := new(ZoneToRegion)
	err := c.cc.Invoke(ctx, "/logistics.ZonesToRegions/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zonesToRegionsClient) Delete(ctx context.Context, in *ZoneToRegionId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.ZonesToRegions/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZonesToRegionsServer is the server API for ZonesToRegions service.
// All implementations must embed UnimplementedZonesToRegionsServer
// for forward compatibility
type ZonesToRegionsServer interface {
	Create(context.Context, *ZoneToRegion) (*ZoneToRegionId, error)
	CreateMany(context.Context, *CreateManyZoneToRegionRequest) (*CreateManyZoneToRegionResponse, error)
	Get(context.Context, *ZoneToRegionId) (*ZoneToRegion, error)
	List(context.Context, *ListZonesToRegionsRequest) (*ListZonesToRegionsResponse, error)
	Update(context.Context, *ZoneToRegion) (*ZoneToRegion, error)
	Delete(context.Context, *ZoneToRegionId) (*emptypb.Empty, error)
	mustEmbedUnimplementedZonesToRegionsServer()
}

// UnimplementedZonesToRegionsServer must be embedded to have forward compatible implementations.
type UnimplementedZonesToRegionsServer struct {
}

func (UnimplementedZonesToRegionsServer) Create(context.Context, *ZoneToRegion) (*ZoneToRegionId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedZonesToRegionsServer) CreateMany(context.Context, *CreateManyZoneToRegionRequest) (*CreateManyZoneToRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMany not implemented")
}
func (UnimplementedZonesToRegionsServer) Get(context.Context, *ZoneToRegionId) (*ZoneToRegion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedZonesToRegionsServer) List(context.Context, *ListZonesToRegionsRequest) (*ListZonesToRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedZonesToRegionsServer) Update(context.Context, *ZoneToRegion) (*ZoneToRegion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedZonesToRegionsServer) Delete(context.Context, *ZoneToRegionId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedZonesToRegionsServer) mustEmbedUnimplementedZonesToRegionsServer() {}

// UnsafeZonesToRegionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZonesToRegionsServer will
// result in compilation errors.
type UnsafeZonesToRegionsServer interface {
	mustEmbedUnimplementedZonesToRegionsServer()
}

func RegisterZonesToRegionsServer(s grpc.ServiceRegistrar, srv ZonesToRegionsServer) {
	s.RegisterService(&ZonesToRegions_ServiceDesc, srv)
}

func _ZonesToRegions_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneToRegion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonesToRegionsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.ZonesToRegions/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonesToRegionsServer).Create(ctx, req.(*ZoneToRegion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZonesToRegions_CreateMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManyZoneToRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonesToRegionsServer).CreateMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.ZonesToRegions/CreateMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonesToRegionsServer).CreateMany(ctx, req.(*CreateManyZoneToRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZonesToRegions_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneToRegionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonesToRegionsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.ZonesToRegions/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonesToRegionsServer).Get(ctx, req.(*ZoneToRegionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZonesToRegions_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListZonesToRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonesToRegionsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.ZonesToRegions/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonesToRegionsServer).List(ctx, req.(*ListZonesToRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZonesToRegions_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneToRegion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonesToRegionsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.ZonesToRegions/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonesToRegionsServer).Update(ctx, req.(*ZoneToRegion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZonesToRegions_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneToRegionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZonesToRegionsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.ZonesToRegions/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZonesToRegionsServer).Delete(ctx, req.(*ZoneToRegionId))
	}
	return interceptor(ctx, in, info, handler)
}

// ZonesToRegions_ServiceDesc is the grpc.ServiceDesc for ZonesToRegions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZonesToRegions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.ZonesToRegions",
	HandlerType: (*ZonesToRegionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ZonesToRegions_Create_Handler,
		},
		{
			MethodName: "CreateMany",
			Handler:    _ZonesToRegions_CreateMany_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ZonesToRegions_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ZonesToRegions_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ZonesToRegions_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ZonesToRegions_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logistics/zones_to_regions.proto",
}
