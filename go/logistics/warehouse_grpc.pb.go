// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WarehousesClient is the client API for Warehouses service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehousesClient interface {
	Create(ctx context.Context, in *Warehouse, opts ...grpc.CallOption) (*WarehouseId, error)
	Get(ctx context.Context, in *WarehouseId, opts ...grpc.CallOption) (*Warehouse, error)
	List(ctx context.Context, in *ListWarehousesRequest, opts ...grpc.CallOption) (*ListWarehousesResponse, error)
	Update(ctx context.Context, in *Warehouse, opts ...grpc.CallOption) (*Warehouse, error)
	Delete(ctx context.Context, in *WarehouseId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type warehousesClient struct {
	cc grpc.ClientConnInterface
}

func NewWarehousesClient(cc grpc.ClientConnInterface) WarehousesClient {
	return &warehousesClient{cc}
}

func (c *warehousesClient) Create(ctx context.Context, in *Warehouse, opts ...grpc.CallOption) (*WarehouseId, error) {
	out := new(WarehouseId)
	err := c.cc.Invoke(ctx, "/logistics.Warehouses/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehousesClient) Get(ctx context.Context, in *WarehouseId, opts ...grpc.CallOption) (*Warehouse, error) {
	out := new(Warehouse)
	err := c.cc.Invoke(ctx, "/logistics.Warehouses/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehousesClient) List(ctx context.Context, in *ListWarehousesRequest, opts ...grpc.CallOption) (*ListWarehousesResponse, error) {
	out := new(ListWarehousesResponse)
	err := c.cc.Invoke(ctx, "/logistics.Warehouses/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehousesClient) Update(ctx context.Context, in *Warehouse, opts ...grpc.CallOption) (*Warehouse, error) {
	out := new(Warehouse)
	err := c.cc.Invoke(ctx, "/logistics.Warehouses/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehousesClient) Delete(ctx context.Context, in *WarehouseId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.Warehouses/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehousesServer is the server API for Warehouses service.
// All implementations must embed UnimplementedWarehousesServer
// for forward compatibility
type WarehousesServer interface {
	Create(context.Context, *Warehouse) (*WarehouseId, error)
	Get(context.Context, *WarehouseId) (*Warehouse, error)
	List(context.Context, *ListWarehousesRequest) (*ListWarehousesResponse, error)
	Update(context.Context, *Warehouse) (*Warehouse, error)
	Delete(context.Context, *WarehouseId) (*emptypb.Empty, error)
	mustEmbedUnimplementedWarehousesServer()
}

// UnimplementedWarehousesServer must be embedded to have forward compatible implementations.
type UnimplementedWarehousesServer struct {
}

func (UnimplementedWarehousesServer) Create(context.Context, *Warehouse) (*WarehouseId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWarehousesServer) Get(context.Context, *WarehouseId) (*Warehouse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWarehousesServer) List(context.Context, *ListWarehousesRequest) (*ListWarehousesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWarehousesServer) Update(context.Context, *Warehouse) (*Warehouse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWarehousesServer) Delete(context.Context, *WarehouseId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWarehousesServer) mustEmbedUnimplementedWarehousesServer() {}

// UnsafeWarehousesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehousesServer will
// result in compilation errors.
type UnsafeWarehousesServer interface {
	mustEmbedUnimplementedWarehousesServer()
}

func RegisterWarehousesServer(s grpc.ServiceRegistrar, srv WarehousesServer) {
	s.RegisterService(&Warehouses_ServiceDesc, srv)
}

func _Warehouses_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Warehouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehousesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Warehouses/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehousesServer).Create(ctx, req.(*Warehouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouses_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehousesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Warehouses/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehousesServer).Get(ctx, req.(*WarehouseId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouses_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWarehousesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehousesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Warehouses/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehousesServer).List(ctx, req.(*ListWarehousesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouses_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Warehouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehousesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Warehouses/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehousesServer).Update(ctx, req.(*Warehouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouses_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehousesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.Warehouses/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehousesServer).Delete(ctx, req.(*WarehouseId))
	}
	return interceptor(ctx, in, info, handler)
}

// Warehouses_ServiceDesc is the grpc.ServiceDesc for Warehouses service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Warehouses_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.Warehouses",
	HandlerType: (*WarehousesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Warehouses_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Warehouses_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Warehouses_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Warehouses_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Warehouses_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logistics/warehouse.proto",
}
