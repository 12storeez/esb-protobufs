// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IntervalServiceClient is the client API for IntervalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntervalServiceClient interface {
	List(ctx context.Context, in *ListIntervalRequest, opts ...grpc.CallOption) (*ListIntervalResponse, error)
	Create(ctx context.Context, in *Interval, opts ...grpc.CallOption) (*Interval, error)
	Get(ctx context.Context, in *IntervalId, opts ...grpc.CallOption) (*Interval, error)
	Update(ctx context.Context, in *Interval, opts ...grpc.CallOption) (*Interval, error)
	Delete(ctx context.Context, in *IntervalId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type intervalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntervalServiceClient(cc grpc.ClientConnInterface) IntervalServiceClient {
	return &intervalServiceClient{cc}
}

func (c *intervalServiceClient) List(ctx context.Context, in *ListIntervalRequest, opts ...grpc.CallOption) (*ListIntervalResponse, error) {
	out := new(ListIntervalResponse)
	err := c.cc.Invoke(ctx, "/logistics.IntervalService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intervalServiceClient) Create(ctx context.Context, in *Interval, opts ...grpc.CallOption) (*Interval, error) {
	out := new(Interval)
	err := c.cc.Invoke(ctx, "/logistics.IntervalService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intervalServiceClient) Get(ctx context.Context, in *IntervalId, opts ...grpc.CallOption) (*Interval, error) {
	out := new(Interval)
	err := c.cc.Invoke(ctx, "/logistics.IntervalService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intervalServiceClient) Update(ctx context.Context, in *Interval, opts ...grpc.CallOption) (*Interval, error) {
	out := new(Interval)
	err := c.cc.Invoke(ctx, "/logistics.IntervalService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intervalServiceClient) Delete(ctx context.Context, in *IntervalId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/logistics.IntervalService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntervalServiceServer is the server API for IntervalService service.
// All implementations should embed UnimplementedIntervalServiceServer
// for forward compatibility
type IntervalServiceServer interface {
	List(context.Context, *ListIntervalRequest) (*ListIntervalResponse, error)
	Create(context.Context, *Interval) (*Interval, error)
	Get(context.Context, *IntervalId) (*Interval, error)
	Update(context.Context, *Interval) (*Interval, error)
	Delete(context.Context, *IntervalId) (*emptypb.Empty, error)
}

// UnimplementedIntervalServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIntervalServiceServer struct {
}

func (UnimplementedIntervalServiceServer) List(context.Context, *ListIntervalRequest) (*ListIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIntervalServiceServer) Create(context.Context, *Interval) (*Interval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIntervalServiceServer) Get(context.Context, *IntervalId) (*Interval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIntervalServiceServer) Update(context.Context, *Interval) (*Interval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedIntervalServiceServer) Delete(context.Context, *IntervalId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeIntervalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntervalServiceServer will
// result in compilation errors.
type UnsafeIntervalServiceServer interface {
	mustEmbedUnimplementedIntervalServiceServer()
}

func RegisterIntervalServiceServer(s grpc.ServiceRegistrar, srv IntervalServiceServer) {
	s.RegisterService(&IntervalService_ServiceDesc, srv)
}

func _IntervalService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntervalServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.IntervalService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntervalServiceServer).List(ctx, req.(*ListIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntervalService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntervalServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.IntervalService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntervalServiceServer).Create(ctx, req.(*Interval))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntervalService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntervalServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.IntervalService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntervalServiceServer).Get(ctx, req.(*IntervalId))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntervalService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntervalServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.IntervalService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntervalServiceServer).Update(ctx, req.(*Interval))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntervalService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntervalServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logistics.IntervalService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntervalServiceServer).Delete(ctx, req.(*IntervalId))
	}
	return interceptor(ctx, in, info, handler)
}

// IntervalService_ServiceDesc is the grpc.ServiceDesc for IntervalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntervalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.IntervalService",
	HandlerType: (*IntervalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _IntervalService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _IntervalService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IntervalService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _IntervalService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IntervalService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logistics/interval.proto",
}
