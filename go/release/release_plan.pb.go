// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/internal/release_plan.proto

package release

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ArticleReleaseType int32

const (
	ArticleReleaseType_site    ArticleReleaseType = 0
	ArticleReleaseType_mercaux ArticleReleaseType = 1
)

var ArticleReleaseType_name = map[int32]string{
	0: "site",
	1: "mercaux",
}

var ArticleReleaseType_value = map[string]int32{
	"site":    0,
	"mercaux": 1,
}

func (x ArticleReleaseType) String() string {
	return proto.EnumName(ArticleReleaseType_name, int32(x))
}

func (ArticleReleaseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5069a6baf1b4d27d, []int{0}
}

type ParamsCreateArticle struct {
	Article              string             `protobuf:"bytes,1,opt,name=article,proto3" json:"article,omitempty"`
	TriggerTime          string             `protobuf:"bytes,2,opt,name=trigger_time,json=triggerTime,proto3" json:"trigger_time,omitempty"`
	Type                 ArticleReleaseType `protobuf:"varint,3,opt,name=type,proto3,enum=release.ArticleReleaseType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ParamsCreateArticle) Reset()         { *m = ParamsCreateArticle{} }
func (m *ParamsCreateArticle) String() string { return proto.CompactTextString(m) }
func (*ParamsCreateArticle) ProtoMessage()    {}
func (*ParamsCreateArticle) Descriptor() ([]byte, []int) {
	return fileDescriptor_5069a6baf1b4d27d, []int{0}
}

func (m *ParamsCreateArticle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParamsCreateArticle.Unmarshal(m, b)
}
func (m *ParamsCreateArticle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParamsCreateArticle.Marshal(b, m, deterministic)
}
func (m *ParamsCreateArticle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsCreateArticle.Merge(m, src)
}
func (m *ParamsCreateArticle) XXX_Size() int {
	return xxx_messageInfo_ParamsCreateArticle.Size(m)
}
func (m *ParamsCreateArticle) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsCreateArticle.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsCreateArticle proto.InternalMessageInfo

func (m *ParamsCreateArticle) GetArticle() string {
	if m != nil {
		return m.Article
	}
	return ""
}

func (m *ParamsCreateArticle) GetTriggerTime() string {
	if m != nil {
		return m.TriggerTime
	}
	return ""
}

func (m *ParamsCreateArticle) GetType() ArticleReleaseType {
	if m != nil {
		return m.Type
	}
	return ArticleReleaseType_site
}

type ArticleReleaseActionResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArticleReleaseActionResponse) Reset()         { *m = ArticleReleaseActionResponse{} }
func (m *ArticleReleaseActionResponse) String() string { return proto.CompactTextString(m) }
func (*ArticleReleaseActionResponse) ProtoMessage()    {}
func (*ArticleReleaseActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5069a6baf1b4d27d, []int{1}
}

func (m *ArticleReleaseActionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArticleReleaseActionResponse.Unmarshal(m, b)
}
func (m *ArticleReleaseActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArticleReleaseActionResponse.Marshal(b, m, deterministic)
}
func (m *ArticleReleaseActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleReleaseActionResponse.Merge(m, src)
}
func (m *ArticleReleaseActionResponse) XXX_Size() int {
	return xxx_messageInfo_ArticleReleaseActionResponse.Size(m)
}
func (m *ArticleReleaseActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleReleaseActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleReleaseActionResponse proto.InternalMessageInfo

func (m *ArticleReleaseActionResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ArticleReleaseActionResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ParamsGetArticleRelease struct {
	Limit                int32              `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int32              `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Type                 ArticleReleaseType `protobuf:"varint,3,opt,name=type,proto3,enum=release.ArticleReleaseType" json:"type,omitempty"`
	IsDeleted            bool               `protobuf:"varint,4,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	IsActive             bool               `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ParamsGetArticleRelease) Reset()         { *m = ParamsGetArticleRelease{} }
func (m *ParamsGetArticleRelease) String() string { return proto.CompactTextString(m) }
func (*ParamsGetArticleRelease) ProtoMessage()    {}
func (*ParamsGetArticleRelease) Descriptor() ([]byte, []int) {
	return fileDescriptor_5069a6baf1b4d27d, []int{2}
}

func (m *ParamsGetArticleRelease) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParamsGetArticleRelease.Unmarshal(m, b)
}
func (m *ParamsGetArticleRelease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParamsGetArticleRelease.Marshal(b, m, deterministic)
}
func (m *ParamsGetArticleRelease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsGetArticleRelease.Merge(m, src)
}
func (m *ParamsGetArticleRelease) XXX_Size() int {
	return xxx_messageInfo_ParamsGetArticleRelease.Size(m)
}
func (m *ParamsGetArticleRelease) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsGetArticleRelease.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsGetArticleRelease proto.InternalMessageInfo

func (m *ParamsGetArticleRelease) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ParamsGetArticleRelease) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ParamsGetArticleRelease) GetType() ArticleReleaseType {
	if m != nil {
		return m.Type
	}
	return ArticleReleaseType_site
}

func (m *ParamsGetArticleRelease) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *ParamsGetArticleRelease) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type ArticleReleaseList struct {
	Ok                   bool              `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Total                int32             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Article              []*ArticleRelease `protobuf:"bytes,3,rep,name=article,proto3" json:"article,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ArticleReleaseList) Reset()         { *m = ArticleReleaseList{} }
func (m *ArticleReleaseList) String() string { return proto.CompactTextString(m) }
func (*ArticleReleaseList) ProtoMessage()    {}
func (*ArticleReleaseList) Descriptor() ([]byte, []int) {
	return fileDescriptor_5069a6baf1b4d27d, []int{3}
}

func (m *ArticleReleaseList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArticleReleaseList.Unmarshal(m, b)
}
func (m *ArticleReleaseList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArticleReleaseList.Marshal(b, m, deterministic)
}
func (m *ArticleReleaseList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleReleaseList.Merge(m, src)
}
func (m *ArticleReleaseList) XXX_Size() int {
	return xxx_messageInfo_ArticleReleaseList.Size(m)
}
func (m *ArticleReleaseList) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleReleaseList.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleReleaseList proto.InternalMessageInfo

func (m *ArticleReleaseList) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ArticleReleaseList) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ArticleReleaseList) GetArticle() []*ArticleRelease {
	if m != nil {
		return m.Article
	}
	return nil
}

type ArticleRelease struct {
	Id                   int32              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Article              string             `protobuf:"bytes,2,opt,name=article,proto3" json:"article,omitempty"`
	TriggerTime          string             `protobuf:"bytes,3,opt,name=trigger_time,json=triggerTime,proto3" json:"trigger_time,omitempty"`
	Type                 ArticleReleaseType `protobuf:"varint,4,opt,name=type,proto3,enum=release.ArticleReleaseType" json:"type,omitempty"`
	IsDeleted            bool               `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	IsActive             bool               `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ArticleRelease) Reset()         { *m = ArticleRelease{} }
func (m *ArticleRelease) String() string { return proto.CompactTextString(m) }
func (*ArticleRelease) ProtoMessage()    {}
func (*ArticleRelease) Descriptor() ([]byte, []int) {
	return fileDescriptor_5069a6baf1b4d27d, []int{4}
}

func (m *ArticleRelease) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArticleRelease.Unmarshal(m, b)
}
func (m *ArticleRelease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArticleRelease.Marshal(b, m, deterministic)
}
func (m *ArticleRelease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleRelease.Merge(m, src)
}
func (m *ArticleRelease) XXX_Size() int {
	return xxx_messageInfo_ArticleRelease.Size(m)
}
func (m *ArticleRelease) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleRelease.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleRelease proto.InternalMessageInfo

func (m *ArticleRelease) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ArticleRelease) GetArticle() string {
	if m != nil {
		return m.Article
	}
	return ""
}

func (m *ArticleRelease) GetTriggerTime() string {
	if m != nil {
		return m.TriggerTime
	}
	return ""
}

func (m *ArticleRelease) GetType() ArticleReleaseType {
	if m != nil {
		return m.Type
	}
	return ArticleReleaseType_site
}

func (m *ArticleRelease) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *ArticleRelease) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type ArticlesReleaseId struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArticlesReleaseId) Reset()         { *m = ArticlesReleaseId{} }
func (m *ArticlesReleaseId) String() string { return proto.CompactTextString(m) }
func (*ArticlesReleaseId) ProtoMessage()    {}
func (*ArticlesReleaseId) Descriptor() ([]byte, []int) {
	return fileDescriptor_5069a6baf1b4d27d, []int{5}
}

func (m *ArticlesReleaseId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArticlesReleaseId.Unmarshal(m, b)
}
func (m *ArticlesReleaseId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArticlesReleaseId.Marshal(b, m, deterministic)
}
func (m *ArticlesReleaseId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticlesReleaseId.Merge(m, src)
}
func (m *ArticlesReleaseId) XXX_Size() int {
	return xxx_messageInfo_ArticlesReleaseId.Size(m)
}
func (m *ArticlesReleaseId) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticlesReleaseId.DiscardUnknown(m)
}

var xxx_messageInfo_ArticlesReleaseId proto.InternalMessageInfo

func (m *ArticlesReleaseId) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterEnum("release.ArticleReleaseType", ArticleReleaseType_name, ArticleReleaseType_value)
	proto.RegisterType((*ParamsCreateArticle)(nil), "release.ParamsCreateArticle")
	proto.RegisterType((*ArticleReleaseActionResponse)(nil), "release.ArticleReleaseActionResponse")
	proto.RegisterType((*ParamsGetArticleRelease)(nil), "release.ParamsGetArticleRelease")
	proto.RegisterType((*ArticleReleaseList)(nil), "release.ArticleReleaseList")
	proto.RegisterType((*ArticleRelease)(nil), "release.ArticleRelease")
	proto.RegisterType((*ArticlesReleaseId)(nil), "release.ArticlesReleaseId")
}

func init() { proto.RegisterFile("proto/internal/release_plan.proto", fileDescriptor_5069a6baf1b4d27d) }

var fileDescriptor_5069a6baf1b4d27d = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0xed, 0xd8, 0x49, 0x26, 0x55, 0x28, 0x43, 0x45, 0xad, 0xb4, 0x48, 0xa9, 0x11, 0x52,
	0x04, 0x52, 0x22, 0xc2, 0x1d, 0x91, 0x82, 0x88, 0x2a, 0x81, 0x40, 0x56, 0xb9, 0x70, 0x89, 0x96,
	0x78, 0x1a, 0xad, 0xea, 0x2f, 0x79, 0x07, 0x44, 0xce, 0x5c, 0xf9, 0x39, 0xfc, 0x0a, 0x7e, 0x15,
	0xca, 0x7a, 0xd3, 0x12, 0x17, 0x47, 0x80, 0x7a, 0xf3, 0xdb, 0x59, 0xbf, 0x9d, 0xf7, 0xde, 0xec,
	0xc2, 0x49, 0x5e, 0x64, 0x9c, 0x8d, 0x65, 0xca, 0x54, 0xa4, 0x22, 0x1e, 0x17, 0x14, 0x93, 0x50,
	0x34, 0xcf, 0x63, 0x91, 0x8e, 0x74, 0x0d, 0x5b, 0x66, 0x2d, 0xf8, 0x66, 0xc1, 0xbd, 0xf7, 0xa2,
	0x10, 0x89, 0x7a, 0x59, 0x90, 0x60, 0x9a, 0x16, 0x2c, 0x17, 0x31, 0xa1, 0x0f, 0x2d, 0x51, 0x7e,
	0xfa, 0xd6, 0xc0, 0x1a, 0x76, 0xc2, 0x0d, 0xc4, 0x13, 0xd8, 0xe3, 0x42, 0x2e, 0x97, 0x54, 0xcc,
	0x59, 0x26, 0xe4, 0xdb, 0xba, 0xdc, 0x35, 0x6b, 0xe7, 0x32, 0x21, 0x1c, 0x43, 0x93, 0x57, 0x39,
	0xf9, 0xce, 0xc0, 0x1a, 0xf6, 0x26, 0x47, 0x23, 0x73, 0xd8, 0xc8, 0x90, 0x87, 0x25, 0x3c, 0x5f,
	0xe5, 0x14, 0xea, 0x8d, 0xc1, 0x73, 0x38, 0xde, 0xae, 0x4d, 0x17, 0x2c, 0xb3, 0x34, 0x24, 0x95,
	0x67, 0xa9, 0x22, 0xec, 0x81, 0x9d, 0x5d, 0xea, 0x46, 0xda, 0xa1, 0x9d, 0x5d, 0xae, 0xb1, 0x8c,
	0xf4, 0xc9, 0x6e, 0x68, 0xcb, 0x28, 0xf8, 0x61, 0xc1, 0x61, 0xa9, 0x62, 0x46, 0xbc, 0xcd, 0x84,
	0x07, 0xe0, 0xc6, 0x32, 0x91, 0xac, 0x7f, 0x77, 0xc3, 0x12, 0xe0, 0x7d, 0xf0, 0xb2, 0x8b, 0x0b,
	0x45, 0x6c, 0x58, 0x0c, 0xfa, 0xe7, 0xd6, 0xf1, 0x01, 0x80, 0x54, 0xf3, 0x88, 0x62, 0x62, 0x8a,
	0xfc, 0xa6, 0x6e, 0xb1, 0x23, 0xd5, 0xab, 0x72, 0x01, 0x8f, 0xa0, 0x23, 0xd5, 0x5c, 0x2c, 0x58,
	0x7e, 0x21, 0xdf, 0xd5, 0xd5, 0xb6, 0x54, 0x53, 0x8d, 0x83, 0x04, 0x70, 0x9b, 0xf7, 0x8d, 0x54,
	0x7c, 0x43, 0xec, 0x01, 0xb8, 0x9c, 0xb1, 0x88, 0x4d, 0xa7, 0x25, 0xc0, 0xa7, 0xd7, 0x01, 0x39,
	0x03, 0x67, 0xd8, 0x9d, 0x1c, 0xd6, 0xf4, 0x7a, 0x95, 0x5c, 0xf0, 0xd3, 0x82, 0x5e, 0xc5, 0x9c,
	0xd2, 0x48, 0x6b, 0x63, 0xe4, 0xef, 0xb1, 0xdb, 0xbb, 0x63, 0x77, 0xea, 0x63, 0x6f, 0xfe, 0x9f,
	0x77, 0xee, 0x4e, 0xef, 0xbc, 0x8a, 0x77, 0x0f, 0xe1, 0xae, 0xe1, 0x55, 0x86, 0xf8, 0x2c, 0xaa,
	0xca, 0x79, 0xfc, 0xa4, 0x6a, 0xf0, 0xfa, 0x70, 0x6c, 0x43, 0x53, 0x49, 0xa6, 0xfd, 0x06, 0x76,
	0xa1, 0x95, 0x50, 0xb1, 0x10, 0x9f, 0xbf, 0xee, 0x5b, 0x93, 0xef, 0x0e, 0xdc, 0xa9, 0x50, 0xe2,
	0x3b, 0xf0, 0xca, 0x7b, 0x81, 0xc7, 0x57, 0x72, 0xfe, 0x70, 0x5d, 0xfa, 0x8f, 0x6a, 0xc4, 0x6e,
	0xcf, 0x71, 0xd0, 0xc0, 0xd7, 0xe0, 0xcc, 0x88, 0x71, 0x50, 0x61, 0xbb, 0x31, 0xb6, 0xfd, 0x3a,
	0xfb, 0xd6, 0x23, 0x12, 0x34, 0xf0, 0x05, 0xb4, 0x66, 0xc4, 0xa7, 0xab, 0xb3, 0x08, 0xfb, 0xd5,
	0x9d, 0xd7, 0x86, 0xf4, 0xeb, 0x86, 0x22, 0x68, 0xac, 0xa5, 0x7d, 0xc8, 0xa3, 0x5b, 0x94, 0xf6,
	0x16, 0xbc, 0x32, 0xb9, 0x9d, 0x1d, 0xfd, 0x2d, 0xdd, 0xe9, 0xde, 0x47, 0x58, 0x66, 0x9b, 0xb7,
	0xeb, 0x93, 0xa7, 0xdf, 0xad, 0x67, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x34, 0x61, 0x56, 0x53,
	0xdc, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArticlesReleaseClient is the client API for ArticlesRelease service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArticlesReleaseClient interface {
	Create(ctx context.Context, in *ParamsCreateArticle, opts ...grpc.CallOption) (*ArticleReleaseActionResponse, error)
	Get(ctx context.Context, in *ParamsGetArticleRelease, opts ...grpc.CallOption) (*ArticleReleaseList, error)
	GetById(ctx context.Context, in *ArticlesReleaseId, opts ...grpc.CallOption) (*ArticleRelease, error)
	Update(ctx context.Context, in *ParamsCreateArticle, opts ...grpc.CallOption) (*ArticleReleaseActionResponse, error)
	Delete(ctx context.Context, in *ArticlesReleaseId, opts ...grpc.CallOption) (*ArticleReleaseActionResponse, error)
}

type articlesReleaseClient struct {
	cc *grpc.ClientConn
}

func NewArticlesReleaseClient(cc *grpc.ClientConn) ArticlesReleaseClient {
	return &articlesReleaseClient{cc}
}

func (c *articlesReleaseClient) Create(ctx context.Context, in *ParamsCreateArticle, opts ...grpc.CallOption) (*ArticleReleaseActionResponse, error) {
	out := new(ArticleReleaseActionResponse)
	err := c.cc.Invoke(ctx, "/release.ArticlesRelease/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesReleaseClient) Get(ctx context.Context, in *ParamsGetArticleRelease, opts ...grpc.CallOption) (*ArticleReleaseList, error) {
	out := new(ArticleReleaseList)
	err := c.cc.Invoke(ctx, "/release.ArticlesRelease/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesReleaseClient) GetById(ctx context.Context, in *ArticlesReleaseId, opts ...grpc.CallOption) (*ArticleRelease, error) {
	out := new(ArticleRelease)
	err := c.cc.Invoke(ctx, "/release.ArticlesRelease/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesReleaseClient) Update(ctx context.Context, in *ParamsCreateArticle, opts ...grpc.CallOption) (*ArticleReleaseActionResponse, error) {
	out := new(ArticleReleaseActionResponse)
	err := c.cc.Invoke(ctx, "/release.ArticlesRelease/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesReleaseClient) Delete(ctx context.Context, in *ArticlesReleaseId, opts ...grpc.CallOption) (*ArticleReleaseActionResponse, error) {
	out := new(ArticleReleaseActionResponse)
	err := c.cc.Invoke(ctx, "/release.ArticlesRelease/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticlesReleaseServer is the server API for ArticlesRelease service.
type ArticlesReleaseServer interface {
	Create(context.Context, *ParamsCreateArticle) (*ArticleReleaseActionResponse, error)
	Get(context.Context, *ParamsGetArticleRelease) (*ArticleReleaseList, error)
	GetById(context.Context, *ArticlesReleaseId) (*ArticleRelease, error)
	Update(context.Context, *ParamsCreateArticle) (*ArticleReleaseActionResponse, error)
	Delete(context.Context, *ArticlesReleaseId) (*ArticleReleaseActionResponse, error)
}

// UnimplementedArticlesReleaseServer can be embedded to have forward compatible implementations.
type UnimplementedArticlesReleaseServer struct {
}

func (*UnimplementedArticlesReleaseServer) Create(ctx context.Context, req *ParamsCreateArticle) (*ArticleReleaseActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedArticlesReleaseServer) Get(ctx context.Context, req *ParamsGetArticleRelease) (*ArticleReleaseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedArticlesReleaseServer) GetById(ctx context.Context, req *ArticlesReleaseId) (*ArticleRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (*UnimplementedArticlesReleaseServer) Update(ctx context.Context, req *ParamsCreateArticle) (*ArticleReleaseActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedArticlesReleaseServer) Delete(ctx context.Context, req *ArticlesReleaseId) (*ArticleReleaseActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterArticlesReleaseServer(s *grpc.Server, srv ArticlesReleaseServer) {
	s.RegisterService(&_ArticlesRelease_serviceDesc, srv)
}

func _ArticlesRelease_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsCreateArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesReleaseServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/release.ArticlesRelease/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesReleaseServer).Create(ctx, req.(*ParamsCreateArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesRelease_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsGetArticleRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesReleaseServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/release.ArticlesRelease/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesReleaseServer).Get(ctx, req.(*ParamsGetArticleRelease))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesRelease_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticlesReleaseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesReleaseServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/release.ArticlesRelease/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesReleaseServer).GetById(ctx, req.(*ArticlesReleaseId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesRelease_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsCreateArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesReleaseServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/release.ArticlesRelease/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesReleaseServer).Update(ctx, req.(*ParamsCreateArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesRelease_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticlesReleaseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesReleaseServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/release.ArticlesRelease/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesReleaseServer).Delete(ctx, req.(*ArticlesReleaseId))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArticlesRelease_serviceDesc = grpc.ServiceDesc{
	ServiceName: "release.ArticlesRelease",
	HandlerType: (*ArticlesReleaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ArticlesRelease_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ArticlesRelease_Get_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _ArticlesRelease_GetById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ArticlesRelease_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ArticlesRelease_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/internal/release_plan.proto",
}
