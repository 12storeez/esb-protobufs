syntax = "proto3";

option go_package = "go/logistics";

package logistics;

import "google/api/annotations.proto";

service WinnerService {
  rpc Calculate(CalculateRequest) returns (CalculateResponse) {
    option (google.api.http) = {
      post: "/api/v1/winner/calculate"
      body: "*"
    };
  }
}

message CalculateRequest {
  string    country_iso_code = 1;
  string    region_geo_id = 2;
  string    city_geo_id = 3;
  string    settlement_geo_id = 4;
  string    street_geo_id = 5;
  string    house_geo_id = 6;
  string    geo_id = 7;
  int32     cart_id = 8;
  repeated  CartPosition cart = 9;
}

message CartPosition {
  int32   category_id = 1;
  int32   quantity = 2;
  float   price = 3;
  bool    is_present = 4;
}

message CalculateResponse {
  repeated WinnerRestriction  restrictions = 1;
  repeated WinnerDeliveryType delivery_types = 2;
}

message WinnerRestriction {
  string      message = 1;
  WinnerPopup popup = 2;
}

message WinnerPopup {
  string title = 1;
  string text = 2;
  string button = 3;
}

message WinnerDeliveryType {
  string      delivery_type_name = 1;
  string      message = 2;
  float       delivery_price = 3;
  WinnerPopup popup = 4;
  repeated    WinnerPaymentMethod payment_methods = 5;
  repeated    WinnerDeliveryDates delivery_dates = 6;
  bool        is_restricted = 7;
  repeated    WinnerRestriction restrictions = 8;
  int32       from_days = 9;
  int32       to_days = 10;
  bool        is_delivery_use_only_working_days = 11;
}

message WinnerPaymentMethod {
  string  title_ru = 1;
  string  code = 2;
  bool    is_restricted = 3;
  string  message = 4;
}

message WinnerDeliveryDates {
  string    date = 1;
  string    title = 2;
  repeated  WinnerInterval intervals = 3;
}

message WinnerInterval {
  string title = 1;
  string time_from = 2;
  string time_to = 3;
  string code = 4;
}
