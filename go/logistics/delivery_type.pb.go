// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.9
// source: delivery_type.proto

package logistics

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeliveryTypeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeliveryTypeId) Reset() {
	*x = DeliveryTypeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryTypeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryTypeId) ProtoMessage() {}

func (x *DeliveryTypeId) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryTypeId.ProtoReflect.Descriptor instead.
func (*DeliveryTypeId) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{0}
}

func (x *DeliveryTypeId) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CreateDeliveryTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportCompanyModeId int32  `protobuf:"varint,1,opt,name=transport_company_mode_id,json=transportCompanyModeId,proto3" json:"transport_company_mode_id,omitempty"`
	ZoneGroupId            int32  `protobuf:"varint,2,opt,name=zone_group_id,json=zoneGroupId,proto3" json:"zone_group_id,omitempty"`
	Code                   string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Name                   string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateDeliveryTypeRequest) Reset() {
	*x = CreateDeliveryTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeliveryTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeliveryTypeRequest) ProtoMessage() {}

func (x *CreateDeliveryTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeliveryTypeRequest.ProtoReflect.Descriptor instead.
func (*CreateDeliveryTypeRequest) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDeliveryTypeRequest) GetTransportCompanyModeId() int32 {
	if x != nil {
		return x.TransportCompanyModeId
	}
	return 0
}

func (x *CreateDeliveryTypeRequest) GetZoneGroupId() int32 {
	if x != nil {
		return x.ZoneGroupId
	}
	return 0
}

func (x *CreateDeliveryTypeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateDeliveryTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeliveryTypeShort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsActive  bool   `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	CreatedAt string `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *DeliveryTypeShort) Reset() {
	*x = DeliveryTypeShort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryTypeShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryTypeShort) ProtoMessage() {}

func (x *DeliveryTypeShort) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryTypeShort.ProtoReflect.Descriptor instead.
func (*DeliveryTypeShort) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{2}
}

func (x *DeliveryTypeShort) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliveryTypeShort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeliveryTypeShort) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *DeliveryTypeShort) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DeliveryTypeShort) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type ListDeliveryTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Search string `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	Sort   string `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *ListDeliveryTypeRequest) Reset() {
	*x = ListDeliveryTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeliveryTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeliveryTypeRequest) ProtoMessage() {}

func (x *ListDeliveryTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeliveryTypeRequest.ProtoReflect.Descriptor instead.
func (*ListDeliveryTypeRequest) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{3}
}

func (x *ListDeliveryTypeRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListDeliveryTypeRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListDeliveryTypeRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListDeliveryTypeRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

type ListDeliveryTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*DeliveryTypeShort `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Total   int32                `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListDeliveryTypeResponse) Reset() {
	*x = ListDeliveryTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeliveryTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeliveryTypeResponse) ProtoMessage() {}

func (x *ListDeliveryTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeliveryTypeResponse.ProtoReflect.Descriptor instead.
func (*ListDeliveryTypeResponse) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{4}
}

func (x *ListDeliveryTypeResponse) GetResults() []*DeliveryTypeShort {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ListDeliveryTypeResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeliveryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                      int32                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TransportCompanyMode                    *TransportCompanyMode          `protobuf:"bytes,2,opt,name=transport_company_mode,json=transportCompanyMode,proto3" json:"transport_company_mode,omitempty"`
	ZoneGroup                               *ZoneGroup                     `protobuf:"bytes,3,opt,name=zone_group,json=zoneGroup,proto3" json:"zone_group,omitempty"`
	Name                                    string                         `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	DescriptionRu                           string                         `protobuf:"bytes,5,opt,name=description_ru,json=descriptionRu,proto3" json:"description_ru,omitempty"`
	Popup                                   *Popup                         `protobuf:"bytes,6,opt,name=popup,proto3" json:"popup,omitempty"`
	Code                                    string                         `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	DefaultDaysFrom                         int32                          `protobuf:"varint,8,opt,name=default_days_from,json=defaultDaysFrom,proto3" json:"default_days_from,omitempty"`
	DefaultDaysTo                           int32                          `protobuf:"varint,9,opt,name=default_days_to,json=defaultDaysTo,proto3" json:"default_days_to,omitempty"`
	DeliveryPrice                           float32                        `protobuf:"fixed32,10,opt,name=delivery_price,json=deliveryPrice,proto3" json:"delivery_price,omitempty"`
	DeliveryPriceBorder                     float32                        `protobuf:"fixed32,11,opt,name=delivery_price_border,json=deliveryPriceBorder,proto3" json:"delivery_price_border,omitempty"`
	DeliveryPriceAfterBorder                float32                        `protobuf:"fixed32,12,opt,name=delivery_price_after_border,json=deliveryPriceAfterBorder,proto3" json:"delivery_price_after_border,omitempty"`
	DeliveryMinDays                         int32                          `protobuf:"varint,13,opt,name=delivery_min_days,json=deliveryMinDays,proto3" json:"delivery_min_days,omitempty"`
	IsOnlyDaysAmount                        bool                           `protobuf:"varint,14,opt,name=is_only_days_amount,json=isOnlyDaysAmount,proto3" json:"is_only_days_amount,omitempty"`
	ConsolidationHours                      int32                          `protobuf:"varint,15,opt,name=consolidation_hours,json=consolidationHours,proto3" json:"consolidation_hours,omitempty"`
	GapHours                                int32                          `protobuf:"varint,16,opt,name=gap_hours,json=gapHours,proto3" json:"gap_hours,omitempty"`
	PriorityCoefficient                     float32                        `protobuf:"fixed32,17,opt,name=priority_coefficient,json=priorityCoefficient,proto3" json:"priority_coefficient,omitempty"`
	MaxDaysCoefficient                      float32                        `protobuf:"fixed32,18,opt,name=max_days_coefficient,json=maxDaysCoefficient,proto3" json:"max_days_coefficient,omitempty"`
	TariffCoefficient                       float32                        `protobuf:"fixed32,19,opt,name=tariff_coefficient,json=tariffCoefficient,proto3" json:"tariff_coefficient,omitempty"`
	WinnerPercent                           int32                          `protobuf:"varint,20,opt,name=winner_percent,json=winnerPercent,proto3" json:"winner_percent,omitempty"`
	MaxPrice                                int32                          `protobuf:"varint,21,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	RestrictionByPriceIsActive              bool                           `protobuf:"varint,22,opt,name=restriction_by_price_is_active,json=restrictionByPriceIsActive,proto3" json:"restriction_by_price_is_active,omitempty"`
	RestrictionByPriceMessage               *Message                       `protobuf:"bytes,23,opt,name=restriction_by_price_message,json=restrictionByPriceMessage,proto3" json:"restriction_by_price_message,omitempty"`
	RestrictionByPricePopup                 *Popup                         `protobuf:"bytes,24,opt,name=restriction_by_price_popup,json=restrictionByPricePopup,proto3" json:"restriction_by_price_popup,omitempty"`
	MaxQuantity                             int32                          `protobuf:"varint,25,opt,name=max_quantity,json=maxQuantity,proto3" json:"max_quantity,omitempty"`
	RestrictionByQuantityIsActive           bool                           `protobuf:"varint,26,opt,name=restriction_by_quantity_is_active,json=restrictionByQuantityIsActive,proto3" json:"restriction_by_quantity_is_active,omitempty"`
	RestrictionByQuantityMessage            *Message                       `protobuf:"bytes,27,opt,name=restriction_by_quantity_message,json=restrictionByQuantityMessage,proto3" json:"restriction_by_quantity_message,omitempty"`
	RestrictionByQuantityPopup              *Popup                         `protobuf:"bytes,28,opt,name=restriction_by_quantity_popup,json=restrictionByQuantityPopup,proto3" json:"restriction_by_quantity_popup,omitempty"`
	MaxQuantityPerArticle                   int32                          `protobuf:"varint,29,opt,name=max_quantity_per_article,json=maxQuantityPerArticle,proto3" json:"max_quantity_per_article,omitempty"`
	RestrictionByQuantityPerArticleIsActive bool                           `protobuf:"varint,30,opt,name=restriction_by_quantity_per_article_is_active,json=restrictionByQuantityPerArticleIsActive,proto3" json:"restriction_by_quantity_per_article_is_active,omitempty"`
	RestrictionByQuantityPerArticleMessage  *Message                       `protobuf:"bytes,31,opt,name=restriction_by_quantity_per_article_message,json=restrictionByQuantityPerArticleMessage,proto3" json:"restriction_by_quantity_per_article_message,omitempty"`
	RestrictionByQuantityPerArticlePopup    *Popup                         `protobuf:"bytes,32,opt,name=restriction_by_quantity_per_article_popup,json=restrictionByQuantityPerArticlePopup,proto3" json:"restriction_by_quantity_per_article_popup,omitempty"`
	IsVisibleWhileRestricted                bool                           `protobuf:"varint,33,opt,name=is_visible_while_restricted,json=isVisibleWhileRestricted,proto3" json:"is_visible_while_restricted,omitempty"`
	IsActive                                bool                           `protobuf:"varint,34,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	CreatedAt                               string                         `protobuf:"bytes,35,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                               string                         `protobuf:"bytes,36,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	PaymentMethodToDeliveryType             []*PaymentMethodToDeliveryType `protobuf:"bytes,37,rep,name=payment_method_to_delivery_type,json=paymentMethodToDeliveryType,proto3" json:"payment_method_to_delivery_type,omitempty"`
	CategoryDeliveryTypeRestrictions        []*CategoryRestriction         `protobuf:"bytes,38,rep,name=category_delivery_type_restrictions,json=categoryDeliveryTypeRestrictions,proto3" json:"category_delivery_type_restrictions,omitempty"`
	Intervals                               []*Interval                    `protobuf:"bytes,39,rep,name=intervals,proto3" json:"intervals,omitempty"`
}

func (x *DeliveryType) Reset() {
	*x = DeliveryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryType) ProtoMessage() {}

func (x *DeliveryType) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryType.ProtoReflect.Descriptor instead.
func (*DeliveryType) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{5}
}

func (x *DeliveryType) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliveryType) GetTransportCompanyMode() *TransportCompanyMode {
	if x != nil {
		return x.TransportCompanyMode
	}
	return nil
}

func (x *DeliveryType) GetZoneGroup() *ZoneGroup {
	if x != nil {
		return x.ZoneGroup
	}
	return nil
}

func (x *DeliveryType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeliveryType) GetDescriptionRu() string {
	if x != nil {
		return x.DescriptionRu
	}
	return ""
}

func (x *DeliveryType) GetPopup() *Popup {
	if x != nil {
		return x.Popup
	}
	return nil
}

func (x *DeliveryType) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DeliveryType) GetDefaultDaysFrom() int32 {
	if x != nil {
		return x.DefaultDaysFrom
	}
	return 0
}

func (x *DeliveryType) GetDefaultDaysTo() int32 {
	if x != nil {
		return x.DefaultDaysTo
	}
	return 0
}

func (x *DeliveryType) GetDeliveryPrice() float32 {
	if x != nil {
		return x.DeliveryPrice
	}
	return 0
}

func (x *DeliveryType) GetDeliveryPriceBorder() float32 {
	if x != nil {
		return x.DeliveryPriceBorder
	}
	return 0
}

func (x *DeliveryType) GetDeliveryPriceAfterBorder() float32 {
	if x != nil {
		return x.DeliveryPriceAfterBorder
	}
	return 0
}

func (x *DeliveryType) GetDeliveryMinDays() int32 {
	if x != nil {
		return x.DeliveryMinDays
	}
	return 0
}

func (x *DeliveryType) GetIsOnlyDaysAmount() bool {
	if x != nil {
		return x.IsOnlyDaysAmount
	}
	return false
}

func (x *DeliveryType) GetConsolidationHours() int32 {
	if x != nil {
		return x.ConsolidationHours
	}
	return 0
}

func (x *DeliveryType) GetGapHours() int32 {
	if x != nil {
		return x.GapHours
	}
	return 0
}

func (x *DeliveryType) GetPriorityCoefficient() float32 {
	if x != nil {
		return x.PriorityCoefficient
	}
	return 0
}

func (x *DeliveryType) GetMaxDaysCoefficient() float32 {
	if x != nil {
		return x.MaxDaysCoefficient
	}
	return 0
}

func (x *DeliveryType) GetTariffCoefficient() float32 {
	if x != nil {
		return x.TariffCoefficient
	}
	return 0
}

func (x *DeliveryType) GetWinnerPercent() int32 {
	if x != nil {
		return x.WinnerPercent
	}
	return 0
}

func (x *DeliveryType) GetMaxPrice() int32 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *DeliveryType) GetRestrictionByPriceIsActive() bool {
	if x != nil {
		return x.RestrictionByPriceIsActive
	}
	return false
}

func (x *DeliveryType) GetRestrictionByPriceMessage() *Message {
	if x != nil {
		return x.RestrictionByPriceMessage
	}
	return nil
}

func (x *DeliveryType) GetRestrictionByPricePopup() *Popup {
	if x != nil {
		return x.RestrictionByPricePopup
	}
	return nil
}

func (x *DeliveryType) GetMaxQuantity() int32 {
	if x != nil {
		return x.MaxQuantity
	}
	return 0
}

func (x *DeliveryType) GetRestrictionByQuantityIsActive() bool {
	if x != nil {
		return x.RestrictionByQuantityIsActive
	}
	return false
}

func (x *DeliveryType) GetRestrictionByQuantityMessage() *Message {
	if x != nil {
		return x.RestrictionByQuantityMessage
	}
	return nil
}

func (x *DeliveryType) GetRestrictionByQuantityPopup() *Popup {
	if x != nil {
		return x.RestrictionByQuantityPopup
	}
	return nil
}

func (x *DeliveryType) GetMaxQuantityPerArticle() int32 {
	if x != nil {
		return x.MaxQuantityPerArticle
	}
	return 0
}

func (x *DeliveryType) GetRestrictionByQuantityPerArticleIsActive() bool {
	if x != nil {
		return x.RestrictionByQuantityPerArticleIsActive
	}
	return false
}

func (x *DeliveryType) GetRestrictionByQuantityPerArticleMessage() *Message {
	if x != nil {
		return x.RestrictionByQuantityPerArticleMessage
	}
	return nil
}

func (x *DeliveryType) GetRestrictionByQuantityPerArticlePopup() *Popup {
	if x != nil {
		return x.RestrictionByQuantityPerArticlePopup
	}
	return nil
}

func (x *DeliveryType) GetIsVisibleWhileRestricted() bool {
	if x != nil {
		return x.IsVisibleWhileRestricted
	}
	return false
}

func (x *DeliveryType) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *DeliveryType) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DeliveryType) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *DeliveryType) GetPaymentMethodToDeliveryType() []*PaymentMethodToDeliveryType {
	if x != nil {
		return x.PaymentMethodToDeliveryType
	}
	return nil
}

func (x *DeliveryType) GetCategoryDeliveryTypeRestrictions() []*CategoryRestriction {
	if x != nil {
		return x.CategoryDeliveryTypeRestrictions
	}
	return nil
}

func (x *DeliveryType) GetIntervals() []*Interval {
	if x != nil {
		return x.Intervals
	}
	return nil
}

type CategoryRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Category  *Category `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Message   *Message  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Popup     *Popup    `protobuf:"bytes,4,opt,name=popup,proto3" json:"popup,omitempty"`
	IsActive  bool      `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	CreatedAt string    `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string    `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *CategoryRestriction) Reset() {
	*x = CategoryRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryRestriction) ProtoMessage() {}

func (x *CategoryRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryRestriction.ProtoReflect.Descriptor instead.
func (*CategoryRestriction) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{6}
}

func (x *CategoryRestriction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryRestriction) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *CategoryRestriction) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CategoryRestriction) GetPopup() *Popup {
	if x != nil {
		return x.Popup
	}
	return nil
}

func (x *CategoryRestriction) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *CategoryRestriction) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CategoryRestriction) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type StorePickup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Store           *Store `protobuf:"bytes,2,opt,name=store,proto3" json:"store,omitempty"`
	MaxCells        int32  `protobuf:"varint,3,opt,name=max_cells,json=maxCells,proto3" json:"max_cells,omitempty"`
	BusyCells       int32  `protobuf:"varint,4,opt,name=busy_cells,json=busyCells,proto3" json:"busy_cells,omitempty"`
	FreeCells       int32  `protobuf:"varint,5,opt,name=free_cells,json=freeCells,proto3" json:"free_cells,omitempty"`
	IsActive        bool   `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	IsActiveByCells bool   `protobuf:"varint,7,opt,name=is_active_by_cells,json=isActiveByCells,proto3" json:"is_active_by_cells,omitempty"`
	CreatedAt       string `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       string `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *StorePickup) Reset() {
	*x = StorePickup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorePickup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorePickup) ProtoMessage() {}

func (x *StorePickup) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorePickup.ProtoReflect.Descriptor instead.
func (*StorePickup) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{7}
}

func (x *StorePickup) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StorePickup) GetStore() *Store {
	if x != nil {
		return x.Store
	}
	return nil
}

func (x *StorePickup) GetMaxCells() int32 {
	if x != nil {
		return x.MaxCells
	}
	return 0
}

func (x *StorePickup) GetBusyCells() int32 {
	if x != nil {
		return x.BusyCells
	}
	return 0
}

func (x *StorePickup) GetFreeCells() int32 {
	if x != nil {
		return x.FreeCells
	}
	return 0
}

func (x *StorePickup) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *StorePickup) GetIsActiveByCells() bool {
	if x != nil {
		return x.IsActiveByCells
	}
	return false
}

func (x *StorePickup) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *StorePickup) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type PaymentMethodToDeliveryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentMethod                     *PaymentMethod                      `protobuf:"bytes,1,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	Message                           *Message                            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	MaxPrice                          int32                               `protobuf:"varint,3,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	IsVisibleWhileRestricted          bool                                `protobuf:"varint,4,opt,name=is_visible_while_restricted,json=isVisibleWhileRestricted,proto3" json:"is_visible_while_restricted,omitempty"`
	PaymentMethodCategoryRestrictions []*PaymentMethodCategoryRestriction `protobuf:"bytes,5,rep,name=payment_method_category_restrictions,json=paymentMethodCategoryRestrictions,proto3" json:"payment_method_category_restrictions,omitempty"`
}

func (x *PaymentMethodToDeliveryType) Reset() {
	*x = PaymentMethodToDeliveryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethodToDeliveryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethodToDeliveryType) ProtoMessage() {}

func (x *PaymentMethodToDeliveryType) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethodToDeliveryType.ProtoReflect.Descriptor instead.
func (*PaymentMethodToDeliveryType) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{8}
}

func (x *PaymentMethodToDeliveryType) GetPaymentMethod() *PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *PaymentMethodToDeliveryType) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PaymentMethodToDeliveryType) GetMaxPrice() int32 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *PaymentMethodToDeliveryType) GetIsVisibleWhileRestricted() bool {
	if x != nil {
		return x.IsVisibleWhileRestricted
	}
	return false
}

func (x *PaymentMethodToDeliveryType) GetPaymentMethodCategoryRestrictions() []*PaymentMethodCategoryRestriction {
	if x != nil {
		return x.PaymentMethodCategoryRestrictions
	}
	return nil
}

type PaymentMethodCategoryRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category  *Category `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Message   *Message  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	IsActive  bool      `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	CreatedAt string    `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string    `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PaymentMethodCategoryRestriction) Reset() {
	*x = PaymentMethodCategoryRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethodCategoryRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethodCategoryRestriction) ProtoMessage() {}

func (x *PaymentMethodCategoryRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethodCategoryRestriction.ProtoReflect.Descriptor instead.
func (*PaymentMethodCategoryRestriction) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{9}
}

func (x *PaymentMethodCategoryRestriction) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *PaymentMethodCategoryRestriction) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PaymentMethodCategoryRestriction) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PaymentMethodCategoryRestriction) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *PaymentMethodCategoryRestriction) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type UpdateDeliveryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                       int32                                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TransportCompanyModeId                   int32                                `protobuf:"varint,2,opt,name=transport_company_mode_id,json=transportCompanyModeId,proto3" json:"transport_company_mode_id,omitempty"`
	ZoneGroupId                              int32                                `protobuf:"varint,3,opt,name=zone_group_id,json=zoneGroupId,proto3" json:"zone_group_id,omitempty"`
	Name                                     string                               `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	DescriptionRu                            string                               `protobuf:"bytes,5,opt,name=description_ru,json=descriptionRu,proto3" json:"description_ru,omitempty"`
	PopupId                                  int32                                `protobuf:"varint,6,opt,name=popup_id,json=popupId,proto3" json:"popup_id,omitempty"`
	Code                                     string                               `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	DefaultDaysFrom                          int32                                `protobuf:"varint,8,opt,name=default_days_from,json=defaultDaysFrom,proto3" json:"default_days_from,omitempty"`
	DefaultDaysTo                            int32                                `protobuf:"varint,9,opt,name=default_days_to,json=defaultDaysTo,proto3" json:"default_days_to,omitempty"`
	DeliveryPrice                            float32                              `protobuf:"fixed32,10,opt,name=delivery_price,json=deliveryPrice,proto3" json:"delivery_price,omitempty"`
	DeliveryPriceBorder                      float32                              `protobuf:"fixed32,11,opt,name=delivery_price_border,json=deliveryPriceBorder,proto3" json:"delivery_price_border,omitempty"`
	DeliveryPriceAfterBorder                 float32                              `protobuf:"fixed32,12,opt,name=delivery_price_after_border,json=deliveryPriceAfterBorder,proto3" json:"delivery_price_after_border,omitempty"`
	DeliveryMinDays                          int32                                `protobuf:"varint,13,opt,name=delivery_min_days,json=deliveryMinDays,proto3" json:"delivery_min_days,omitempty"`
	IsOnlyDaysAmount                         bool                                 `protobuf:"varint,14,opt,name=is_only_days_amount,json=isOnlyDaysAmount,proto3" json:"is_only_days_amount,omitempty"`
	ConsolidationHours                       int32                                `protobuf:"varint,15,opt,name=consolidation_hours,json=consolidationHours,proto3" json:"consolidation_hours,omitempty"`
	GapHours                                 int32                                `protobuf:"varint,16,opt,name=gap_hours,json=gapHours,proto3" json:"gap_hours,omitempty"`
	PriorityCoefficient                      float32                              `protobuf:"fixed32,17,opt,name=priority_coefficient,json=priorityCoefficient,proto3" json:"priority_coefficient,omitempty"`
	MaxDaysCoefficient                       float32                              `protobuf:"fixed32,18,opt,name=max_days_coefficient,json=maxDaysCoefficient,proto3" json:"max_days_coefficient,omitempty"`
	TariffCoefficient                        float32                              `protobuf:"fixed32,19,opt,name=tariff_coefficient,json=tariffCoefficient,proto3" json:"tariff_coefficient,omitempty"`
	WinnerPercent                            int32                                `protobuf:"varint,20,opt,name=winner_percent,json=winnerPercent,proto3" json:"winner_percent,omitempty"`
	MaxPrice                                 int32                                `protobuf:"varint,21,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	RestrictionByPriceIsActive               bool                                 `protobuf:"varint,22,opt,name=restriction_by_price_is_active,json=restrictionByPriceIsActive,proto3" json:"restriction_by_price_is_active,omitempty"`
	RestrictionByPriceMessageId              int32                                `protobuf:"varint,23,opt,name=restriction_by_price_message_id,json=restrictionByPriceMessageId,proto3" json:"restriction_by_price_message_id,omitempty"`
	RestrictionByPricePopupId                int32                                `protobuf:"varint,24,opt,name=restriction_by_price_popup_id,json=restrictionByPricePopupId,proto3" json:"restriction_by_price_popup_id,omitempty"`
	MaxQuantity                              int32                                `protobuf:"varint,25,opt,name=max_quantity,json=maxQuantity,proto3" json:"max_quantity,omitempty"`
	RestrictionByQuantityIsActive            bool                                 `protobuf:"varint,26,opt,name=restriction_by_quantity_is_active,json=restrictionByQuantityIsActive,proto3" json:"restriction_by_quantity_is_active,omitempty"`
	RestrictionByQuantityMessageId           int32                                `protobuf:"varint,27,opt,name=restriction_by_quantity_message_id,json=restrictionByQuantityMessageId,proto3" json:"restriction_by_quantity_message_id,omitempty"`
	RestrictionByQuantityPopupId             int32                                `protobuf:"varint,28,opt,name=restriction_by_quantity_popup_id,json=restrictionByQuantityPopupId,proto3" json:"restriction_by_quantity_popup_id,omitempty"`
	MaxQuantityPerArticle                    int32                                `protobuf:"varint,29,opt,name=max_quantity_per_article,json=maxQuantityPerArticle,proto3" json:"max_quantity_per_article,omitempty"`
	RestrictionByQuantityPerArticleIsActive  bool                                 `protobuf:"varint,30,opt,name=restriction_by_quantity_per_article_is_active,json=restrictionByQuantityPerArticleIsActive,proto3" json:"restriction_by_quantity_per_article_is_active,omitempty"`
	RestrictionByQuantityPerArticleMessageId int32                                `protobuf:"varint,31,opt,name=restriction_by_quantity_per_article_message_id,json=restrictionByQuantityPerArticleMessageId,proto3" json:"restriction_by_quantity_per_article_message_id,omitempty"`
	RestrictionByQuantityPerArticlePopupId   int32                                `protobuf:"varint,32,opt,name=restriction_by_quantity_per_article_popup_id,json=restrictionByQuantityPerArticlePopupId,proto3" json:"restriction_by_quantity_per_article_popup_id,omitempty"`
	IsVisibleWhileRestricted                 bool                                 `protobuf:"varint,33,opt,name=is_visible_while_restricted,json=isVisibleWhileRestricted,proto3" json:"is_visible_while_restricted,omitempty"`
	IsActive                                 bool                                 `protobuf:"varint,34,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	PaymentMethodToDeliveryType              []*UpdatePaymentMethodToDeliveryType `protobuf:"bytes,35,rep,name=payment_method_to_delivery_type,json=paymentMethodToDeliveryType,proto3" json:"payment_method_to_delivery_type,omitempty"`
	CategoryDeliveryTypeRestrictions         []*UpdateCategoryRestriction         `protobuf:"bytes,36,rep,name=category_delivery_type_restrictions,json=categoryDeliveryTypeRestrictions,proto3" json:"category_delivery_type_restrictions,omitempty"`
	Intervals                                []*Interval                          `protobuf:"bytes,37,rep,name=intervals,proto3" json:"intervals,omitempty"`
}

func (x *UpdateDeliveryType) Reset() {
	*x = UpdateDeliveryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeliveryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeliveryType) ProtoMessage() {}

func (x *UpdateDeliveryType) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeliveryType.ProtoReflect.Descriptor instead.
func (*UpdateDeliveryType) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateDeliveryType) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateDeliveryType) GetTransportCompanyModeId() int32 {
	if x != nil {
		return x.TransportCompanyModeId
	}
	return 0
}

func (x *UpdateDeliveryType) GetZoneGroupId() int32 {
	if x != nil {
		return x.ZoneGroupId
	}
	return 0
}

func (x *UpdateDeliveryType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDeliveryType) GetDescriptionRu() string {
	if x != nil {
		return x.DescriptionRu
	}
	return ""
}

func (x *UpdateDeliveryType) GetPopupId() int32 {
	if x != nil {
		return x.PopupId
	}
	return 0
}

func (x *UpdateDeliveryType) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateDeliveryType) GetDefaultDaysFrom() int32 {
	if x != nil {
		return x.DefaultDaysFrom
	}
	return 0
}

func (x *UpdateDeliveryType) GetDefaultDaysTo() int32 {
	if x != nil {
		return x.DefaultDaysTo
	}
	return 0
}

func (x *UpdateDeliveryType) GetDeliveryPrice() float32 {
	if x != nil {
		return x.DeliveryPrice
	}
	return 0
}

func (x *UpdateDeliveryType) GetDeliveryPriceBorder() float32 {
	if x != nil {
		return x.DeliveryPriceBorder
	}
	return 0
}

func (x *UpdateDeliveryType) GetDeliveryPriceAfterBorder() float32 {
	if x != nil {
		return x.DeliveryPriceAfterBorder
	}
	return 0
}

func (x *UpdateDeliveryType) GetDeliveryMinDays() int32 {
	if x != nil {
		return x.DeliveryMinDays
	}
	return 0
}

func (x *UpdateDeliveryType) GetIsOnlyDaysAmount() bool {
	if x != nil {
		return x.IsOnlyDaysAmount
	}
	return false
}

func (x *UpdateDeliveryType) GetConsolidationHours() int32 {
	if x != nil {
		return x.ConsolidationHours
	}
	return 0
}

func (x *UpdateDeliveryType) GetGapHours() int32 {
	if x != nil {
		return x.GapHours
	}
	return 0
}

func (x *UpdateDeliveryType) GetPriorityCoefficient() float32 {
	if x != nil {
		return x.PriorityCoefficient
	}
	return 0
}

func (x *UpdateDeliveryType) GetMaxDaysCoefficient() float32 {
	if x != nil {
		return x.MaxDaysCoefficient
	}
	return 0
}

func (x *UpdateDeliveryType) GetTariffCoefficient() float32 {
	if x != nil {
		return x.TariffCoefficient
	}
	return 0
}

func (x *UpdateDeliveryType) GetWinnerPercent() int32 {
	if x != nil {
		return x.WinnerPercent
	}
	return 0
}

func (x *UpdateDeliveryType) GetMaxPrice() int32 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *UpdateDeliveryType) GetRestrictionByPriceIsActive() bool {
	if x != nil {
		return x.RestrictionByPriceIsActive
	}
	return false
}

func (x *UpdateDeliveryType) GetRestrictionByPriceMessageId() int32 {
	if x != nil {
		return x.RestrictionByPriceMessageId
	}
	return 0
}

func (x *UpdateDeliveryType) GetRestrictionByPricePopupId() int32 {
	if x != nil {
		return x.RestrictionByPricePopupId
	}
	return 0
}

func (x *UpdateDeliveryType) GetMaxQuantity() int32 {
	if x != nil {
		return x.MaxQuantity
	}
	return 0
}

func (x *UpdateDeliveryType) GetRestrictionByQuantityIsActive() bool {
	if x != nil {
		return x.RestrictionByQuantityIsActive
	}
	return false
}

func (x *UpdateDeliveryType) GetRestrictionByQuantityMessageId() int32 {
	if x != nil {
		return x.RestrictionByQuantityMessageId
	}
	return 0
}

func (x *UpdateDeliveryType) GetRestrictionByQuantityPopupId() int32 {
	if x != nil {
		return x.RestrictionByQuantityPopupId
	}
	return 0
}

func (x *UpdateDeliveryType) GetMaxQuantityPerArticle() int32 {
	if x != nil {
		return x.MaxQuantityPerArticle
	}
	return 0
}

func (x *UpdateDeliveryType) GetRestrictionByQuantityPerArticleIsActive() bool {
	if x != nil {
		return x.RestrictionByQuantityPerArticleIsActive
	}
	return false
}

func (x *UpdateDeliveryType) GetRestrictionByQuantityPerArticleMessageId() int32 {
	if x != nil {
		return x.RestrictionByQuantityPerArticleMessageId
	}
	return 0
}

func (x *UpdateDeliveryType) GetRestrictionByQuantityPerArticlePopupId() int32 {
	if x != nil {
		return x.RestrictionByQuantityPerArticlePopupId
	}
	return 0
}

func (x *UpdateDeliveryType) GetIsVisibleWhileRestricted() bool {
	if x != nil {
		return x.IsVisibleWhileRestricted
	}
	return false
}

func (x *UpdateDeliveryType) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *UpdateDeliveryType) GetPaymentMethodToDeliveryType() []*UpdatePaymentMethodToDeliveryType {
	if x != nil {
		return x.PaymentMethodToDeliveryType
	}
	return nil
}

func (x *UpdateDeliveryType) GetCategoryDeliveryTypeRestrictions() []*UpdateCategoryRestriction {
	if x != nil {
		return x.CategoryDeliveryTypeRestrictions
	}
	return nil
}

func (x *UpdateDeliveryType) GetIntervals() []*Interval {
	if x != nil {
		return x.Intervals
	}
	return nil
}

type UpdatePaymentMethodToDeliveryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentMethodId                   int32                                     `protobuf:"varint,1,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty"`
	MessageId                         int32                                     `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	MaxPrice                          int32                                     `protobuf:"varint,3,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	IsVisibleWhileRestricted          bool                                      `protobuf:"varint,4,opt,name=is_visible_while_restricted,json=isVisibleWhileRestricted,proto3" json:"is_visible_while_restricted,omitempty"`
	PaymentMethodCategoryRestrictions []*UpdatePaymentMethodCategoryRestriction `protobuf:"bytes,5,rep,name=payment_method_category_restrictions,json=paymentMethodCategoryRestrictions,proto3" json:"payment_method_category_restrictions,omitempty"`
}

func (x *UpdatePaymentMethodToDeliveryType) Reset() {
	*x = UpdatePaymentMethodToDeliveryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePaymentMethodToDeliveryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePaymentMethodToDeliveryType) ProtoMessage() {}

func (x *UpdatePaymentMethodToDeliveryType) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePaymentMethodToDeliveryType.ProtoReflect.Descriptor instead.
func (*UpdatePaymentMethodToDeliveryType) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{11}
}

func (x *UpdatePaymentMethodToDeliveryType) GetPaymentMethodId() int32 {
	if x != nil {
		return x.PaymentMethodId
	}
	return 0
}

func (x *UpdatePaymentMethodToDeliveryType) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *UpdatePaymentMethodToDeliveryType) GetMaxPrice() int32 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *UpdatePaymentMethodToDeliveryType) GetIsVisibleWhileRestricted() bool {
	if x != nil {
		return x.IsVisibleWhileRestricted
	}
	return false
}

func (x *UpdatePaymentMethodToDeliveryType) GetPaymentMethodCategoryRestrictions() []*UpdatePaymentMethodCategoryRestriction {
	if x != nil {
		return x.PaymentMethodCategoryRestrictions
	}
	return nil
}

type UpdatePaymentMethodCategoryRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId int32 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	MessageId  int32 `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	IsActive   bool  `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *UpdatePaymentMethodCategoryRestriction) Reset() {
	*x = UpdatePaymentMethodCategoryRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePaymentMethodCategoryRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePaymentMethodCategoryRestriction) ProtoMessage() {}

func (x *UpdatePaymentMethodCategoryRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePaymentMethodCategoryRestriction.ProtoReflect.Descriptor instead.
func (*UpdatePaymentMethodCategoryRestriction) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{12}
}

func (x *UpdatePaymentMethodCategoryRestriction) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *UpdatePaymentMethodCategoryRestriction) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *UpdatePaymentMethodCategoryRestriction) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type UpdateCategoryRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId int32 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	MessageId  int32 `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	PopupId    int32 `protobuf:"varint,3,opt,name=popup_id,json=popupId,proto3" json:"popup_id,omitempty"`
	IsActive   bool  `protobuf:"varint,4,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *UpdateCategoryRestriction) Reset() {
	*x = UpdateCategoryRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCategoryRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCategoryRestriction) ProtoMessage() {}

func (x *UpdateCategoryRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCategoryRestriction.ProtoReflect.Descriptor instead.
func (*UpdateCategoryRestriction) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateCategoryRestriction) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *UpdateCategoryRestriction) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *UpdateCategoryRestriction) GetPopupId() int32 {
	if x != nil {
		return x.PopupId
	}
	return 0
}

func (x *UpdateCategoryRestriction) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type SuggestDeliveryTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32               `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Search string              `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"`
	Filter *FilterDeliveryType `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *SuggestDeliveryTypeRequest) Reset() {
	*x = SuggestDeliveryTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestDeliveryTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestDeliveryTypeRequest) ProtoMessage() {}

func (x *SuggestDeliveryTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestDeliveryTypeRequest.ProtoReflect.Descriptor instead.
func (*SuggestDeliveryTypeRequest) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{14}
}

func (x *SuggestDeliveryTypeRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SuggestDeliveryTypeRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *SuggestDeliveryTypeRequest) GetFilter() *FilterDeliveryType {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SuggestDeliveryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsActive bool   `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *SuggestDeliveryType) Reset() {
	*x = SuggestDeliveryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestDeliveryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestDeliveryType) ProtoMessage() {}

func (x *SuggestDeliveryType) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestDeliveryType.ProtoReflect.Descriptor instead.
func (*SuggestDeliveryType) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{15}
}

func (x *SuggestDeliveryType) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SuggestDeliveryType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SuggestDeliveryType) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type SuggestDeliveryTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SuggestDeliveryType `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Total   int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SuggestDeliveryTypeResponse) Reset() {
	*x = SuggestDeliveryTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestDeliveryTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestDeliveryTypeResponse) ProtoMessage() {}

func (x *SuggestDeliveryTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestDeliveryTypeResponse.ProtoReflect.Descriptor instead.
func (*SuggestDeliveryTypeResponse) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{16}
}

func (x *SuggestDeliveryTypeResponse) GetResults() []*SuggestDeliveryType {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SuggestDeliveryTypeResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FilterDeliveryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsStorePickup bool `protobuf:"varint,1,opt,name=is_store_pickup,json=isStorePickup,proto3" json:"is_store_pickup,omitempty"`
}

func (x *FilterDeliveryType) Reset() {
	*x = FilterDeliveryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delivery_type_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterDeliveryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterDeliveryType) ProtoMessage() {}

func (x *FilterDeliveryType) ProtoReflect() protoreflect.Message {
	mi := &file_delivery_type_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterDeliveryType.ProtoReflect.Descriptor instead.
func (*FilterDeliveryType) Descriptor() ([]byte, []int) {
	return file_delivery_type_proto_rawDescGZIP(), []int{17}
}

func (x *FilterDeliveryType) GetIsStorePickup() bool {
	if x != nil {
		return x.IsStorePickup
	}
	return false
}

var File_delivery_type_proto protoreflect.FileDescriptor

var file_delivery_type_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x70, 0x6f, 0x70, 0x75,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x20, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa2, 0x01, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x7a, 0x6f,
	0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x92, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x73, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x68, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb4, 0x11, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a,
	0x0a, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x5a, 0x6f,
	0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x12, 0x26, 0x0a,
	0x05, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x05,
	0x70, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x79,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x79, 0x73, 0x54, 0x6f, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x44,
	0x61, 0x79, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x44, 0x61, 0x79, 0x73, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x70, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x70, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x12, 0x31, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x65,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f,
	0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f,
	0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x53, 0x0a, 0x1c,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x19, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x4d, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x17, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x21, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x59, 0x0a,
	0x1f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1c, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x70, 0x75,
	0x70, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x37, 0x0a,
	0x18, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x6f, 0x0a, 0x2b, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x26, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x29, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x70, 0x75, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x24, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x70,
	0x75, 0x70, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x6c, 0x0a, 0x1f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54,
	0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1b, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x6f, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x23, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0x87, 0x02, 0x0a,
	0x13, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50,
	0x6f, 0x70, 0x75, 0x70, 0x52, 0x05, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa8, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x75, 0x73, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x62, 0x75, 0x73, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x72, 0x65, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x79, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xe6, 0x02, 0x0a, 0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x1b, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x7c, 0x0a, 0x24,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x21, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x20, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfa, 0x0f, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x7a, 0x6f, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f,
	0x70, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6f,
	0x70, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x79,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x79, 0x73, 0x54, 0x6f, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x44,
	0x61, 0x79, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x44, 0x61, 0x79, 0x73, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x70, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x70, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x12, 0x31, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x65,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f,
	0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f,
	0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x44, 0x0a, 0x1f,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x70,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x21, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x4a, 0x0a, 0x22, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a,
	0x20, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x70, 0x75, 0x70, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x5e,
	0x0a, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x60,
	0x0a, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x28, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x5c, 0x0a, 0x2c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x68, 0x69,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x57, 0x68,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x72, 0x0a, 0x1f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x1b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x54, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x73,
	0x0a, 0x23, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0xcf, 0x02, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x6f,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x24, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x21, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x26, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x22, 0x93, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x13, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x22, 0x6d, 0x0a, 0x1b, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x3c, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x32,
	0x9f, 0x05, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x22, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6e, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a,
	0x22, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x19,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x1a, 0x17, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5f, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x19, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x67, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x1a, 0x17, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x3a, 0x01, 0x2a, 0x32, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x7f, 0x0a, 0x07, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x42, 0x0e, 0x5a, 0x0c, 0x67, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_delivery_type_proto_rawDescOnce sync.Once
	file_delivery_type_proto_rawDescData = file_delivery_type_proto_rawDesc
)

func file_delivery_type_proto_rawDescGZIP() []byte {
	file_delivery_type_proto_rawDescOnce.Do(func() {
		file_delivery_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_delivery_type_proto_rawDescData)
	})
	return file_delivery_type_proto_rawDescData
}

var file_delivery_type_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_delivery_type_proto_goTypes = []interface{}{
	(*DeliveryTypeId)(nil),                         // 0: logistics.DeliveryTypeId
	(*CreateDeliveryTypeRequest)(nil),              // 1: logistics.CreateDeliveryTypeRequest
	(*DeliveryTypeShort)(nil),                      // 2: logistics.DeliveryTypeShort
	(*ListDeliveryTypeRequest)(nil),                // 3: logistics.ListDeliveryTypeRequest
	(*ListDeliveryTypeResponse)(nil),               // 4: logistics.ListDeliveryTypeResponse
	(*DeliveryType)(nil),                           // 5: logistics.DeliveryType
	(*CategoryRestriction)(nil),                    // 6: logistics.CategoryRestriction
	(*StorePickup)(nil),                            // 7: logistics.StorePickup
	(*PaymentMethodToDeliveryType)(nil),            // 8: logistics.PaymentMethodToDeliveryType
	(*PaymentMethodCategoryRestriction)(nil),       // 9: logistics.PaymentMethodCategoryRestriction
	(*UpdateDeliveryType)(nil),                     // 10: logistics.UpdateDeliveryType
	(*UpdatePaymentMethodToDeliveryType)(nil),      // 11: logistics.UpdatePaymentMethodToDeliveryType
	(*UpdatePaymentMethodCategoryRestriction)(nil), // 12: logistics.UpdatePaymentMethodCategoryRestriction
	(*UpdateCategoryRestriction)(nil),              // 13: logistics.UpdateCategoryRestriction
	(*SuggestDeliveryTypeRequest)(nil),             // 14: logistics.SuggestDeliveryTypeRequest
	(*SuggestDeliveryType)(nil),                    // 15: logistics.SuggestDeliveryType
	(*SuggestDeliveryTypeResponse)(nil),            // 16: logistics.SuggestDeliveryTypeResponse
	(*FilterDeliveryType)(nil),                     // 17: logistics.FilterDeliveryType
	(*TransportCompanyMode)(nil),                   // 18: logistics.TransportCompanyMode
	(*ZoneGroup)(nil),                              // 19: logistics.ZoneGroup
	(*Popup)(nil),                                  // 20: logistics.Popup
	(*Message)(nil),                                // 21: logistics.Message
	(*Interval)(nil),                               // 22: logistics.Interval
	(*Category)(nil),                               // 23: logistics.Category
	(*Store)(nil),                                  // 24: logistics.Store
	(*PaymentMethod)(nil),                          // 25: logistics.PaymentMethod
	(*emptypb.Empty)(nil),                          // 26: google.protobuf.Empty
}
var file_delivery_type_proto_depIdxs = []int32{
	2,  // 0: logistics.ListDeliveryTypeResponse.results:type_name -> logistics.DeliveryTypeShort
	18, // 1: logistics.DeliveryType.transport_company_mode:type_name -> logistics.TransportCompanyMode
	19, // 2: logistics.DeliveryType.zone_group:type_name -> logistics.ZoneGroup
	20, // 3: logistics.DeliveryType.popup:type_name -> logistics.Popup
	21, // 4: logistics.DeliveryType.restriction_by_price_message:type_name -> logistics.Message
	20, // 5: logistics.DeliveryType.restriction_by_price_popup:type_name -> logistics.Popup
	21, // 6: logistics.DeliveryType.restriction_by_quantity_message:type_name -> logistics.Message
	20, // 7: logistics.DeliveryType.restriction_by_quantity_popup:type_name -> logistics.Popup
	21, // 8: logistics.DeliveryType.restriction_by_quantity_per_article_message:type_name -> logistics.Message
	20, // 9: logistics.DeliveryType.restriction_by_quantity_per_article_popup:type_name -> logistics.Popup
	8,  // 10: logistics.DeliveryType.payment_method_to_delivery_type:type_name -> logistics.PaymentMethodToDeliveryType
	6,  // 11: logistics.DeliveryType.category_delivery_type_restrictions:type_name -> logistics.CategoryRestriction
	22, // 12: logistics.DeliveryType.intervals:type_name -> logistics.Interval
	23, // 13: logistics.CategoryRestriction.category:type_name -> logistics.Category
	21, // 14: logistics.CategoryRestriction.message:type_name -> logistics.Message
	20, // 15: logistics.CategoryRestriction.popup:type_name -> logistics.Popup
	24, // 16: logistics.StorePickup.store:type_name -> logistics.Store
	25, // 17: logistics.PaymentMethodToDeliveryType.payment_method:type_name -> logistics.PaymentMethod
	21, // 18: logistics.PaymentMethodToDeliveryType.message:type_name -> logistics.Message
	9,  // 19: logistics.PaymentMethodToDeliveryType.payment_method_category_restrictions:type_name -> logistics.PaymentMethodCategoryRestriction
	23, // 20: logistics.PaymentMethodCategoryRestriction.category:type_name -> logistics.Category
	21, // 21: logistics.PaymentMethodCategoryRestriction.message:type_name -> logistics.Message
	11, // 22: logistics.UpdateDeliveryType.payment_method_to_delivery_type:type_name -> logistics.UpdatePaymentMethodToDeliveryType
	13, // 23: logistics.UpdateDeliveryType.category_delivery_type_restrictions:type_name -> logistics.UpdateCategoryRestriction
	22, // 24: logistics.UpdateDeliveryType.intervals:type_name -> logistics.Interval
	12, // 25: logistics.UpdatePaymentMethodToDeliveryType.payment_method_category_restrictions:type_name -> logistics.UpdatePaymentMethodCategoryRestriction
	17, // 26: logistics.SuggestDeliveryTypeRequest.filter:type_name -> logistics.FilterDeliveryType
	15, // 27: logistics.SuggestDeliveryTypeResponse.results:type_name -> logistics.SuggestDeliveryType
	3,  // 28: logistics.DeliveryTypeService.List:input_type -> logistics.ListDeliveryTypeRequest
	1,  // 29: logistics.DeliveryTypeService.Create:input_type -> logistics.CreateDeliveryTypeRequest
	0,  // 30: logistics.DeliveryTypeService.Get:input_type -> logistics.DeliveryTypeId
	0,  // 31: logistics.DeliveryTypeService.Delete:input_type -> logistics.DeliveryTypeId
	10, // 32: logistics.DeliveryTypeService.Update:input_type -> logistics.UpdateDeliveryType
	14, // 33: logistics.DeliveryTypeService.Suggest:input_type -> logistics.SuggestDeliveryTypeRequest
	4,  // 34: logistics.DeliveryTypeService.List:output_type -> logistics.ListDeliveryTypeResponse
	2,  // 35: logistics.DeliveryTypeService.Create:output_type -> logistics.DeliveryTypeShort
	5,  // 36: logistics.DeliveryTypeService.Get:output_type -> logistics.DeliveryType
	26, // 37: logistics.DeliveryTypeService.Delete:output_type -> google.protobuf.Empty
	5,  // 38: logistics.DeliveryTypeService.Update:output_type -> logistics.DeliveryType
	16, // 39: logistics.DeliveryTypeService.Suggest:output_type -> logistics.SuggestDeliveryTypeResponse
	34, // [34:40] is the sub-list for method output_type
	28, // [28:34] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_delivery_type_proto_init() }
func file_delivery_type_proto_init() {
	if File_delivery_type_proto != nil {
		return
	}
	file_message_proto_init()
	file_popup_proto_init()
	file_transport_company_mode_proto_init()
	file_zone_group_proto_init()
	file_category_proto_init()
	file_payment_method_proto_init()
	file_interval_proto_init()
	file_store_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_delivery_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryTypeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeliveryTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryTypeShort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeliveryTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeliveryTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorePickup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethodToDeliveryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethodCategoryRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeliveryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePaymentMethodToDeliveryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePaymentMethodCategoryRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCategoryRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestDeliveryTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestDeliveryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestDeliveryTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delivery_type_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterDeliveryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_delivery_type_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_delivery_type_proto_goTypes,
		DependencyIndexes: file_delivery_type_proto_depIdxs,
		MessageInfos:      file_delivery_type_proto_msgTypes,
	}.Build()
	File_delivery_type_proto = out.File
	file_delivery_type_proto_rawDesc = nil
	file_delivery_type_proto_goTypes = nil
	file_delivery_type_proto_depIdxs = nil
}
