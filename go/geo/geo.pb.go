// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.9
// source: proto/geo.proto

package geo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LocaleType int32

const (
	LocaleType_nil LocaleType = 0
	LocaleType_ru  LocaleType = 1
	LocaleType_en  LocaleType = 2
)

// Enum value maps for LocaleType.
var (
	LocaleType_name = map[int32]string{
		0: "nil",
		1: "ru",
		2: "en",
	}
	LocaleType_value = map[string]int32{
		"nil": 0,
		"ru":  1,
		"en":  2,
	}
)

func (x LocaleType) Enum() *LocaleType {
	p := new(LocaleType)
	*p = x
	return p
}

func (x LocaleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocaleType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_geo_proto_enumTypes[0].Descriptor()
}

func (LocaleType) Type() protoreflect.EnumType {
	return &file_proto_geo_proto_enumTypes[0]
}

func (x LocaleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocaleType.Descriptor instead.
func (LocaleType) EnumDescriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{0}
}

// Country ...
type SuggestCountryParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale LocaleType `protobuf:"varint,1,opt,name=locale,proto3,enum=geo.LocaleType" json:"locale,omitempty"`
	Search string     `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"`
	Limit  int32      `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32      `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *SuggestCountryParams) Reset() {
	*x = SuggestCountryParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestCountryParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestCountryParams) ProtoMessage() {}

func (x *SuggestCountryParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestCountryParams.ProtoReflect.Descriptor instead.
func (*SuggestCountryParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{0}
}

func (x *SuggestCountryParams) GetLocale() LocaleType {
	if x != nil {
		return x.Locale
	}
	return LocaleType_nil
}

func (x *SuggestCountryParams) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *SuggestCountryParams) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SuggestCountryParams) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type SuggestCountryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool              `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Total   int32             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Result  []*SuggestCountry `protobuf:"bytes,3,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *SuggestCountryResponse) Reset() {
	*x = SuggestCountryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestCountryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestCountryResponse) ProtoMessage() {}

func (x *SuggestCountryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestCountryResponse.ProtoReflect.Descriptor instead.
func (*SuggestCountryResponse) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{1}
}

func (x *SuggestCountryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SuggestCountryResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SuggestCountryResponse) GetResult() []*SuggestCountry {
	if x != nil {
		return x.Result
	}
	return nil
}

type SuggestCountry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Suggest  string `protobuf:"bytes,2,opt,name=suggest,proto3" json:"suggest,omitempty"`
	Title    string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle string `protobuf:"bytes,4,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	IsoCode  string `protobuf:"bytes,5,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Phone    *Phone `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *SuggestCountry) Reset() {
	*x = SuggestCountry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestCountry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestCountry) ProtoMessage() {}

func (x *SuggestCountry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestCountry.ProtoReflect.Descriptor instead.
func (*SuggestCountry) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{2}
}

func (x *SuggestCountry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SuggestCountry) GetSuggest() string {
	if x != nil {
		return x.Suggest
	}
	return ""
}

func (x *SuggestCountry) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SuggestCountry) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *SuggestCountry) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *SuggestCountry) GetPhone() *Phone {
	if x != nil {
		return x.Phone
	}
	return nil
}

type CountryDetailsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale  LocaleType `protobuf:"varint,1,opt,name=locale,proto3,enum=geo.LocaleType" json:"locale,omitempty"`
	IsoCode string     `protobuf:"bytes,2,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
}

func (x *CountryDetailsParams) Reset() {
	*x = CountryDetailsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryDetailsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryDetailsParams) ProtoMessage() {}

func (x *CountryDetailsParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryDetailsParams.ProtoReflect.Descriptor instead.
func (*CountryDetailsParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{3}
}

func (x *CountryDetailsParams) GetLocale() LocaleType {
	if x != nil {
		return x.Locale
	}
	return LocaleType_nil
}

func (x *CountryDetailsParams) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

type Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FullTitle        string          `protobuf:"bytes,2,opt,name=full_title,json=fullTitle,proto3" json:"full_title,omitempty"`
	Type             string          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Country          *CountryDetails `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	PostalCode       string          `protobuf:"bytes,5,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	PostalCodeFormat string          `protobuf:"bytes,6,opt,name=postal_code_format,json=postalCodeFormat,proto3" json:"postal_code_format,omitempty"`
	CurrencyCode     string          `protobuf:"bytes,7,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	Phone            *Phone          `protobuf:"bytes,8,opt,name=phone,proto3" json:"phone,omitempty"`
	Location         *Location       `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *Country) Reset() {
	*x = Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{4}
}

func (x *Country) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Country) GetFullTitle() string {
	if x != nil {
		return x.FullTitle
	}
	return ""
}

func (x *Country) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Country) GetCountry() *CountryDetails {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *Country) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Country) GetPostalCodeFormat() string {
	if x != nil {
		return x.PostalCodeFormat
	}
	return ""
}

func (x *Country) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Country) GetPhone() *Phone {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *Country) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type Phone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix      int32    `protobuf:"varint,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Masks       []string `protobuf:"bytes,2,rep,name=masks,proto3" json:"masks,omitempty"`
	PrimaryMask string   `protobuf:"bytes,3,opt,name=primary_mask,json=primaryMask,proto3" json:"primary_mask,omitempty"`
}

func (x *Phone) Reset() {
	*x = Phone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Phone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Phone) ProtoMessage() {}

func (x *Phone) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Phone.ProtoReflect.Descriptor instead.
func (*Phone) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{5}
}

func (x *Phone) GetPrefix() int32 {
	if x != nil {
		return x.Prefix
	}
	return 0
}

func (x *Phone) GetMasks() []string {
	if x != nil {
		return x.Masks
	}
	return nil
}

func (x *Phone) GetPrimaryMask() string {
	if x != nil {
		return x.PrimaryMask
	}
	return ""
}

// City ...
type SuggestCityParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale         LocaleType `protobuf:"varint,1,opt,name=locale,proto3,enum=geo.LocaleType" json:"locale,omitempty"`
	CountryIsoCode string     `protobuf:"bytes,2,opt,name=country_iso_code,json=countryIsoCode,proto3" json:"country_iso_code,omitempty"`
	Search         string     `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	Limit          int32      `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32      `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Ip             string     `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *SuggestCityParams) Reset() {
	*x = SuggestCityParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestCityParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestCityParams) ProtoMessage() {}

func (x *SuggestCityParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestCityParams.ProtoReflect.Descriptor instead.
func (*SuggestCityParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{6}
}

func (x *SuggestCityParams) GetLocale() LocaleType {
	if x != nil {
		return x.Locale
	}
	return LocaleType_nil
}

func (x *SuggestCityParams) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *SuggestCityParams) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *SuggestCityParams) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SuggestCityParams) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SuggestCityParams) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type SuggestCityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool           `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Total   int32          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Result  []*SuggestCity `protobuf:"bytes,3,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *SuggestCityResponse) Reset() {
	*x = SuggestCityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestCityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestCityResponse) ProtoMessage() {}

func (x *SuggestCityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestCityResponse.ProtoReflect.Descriptor instead.
func (*SuggestCityResponse) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{7}
}

func (x *SuggestCityResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SuggestCityResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SuggestCityResponse) GetResult() []*SuggestCity {
	if x != nil {
		return x.Result
	}
	return nil
}

type SuggestCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Suggest  string `protobuf:"bytes,2,opt,name=suggest,proto3" json:"suggest,omitempty"`
	Title    string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle string `protobuf:"bytes,4,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
}

func (x *SuggestCity) Reset() {
	*x = SuggestCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestCity) ProtoMessage() {}

func (x *SuggestCity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestCity.ProtoReflect.Descriptor instead.
func (*SuggestCity) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{8}
}

func (x *SuggestCity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SuggestCity) GetSuggest() string {
	if x != nil {
		return x.Suggest
	}
	return ""
}

func (x *SuggestCity) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SuggestCity) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

type CityDetailsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale         LocaleType `protobuf:"varint,1,opt,name=locale,proto3,enum=geo.LocaleType" json:"locale,omitempty"`
	CountryIsoCode string     `protobuf:"bytes,2,opt,name=country_iso_code,json=countryIsoCode,proto3" json:"country_iso_code,omitempty"`
	// для России передавать полученный suggest из SuggestCity. Метод использует нормализацию Dadata
	// для остальных передавать id
	Query string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *CityDetailsParams) Reset() {
	*x = CityDetailsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityDetailsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityDetailsParams) ProtoMessage() {}

func (x *CityDetailsParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityDetailsParams.ProtoReflect.Descriptor instead.
func (*CityDetailsParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{9}
}

func (x *CityDetailsParams) GetLocale() LocaleType {
	if x != nil {
		return x.Locale
	}
	return LocaleType_nil
}

func (x *CityDetailsParams) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *CityDetailsParams) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type CityDetailsByGeoIDParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale         LocaleType `protobuf:"varint,1,opt,name=locale,proto3,enum=geo.LocaleType" json:"locale,omitempty"`
	CountryIsoCode string     `protobuf:"bytes,2,opt,name=country_iso_code,json=countryIsoCode,proto3" json:"country_iso_code,omitempty"`
	Id             string     `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"` // fiasID или geoID
}

func (x *CityDetailsByGeoIDParams) Reset() {
	*x = CityDetailsByGeoIDParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityDetailsByGeoIDParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityDetailsByGeoIDParams) ProtoMessage() {}

func (x *CityDetailsByGeoIDParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityDetailsByGeoIDParams.ProtoReflect.Descriptor instead.
func (*CityDetailsByGeoIDParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{10}
}

func (x *CityDetailsByGeoIDParams) GetLocale() LocaleType {
	if x != nil {
		return x.Locale
	}
	return LocaleType_nil
}

func (x *CityDetailsByGeoIDParams) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *CityDetailsByGeoIDParams) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type City struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FullTitle        string          `protobuf:"bytes,2,opt,name=full_title,json=fullTitle,proto3" json:"full_title,omitempty"`
	Type             string          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Country          *CountryDetails `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Region           *RegionDetails  `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	State            *State          `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	City             *Details        `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	PostalCode       string          `protobuf:"bytes,8,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	PostalCodeFormat string          `protobuf:"bytes,9,opt,name=postal_code_format,json=postalCodeFormat,proto3" json:"postal_code_format,omitempty"`
	CurrencyCode     string          `protobuf:"bytes,10,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	Phone            *Phone          `protobuf:"bytes,11,opt,name=phone,proto3" json:"phone,omitempty"`
	Location         *Location       `protobuf:"bytes,12,opt,name=location,proto3" json:"location,omitempty"`
	Additional       *CityAdditional `protobuf:"bytes,13,opt,name=additional,proto3" json:"additional,omitempty"`
}

func (x *City) Reset() {
	*x = City{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *City) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*City) ProtoMessage() {}

func (x *City) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use City.ProtoReflect.Descriptor instead.
func (*City) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{11}
}

func (x *City) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *City) GetFullTitle() string {
	if x != nil {
		return x.FullTitle
	}
	return ""
}

func (x *City) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *City) GetCountry() *CountryDetails {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *City) GetRegion() *RegionDetails {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *City) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *City) GetCity() *Details {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *City) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *City) GetPostalCodeFormat() string {
	if x != nil {
		return x.PostalCodeFormat
	}
	return ""
}

func (x *City) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *City) GetPhone() *Phone {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *City) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *City) GetAdditional() *CityAdditional {
	if x != nil {
		return x.Additional
	}
	return nil
}

type Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fias      string `protobuf:"bytes,2,opt,name=fias,proto3" json:"fias,omitempty"`
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	FullTitle string `protobuf:"bytes,4,opt,name=full_title,json=fullTitle,proto3" json:"full_title,omitempty"`
	Type      string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Details) Reset() {
	*x = Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Details) ProtoMessage() {}

func (x *Details) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Details.ProtoReflect.Descriptor instead.
func (*Details) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{12}
}

func (x *Details) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Details) GetFias() string {
	if x != nil {
		return x.Fias
	}
	return ""
}

func (x *Details) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Details) GetFullTitle() string {
	if x != nil {
		return x.FullTitle
	}
	return ""
}

func (x *Details) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type RegionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fias      string `protobuf:"bytes,2,opt,name=fias,proto3" json:"fias,omitempty"`
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	FullTitle string `protobuf:"bytes,4,opt,name=full_title,json=fullTitle,proto3" json:"full_title,omitempty"`
	Type      string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	IsoCode   string `protobuf:"bytes,6,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
}

func (x *RegionDetails) Reset() {
	*x = RegionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionDetails) ProtoMessage() {}

func (x *RegionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionDetails.ProtoReflect.Descriptor instead.
func (*RegionDetails) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{13}
}

func (x *RegionDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegionDetails) GetFias() string {
	if x != nil {
		return x.Fias
	}
	return ""
}

func (x *RegionDetails) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RegionDetails) GetFullTitle() string {
	if x != nil {
		return x.FullTitle
	}
	return ""
}

func (x *RegionDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RegionDetails) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

type HouseDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fias      string `protobuf:"bytes,2,opt,name=fias,proto3" json:"fias,omitempty"`
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	FullTitle string `protobuf:"bytes,4,opt,name=full_title,json=fullTitle,proto3" json:"full_title,omitempty"`
	Type      string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Building  string `protobuf:"bytes,6,opt,name=building,proto3" json:"building,omitempty"`
	Block     string `protobuf:"bytes,7,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *HouseDetails) Reset() {
	*x = HouseDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HouseDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseDetails) ProtoMessage() {}

func (x *HouseDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseDetails.ProtoReflect.Descriptor instead.
func (*HouseDetails) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{14}
}

func (x *HouseDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HouseDetails) GetFias() string {
	if x != nil {
		return x.Fias
	}
	return ""
}

func (x *HouseDetails) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HouseDetails) GetFullTitle() string {
	if x != nil {
		return x.FullTitle
	}
	return ""
}

func (x *HouseDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HouseDetails) GetBuilding() string {
	if x != nil {
		return x.Building
	}
	return ""
}

func (x *HouseDetails) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

type CountryDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	FullTitle    string `protobuf:"bytes,3,opt,name=full_title,json=fullTitle,proto3" json:"full_title,omitempty"`
	Type         string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	IsoCode      string `protobuf:"bytes,5,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	CapitalId    string `protobuf:"bytes,6,opt,name=capital_id,json=capitalId,proto3" json:"capital_id,omitempty"`
	CapitalTitle string `protobuf:"bytes,7,opt,name=capital_title,json=capitalTitle,proto3" json:"capital_title,omitempty"`
}

func (x *CountryDetails) Reset() {
	*x = CountryDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryDetails) ProtoMessage() {}

func (x *CountryDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryDetails.ProtoReflect.Descriptor instead.
func (*CountryDetails) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{15}
}

func (x *CountryDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CountryDetails) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CountryDetails) GetFullTitle() string {
	if x != nil {
		return x.FullTitle
	}
	return ""
}

func (x *CountryDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CountryDetails) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *CountryDetails) GetCapitalId() string {
	if x != nil {
		return x.CapitalId
	}
	return ""
}

func (x *CountryDetails) GetCapitalTitle() string {
	if x != nil {
		return x.CapitalTitle
	}
	return ""
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	IsoCode string `protobuf:"bytes,2,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{16}
}

func (x *State) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *State) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{17}
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type CityAdditional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FiasLevel string `protobuf:"bytes,1,opt,name=fias_level,json=fiasLevel,proto3" json:"fias_level,omitempty"`
}

func (x *CityAdditional) Reset() {
	*x = CityAdditional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityAdditional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityAdditional) ProtoMessage() {}

func (x *CityAdditional) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityAdditional.ProtoReflect.Descriptor instead.
func (*CityAdditional) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{18}
}

func (x *CityAdditional) GetFiasLevel() string {
	if x != nil {
		return x.FiasLevel
	}
	return ""
}

type CityDetailsByIPParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale LocaleType `protobuf:"varint,1,opt,name=locale,proto3,enum=geo.LocaleType" json:"locale,omitempty"`
	Ip     string     `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *CityDetailsByIPParams) Reset() {
	*x = CityDetailsByIPParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityDetailsByIPParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityDetailsByIPParams) ProtoMessage() {}

func (x *CityDetailsByIPParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityDetailsByIPParams.ProtoReflect.Descriptor instead.
func (*CityDetailsByIPParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{19}
}

func (x *CityDetailsByIPParams) GetLocale() LocaleType {
	if x != nil {
		return x.Locale
	}
	return LocaleType_nil
}

func (x *CityDetailsByIPParams) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

// Address ...
type SuggestAddressParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale         LocaleType `protobuf:"varint,1,opt,name=locale,proto3,enum=geo.LocaleType" json:"locale,omitempty"`
	CountryIsoCode string     `protobuf:"bytes,2,opt,name=country_iso_code,json=countryIsoCode,proto3" json:"country_iso_code,omitempty"`
	CityId         string     `protobuf:"bytes,3,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	Search         string     `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	Limit          int32      `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32      `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *SuggestAddressParams) Reset() {
	*x = SuggestAddressParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestAddressParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestAddressParams) ProtoMessage() {}

func (x *SuggestAddressParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestAddressParams.ProtoReflect.Descriptor instead.
func (*SuggestAddressParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{20}
}

func (x *SuggestAddressParams) GetLocale() LocaleType {
	if x != nil {
		return x.Locale
	}
	return LocaleType_nil
}

func (x *SuggestAddressParams) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *SuggestAddressParams) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *SuggestAddressParams) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *SuggestAddressParams) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SuggestAddressParams) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type SuggestAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool              `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Total   int32             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Result  []*SuggestAddress `protobuf:"bytes,3,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *SuggestAddressResponse) Reset() {
	*x = SuggestAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestAddressResponse) ProtoMessage() {}

func (x *SuggestAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestAddressResponse.ProtoReflect.Descriptor instead.
func (*SuggestAddressResponse) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{21}
}

func (x *SuggestAddressResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SuggestAddressResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SuggestAddressResponse) GetResult() []*SuggestAddress {
	if x != nil {
		return x.Result
	}
	return nil
}

type SuggestAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // fiasID или geoID или query_for_details (полная строка адреса)
	Suggest  string `protobuf:"bytes,2,opt,name=suggest,proto3" json:"suggest,omitempty"`
	Title    string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle string `protobuf:"bytes,4,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
}

func (x *SuggestAddress) Reset() {
	*x = SuggestAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestAddress) ProtoMessage() {}

func (x *SuggestAddress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestAddress.ProtoReflect.Descriptor instead.
func (*SuggestAddress) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{22}
}

func (x *SuggestAddress) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SuggestAddress) GetSuggest() string {
	if x != nil {
		return x.Suggest
	}
	return ""
}

func (x *SuggestAddress) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SuggestAddress) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

// нормализация
type AddressDetailsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale         LocaleType `protobuf:"varint,1,opt,name=locale,proto3,enum=geo.LocaleType" json:"locale,omitempty"`
	CountryIsoCode string     `protobuf:"bytes,2,opt,name=country_iso_code,json=countryIsoCode,proto3" json:"country_iso_code,omitempty"`
	Query          string     `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *AddressDetailsParams) Reset() {
	*x = AddressDetailsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressDetailsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressDetailsParams) ProtoMessage() {}

func (x *AddressDetailsParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressDetailsParams.ProtoReflect.Descriptor instead.
func (*AddressDetailsParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{23}
}

func (x *AddressDetailsParams) GetLocale() LocaleType {
	if x != nil {
		return x.Locale
	}
	return LocaleType_nil
}

func (x *AddressDetailsParams) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *AddressDetailsParams) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type AddressDetailsByGeoIDParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale         LocaleType `protobuf:"varint,1,opt,name=locale,proto3,enum=geo.LocaleType" json:"locale,omitempty"`
	CountryIsoCode string     `protobuf:"bytes,2,opt,name=country_iso_code,json=countryIsoCode,proto3" json:"country_iso_code,omitempty"`
	Id             string     `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	CityId         string     `protobuf:"bytes,4,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
}

func (x *AddressDetailsByGeoIDParams) Reset() {
	*x = AddressDetailsByGeoIDParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressDetailsByGeoIDParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressDetailsByGeoIDParams) ProtoMessage() {}

func (x *AddressDetailsByGeoIDParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressDetailsByGeoIDParams.ProtoReflect.Descriptor instead.
func (*AddressDetailsByGeoIDParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{24}
}

func (x *AddressDetailsByGeoIDParams) GetLocale() LocaleType {
	if x != nil {
		return x.Locale
	}
	return LocaleType_nil
}

func (x *AddressDetailsByGeoIDParams) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *AddressDetailsByGeoIDParams) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddressDetailsByGeoIDParams) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fias_id for dadata and place_id for google
	Id               string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FullTitle        string             `protobuf:"bytes,2,opt,name=full_title,json=fullTitle,proto3" json:"full_title,omitempty"`
	Type             string             `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Country          *CountryDetails    `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Region           *RegionDetails     `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	State            *State             `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	City             *Details           `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	Settlement       *Details           `protobuf:"bytes,8,opt,name=settlement,proto3" json:"settlement,omitempty"`
	Street           *Details           `protobuf:"bytes,9,opt,name=street,proto3" json:"street,omitempty"`
	House            *HouseDetails      `protobuf:"bytes,10,opt,name=house,proto3" json:"house,omitempty"`
	PostalCode       string             `protobuf:"bytes,11,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	PostalCodeFormat string             `protobuf:"bytes,12,opt,name=postal_code_format,json=postalCodeFormat,proto3" json:"postal_code_format,omitempty"`
	CurrencyCode     string             `protobuf:"bytes,13,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	Phone            *Phone             `protobuf:"bytes,14,opt,name=phone,proto3" json:"phone,omitempty"`
	Location         *Location          `protobuf:"bytes,15,opt,name=location,proto3" json:"location,omitempty"`
	Additional       *AddressAdditional `protobuf:"bytes,16,opt,name=additional,proto3" json:"additional,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{25}
}

func (x *Address) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Address) GetFullTitle() string {
	if x != nil {
		return x.FullTitle
	}
	return ""
}

func (x *Address) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Address) GetCountry() *CountryDetails {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *Address) GetRegion() *RegionDetails {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Address) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Address) GetCity() *Details {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *Address) GetSettlement() *Details {
	if x != nil {
		return x.Settlement
	}
	return nil
}

func (x *Address) GetStreet() *Details {
	if x != nil {
		return x.Street
	}
	return nil
}

func (x *Address) GetHouse() *HouseDetails {
	if x != nil {
		return x.House
	}
	return nil
}

func (x *Address) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Address) GetPostalCodeFormat() string {
	if x != nil {
		return x.PostalCodeFormat
	}
	return ""
}

func (x *Address) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Address) GetPhone() *Phone {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *Address) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Address) GetAdditional() *AddressAdditional {
	if x != nil {
		return x.Additional
	}
	return nil
}

type AddressAdditional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsInMkad  bool   `protobuf:"varint,1,opt,name=is_in_mkad,json=isInMkad,proto3" json:"is_in_mkad,omitempty"`
	IsInKad   bool   `protobuf:"varint,2,opt,name=is_in_kad,json=isInKad,proto3" json:"is_in_kad,omitempty"`
	FiasLevel string `protobuf:"bytes,3,opt,name=fias_level,json=fiasLevel,proto3" json:"fias_level,omitempty"`
}

func (x *AddressAdditional) Reset() {
	*x = AddressAdditional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressAdditional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressAdditional) ProtoMessage() {}

func (x *AddressAdditional) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressAdditional.ProtoReflect.Descriptor instead.
func (*AddressAdditional) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{26}
}

func (x *AddressAdditional) GetIsInMkad() bool {
	if x != nil {
		return x.IsInMkad
	}
	return false
}

func (x *AddressAdditional) GetIsInKad() bool {
	if x != nil {
		return x.IsInKad
	}
	return false
}

func (x *AddressAdditional) GetFiasLevel() string {
	if x != nil {
		return x.FiasLevel
	}
	return ""
}

type DefaultCityListParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip             string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	CountryIsoCode string `protobuf:"bytes,2,opt,name=country_iso_code,json=countryIsoCode,proto3" json:"country_iso_code,omitempty"`
}

func (x *DefaultCityListParams) Reset() {
	*x = DefaultCityListParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultCityListParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultCityListParams) ProtoMessage() {}

func (x *DefaultCityListParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultCityListParams.ProtoReflect.Descriptor instead.
func (*DefaultCityListParams) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{27}
}

func (x *DefaultCityListParams) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DefaultCityListParams) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

type CountryDetailsByPhoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (x *CountryDetailsByPhoneRequest) Reset() {
	*x = CountryDetailsByPhoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryDetailsByPhoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryDetailsByPhoneRequest) ProtoMessage() {}

func (x *CountryDetailsByPhoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryDetailsByPhoneRequest.ProtoReflect.Descriptor instead.
func (*CountryDetailsByPhoneRequest) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{28}
}

func (x *CountryDetailsByPhoneRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type CountryDetailsByPhoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string   `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Country     *Country `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *CountryDetailsByPhoneResponse) Reset() {
	*x = CountryDetailsByPhoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_geo_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryDetailsByPhoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryDetailsByPhoneResponse) ProtoMessage() {}

func (x *CountryDetailsByPhoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_geo_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryDetailsByPhoneResponse.ProtoReflect.Descriptor instead.
func (*CountryDetailsByPhoneResponse) Descriptor() ([]byte, []int) {
	return file_proto_geo_proto_rawDescGZIP(), []int{29}
}

func (x *CountryDetailsByPhoneResponse) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *CountryDetailsByPhoneResponse) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

var File_proto_geo_proto protoreflect.FileDescriptor

var file_proto_geo_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x67, 0x65, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x27, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x75,
	0x0a, 0x16, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x22, 0x5a, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6f, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbc, 0x02,
	0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x75, 0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x67, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x05,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xbc, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67,
	0x65, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x6f, 0x0a, 0x13, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67,
	0x65, 0x6f, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x69, 0x0a, 0x0b, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x43, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x22, 0x7c, 0x0a, 0x11, 0x43, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x7d, 0x0a, 0x18, 0x43, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79,
	0x47, 0x65, 0x6f, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x65,
	0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xde,
	0x03, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x6c,
	0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x65,
	0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x65, 0x6f, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67,
	0x65, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x29, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0x76, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x61, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x38, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x44, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x2f, 0x0a, 0x0e,
	0x43, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x61, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x50, 0x0a,
	0x15, 0x43, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x49, 0x50,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22,
	0xc8, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x75, 0x0a, 0x16, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x6c, 0x0a, 0x0e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22,
	0x7f, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x99, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x27, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xe1, 0x04, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75,
	0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67,
	0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x65, 0x6f,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x0a, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x27,
	0x0a, 0x05, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x65, 0x6f, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x05, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x65, 0x6f,
	0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x65, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x22, 0x6c, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6d,
	0x6b, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x4d,
	0x6b, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6b, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x49, 0x6e, 0x4b, 0x61, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x61, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x51,
	0x0a, 0x15, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x41, 0x0a, 0x1c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x1d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x65, 0x6f, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x2a, 0x25, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x6e, 0x69, 0x6c, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x72, 0x75, 0x10, 0x01, 0x12,
	0x06, 0x0a, 0x02, 0x65, 0x6e, 0x10, 0x02, 0x32, 0x84, 0x06, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x12,
	0x4a, 0x0a, 0x0e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x19, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1b, 0x2e, 0x67,
	0x65, 0x6f, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19, 0x2e,
	0x67, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x18, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0b, 0x43,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x65, 0x6f,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x09, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x12, 0x43, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79,
	0x47, 0x65, 0x6f, 0x49, 0x44, 0x12, 0x1d, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x49, 0x44, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x09, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x69, 0x74, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x1a, 0x18, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0f,
	0x43, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x49, 0x50, 0x12,
	0x1a, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x42, 0x79, 0x49, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x09, 0x2e, 0x67, 0x65,
	0x6f, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x65, 0x6f,
	0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6f, 0x49, 0x44, 0x12, 0x20, 0x2e, 0x67, 0x65, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42,
	0x79, 0x47, 0x65, 0x6f, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0c, 0x2e, 0x67,
	0x65, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x15,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x08,
	0x5a, 0x06, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_geo_proto_rawDescOnce sync.Once
	file_proto_geo_proto_rawDescData = file_proto_geo_proto_rawDesc
)

func file_proto_geo_proto_rawDescGZIP() []byte {
	file_proto_geo_proto_rawDescOnce.Do(func() {
		file_proto_geo_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_geo_proto_rawDescData)
	})
	return file_proto_geo_proto_rawDescData
}

var file_proto_geo_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_geo_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_proto_geo_proto_goTypes = []interface{}{
	(LocaleType)(0),                       // 0: geo.LocaleType
	(*SuggestCountryParams)(nil),          // 1: geo.SuggestCountryParams
	(*SuggestCountryResponse)(nil),        // 2: geo.SuggestCountryResponse
	(*SuggestCountry)(nil),                // 3: geo.SuggestCountry
	(*CountryDetailsParams)(nil),          // 4: geo.CountryDetailsParams
	(*Country)(nil),                       // 5: geo.Country
	(*Phone)(nil),                         // 6: geo.Phone
	(*SuggestCityParams)(nil),             // 7: geo.SuggestCityParams
	(*SuggestCityResponse)(nil),           // 8: geo.SuggestCityResponse
	(*SuggestCity)(nil),                   // 9: geo.SuggestCity
	(*CityDetailsParams)(nil),             // 10: geo.CityDetailsParams
	(*CityDetailsByGeoIDParams)(nil),      // 11: geo.CityDetailsByGeoIDParams
	(*City)(nil),                          // 12: geo.City
	(*Details)(nil),                       // 13: geo.Details
	(*RegionDetails)(nil),                 // 14: geo.RegionDetails
	(*HouseDetails)(nil),                  // 15: geo.HouseDetails
	(*CountryDetails)(nil),                // 16: geo.CountryDetails
	(*State)(nil),                         // 17: geo.State
	(*Location)(nil),                      // 18: geo.Location
	(*CityAdditional)(nil),                // 19: geo.CityAdditional
	(*CityDetailsByIPParams)(nil),         // 20: geo.CityDetailsByIPParams
	(*SuggestAddressParams)(nil),          // 21: geo.SuggestAddressParams
	(*SuggestAddressResponse)(nil),        // 22: geo.SuggestAddressResponse
	(*SuggestAddress)(nil),                // 23: geo.SuggestAddress
	(*AddressDetailsParams)(nil),          // 24: geo.AddressDetailsParams
	(*AddressDetailsByGeoIDParams)(nil),   // 25: geo.AddressDetailsByGeoIDParams
	(*Address)(nil),                       // 26: geo.Address
	(*AddressAdditional)(nil),             // 27: geo.AddressAdditional
	(*DefaultCityListParams)(nil),         // 28: geo.DefaultCityListParams
	(*CountryDetailsByPhoneRequest)(nil),  // 29: geo.CountryDetailsByPhoneRequest
	(*CountryDetailsByPhoneResponse)(nil), // 30: geo.CountryDetailsByPhoneResponse
}
var file_proto_geo_proto_depIdxs = []int32{
	0,  // 0: geo.SuggestCountryParams.locale:type_name -> geo.LocaleType
	3,  // 1: geo.SuggestCountryResponse.result:type_name -> geo.SuggestCountry
	6,  // 2: geo.SuggestCountry.phone:type_name -> geo.Phone
	0,  // 3: geo.CountryDetailsParams.locale:type_name -> geo.LocaleType
	16, // 4: geo.Country.country:type_name -> geo.CountryDetails
	6,  // 5: geo.Country.phone:type_name -> geo.Phone
	18, // 6: geo.Country.location:type_name -> geo.Location
	0,  // 7: geo.SuggestCityParams.locale:type_name -> geo.LocaleType
	9,  // 8: geo.SuggestCityResponse.result:type_name -> geo.SuggestCity
	0,  // 9: geo.CityDetailsParams.locale:type_name -> geo.LocaleType
	0,  // 10: geo.CityDetailsByGeoIDParams.locale:type_name -> geo.LocaleType
	16, // 11: geo.City.country:type_name -> geo.CountryDetails
	14, // 12: geo.City.region:type_name -> geo.RegionDetails
	17, // 13: geo.City.state:type_name -> geo.State
	13, // 14: geo.City.city:type_name -> geo.Details
	6,  // 15: geo.City.phone:type_name -> geo.Phone
	18, // 16: geo.City.location:type_name -> geo.Location
	19, // 17: geo.City.additional:type_name -> geo.CityAdditional
	0,  // 18: geo.CityDetailsByIPParams.locale:type_name -> geo.LocaleType
	0,  // 19: geo.SuggestAddressParams.locale:type_name -> geo.LocaleType
	23, // 20: geo.SuggestAddressResponse.result:type_name -> geo.SuggestAddress
	0,  // 21: geo.AddressDetailsParams.locale:type_name -> geo.LocaleType
	0,  // 22: geo.AddressDetailsByGeoIDParams.locale:type_name -> geo.LocaleType
	16, // 23: geo.Address.country:type_name -> geo.CountryDetails
	14, // 24: geo.Address.region:type_name -> geo.RegionDetails
	17, // 25: geo.Address.state:type_name -> geo.State
	13, // 26: geo.Address.city:type_name -> geo.Details
	13, // 27: geo.Address.settlement:type_name -> geo.Details
	13, // 28: geo.Address.street:type_name -> geo.Details
	15, // 29: geo.Address.house:type_name -> geo.HouseDetails
	6,  // 30: geo.Address.phone:type_name -> geo.Phone
	18, // 31: geo.Address.location:type_name -> geo.Location
	27, // 32: geo.Address.additional:type_name -> geo.AddressAdditional
	5,  // 33: geo.CountryDetailsByPhoneResponse.country:type_name -> geo.Country
	1,  // 34: geo.geo.SuggestCountry:input_type -> geo.SuggestCountryParams
	4,  // 35: geo.geo.CountryDetails:input_type -> geo.CountryDetailsParams
	7,  // 36: geo.geo.SuggestCity:input_type -> geo.SuggestCityParams
	10, // 37: geo.geo.CityDetails:input_type -> geo.CityDetailsParams
	11, // 38: geo.geo.CityDetailsByGeoID:input_type -> geo.CityDetailsByGeoIDParams
	28, // 39: geo.geo.DefaultCityList:input_type -> geo.DefaultCityListParams
	20, // 40: geo.geo.CityDetailsByIP:input_type -> geo.CityDetailsByIPParams
	21, // 41: geo.geo.SuggestAddress:input_type -> geo.SuggestAddressParams
	24, // 42: geo.geo.AddressDetails:input_type -> geo.AddressDetailsParams
	25, // 43: geo.geo.AddressDetailsByGeoID:input_type -> geo.AddressDetailsByGeoIDParams
	29, // 44: geo.geo.CountryDetailsByPhone:input_type -> geo.CountryDetailsByPhoneRequest
	2,  // 45: geo.geo.SuggestCountry:output_type -> geo.SuggestCountryResponse
	5,  // 46: geo.geo.CountryDetails:output_type -> geo.Country
	8,  // 47: geo.geo.SuggestCity:output_type -> geo.SuggestCityResponse
	12, // 48: geo.geo.CityDetails:output_type -> geo.City
	12, // 49: geo.geo.CityDetailsByGeoID:output_type -> geo.City
	8,  // 50: geo.geo.DefaultCityList:output_type -> geo.SuggestCityResponse
	12, // 51: geo.geo.CityDetailsByIP:output_type -> geo.City
	22, // 52: geo.geo.SuggestAddress:output_type -> geo.SuggestAddressResponse
	26, // 53: geo.geo.AddressDetails:output_type -> geo.Address
	26, // 54: geo.geo.AddressDetailsByGeoID:output_type -> geo.Address
	30, // 55: geo.geo.CountryDetailsByPhone:output_type -> geo.CountryDetailsByPhoneResponse
	45, // [45:56] is the sub-list for method output_type
	34, // [34:45] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_proto_geo_proto_init() }
func file_proto_geo_proto_init() {
	if File_proto_geo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_geo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestCountryParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestCountryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestCountry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryDetailsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Phone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestCityParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestCityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityDetailsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityDetailsByGeoIDParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*City); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HouseDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityAdditional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityDetailsByIPParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestAddressParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressDetailsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressDetailsByGeoIDParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressAdditional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultCityListParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryDetailsByPhoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_geo_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryDetailsByPhoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_geo_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_geo_proto_goTypes,
		DependencyIndexes: file_proto_geo_proto_depIdxs,
		EnumInfos:         file_proto_geo_proto_enumTypes,
		MessageInfos:      file_proto_geo_proto_msgTypes,
	}.Build()
	File_proto_geo_proto = out.File
	file_proto_geo_proto_rawDesc = nil
	file_proto_geo_proto_goTypes = nil
	file_proto_geo_proto_depIdxs = nil
}
