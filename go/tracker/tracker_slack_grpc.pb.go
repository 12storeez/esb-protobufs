// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: proto/tracker_slack.proto

package tracker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrackerSlack_SendTicket_FullMethodName = "/tracker.TrackerSlack/SendTicket"
)

// TrackerSlackClient is the client API for TrackerSlack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackerSlackClient interface {
	SendTicket(ctx context.Context, in *SendTicketParams, opts ...grpc.CallOption) (*SendTicketResponse, error)
}

type trackerSlackClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerSlackClient(cc grpc.ClientConnInterface) TrackerSlackClient {
	return &trackerSlackClient{cc}
}

func (c *trackerSlackClient) SendTicket(ctx context.Context, in *SendTicketParams, opts ...grpc.CallOption) (*SendTicketResponse, error) {
	out := new(SendTicketResponse)
	err := c.cc.Invoke(ctx, TrackerSlack_SendTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerSlackServer is the server API for TrackerSlack service.
// All implementations should embed UnimplementedTrackerSlackServer
// for forward compatibility
type TrackerSlackServer interface {
	SendTicket(context.Context, *SendTicketParams) (*SendTicketResponse, error)
}

// UnimplementedTrackerSlackServer should be embedded to have forward compatible implementations.
type UnimplementedTrackerSlackServer struct {
}

func (UnimplementedTrackerSlackServer) SendTicket(context.Context, *SendTicketParams) (*SendTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTicket not implemented")
}

// UnsafeTrackerSlackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackerSlackServer will
// result in compilation errors.
type UnsafeTrackerSlackServer interface {
	mustEmbedUnimplementedTrackerSlackServer()
}

func RegisterTrackerSlackServer(s grpc.ServiceRegistrar, srv TrackerSlackServer) {
	s.RegisterService(&TrackerSlack_ServiceDesc, srv)
}

func _TrackerSlack_SendTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTicketParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerSlackServer).SendTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerSlack_SendTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerSlackServer).SendTicket(ctx, req.(*SendTicketParams))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackerSlack_ServiceDesc is the grpc.ServiceDesc for TrackerSlack service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackerSlack_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracker.TrackerSlack",
	HandlerType: (*TrackerSlackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTicket",
			Handler:    _TrackerSlack_SendTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tracker_slack.proto",
}
